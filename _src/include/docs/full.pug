extends docbase

block vars
  - var selected = 'full'

block content
  // Programming in C
  a(name='CProgramming')
  h2 Programming in C
  p
    | Following a Quick C Tutorial introduction, more detailed sections are provided which describe
  ul
    li
      a(href='#Data_Objects') C data objects
      |  including variables, constants, data types, pointers, arrays, and structures
    li
      a(href='#Statements_and_Expressions') C statements and expressions
      |  including operators used in expressions and
      |  control flow statements used to create program logic
    li
      a(href='#Programming_Style') C Programming style
      |  including use of white space, indentation, and comments
    li
      a(href='#Program_Debugging') C program debugging
      |  to correct syntax and semantic errors, with attention to using 
      code printf
      |  and commenting out sections of code
    li
      a(href='#Display_Screen_Printing') Display screen printing using printf
      |  including multiple examples using printf
      |  % codes
    li
      a(href='#Preprocessor') The C preprocessor
      |  including
      |  #include,
      |  #define, macros, and conditional compilation
    li
      a(href='#C_Math_Library') C math library
      |  descriptions of math functions commonly used with the KIPR Robot Controller
  p
    | The C programming information provided is sufficient for most purposes, but a C programming reference such as those
    | noted above should be consulted where more detail is needed or where elements of C not covered (such as functions
    | with a variable number of parameters or function pointers) are needed to solve some programming issue.
  // A Quick C Tutorial
  a(name='A_Quick_C_Tutorial')
  h2 A Quick C Tutorial
  p
    | A C program consists of one or more function definitions along with user specified data structures, and typically utilizes
    | pre-compiled code from function libraries. To be a C program, one of the functions must be named 
    code main
    | .
  p
    | The following is a simple C program which has a single defined function named 
    code main
    |  and which utilizes
    |  the library function 
    code printf
    | . A C function returns a value whose type needs to be specified. As a C function 
    code main
    |  is defined by first declaring its return data type followed by its name ( 
    code main
    | ) and
    |  argument list in parentheses (empty in this case), after which the program code for the function is given in curly
    |  braces ( 
    code {}
    | ). Comments are normally included to document the function's purpose and expected behavior,
    |  and are ignored in the compilation process.
  a(name='SimpleProgram')
  // div class='card-panel hoverable tomorrow lighten-2'
  pre
    code.language-clike
      | /* C Programmer&apos;s Manual 
      |    Simple example */
      | int main()
      | {
      |   printf(&quot;Hello, world!\n&quot;); // simple example
      | }
  // /div
  p
    | Text between 
    code /*
    |  and 
    code */
    |  forms what is termed a bracketed comment, which can extend over multiple
    |  lines. Text that starts with 
    code //
    |  forms a single line comment which continues only to the end of the line.
    |  Commenting program code is a good habit to form, especially considering it has no impact on program performance.
  p
    | All C functions must have a return data type. While 
    code main
    |  does not return a value to another function,
    |  it is expected to return an integer to the operating system (not relevant to this discussion), and so has return
    |  type
    |  int. In C, a function does not have to return a value, which is specified by return type
    |  void.
  p
    | Another common numeric data type is
    | double, which represents (double precision) floating point numbers used for non-integer calculation. There
    | are additional basic (or 
    i ordinal
    | ) data types, and user defined data types derived from basic data types may
    |  also be employed.
  p
    | The Botball, graphics, opencv, stdio, stdlib, math, strings and time libraries are all included in the header in the
    | template. The system takes care of the needed
    | #include.
  p
    | The function's name immediately follows the function's return type specification (in this case, 
    code main
    | ).
    |  Next, in parentheses, are any arguments (or inputs) to the function. 
    code main
    |  has none, signified by an
    |  empty set of parentheses.
  p
    | The open curly-brace ( 
    code {
    | ) that follows the argument list signifies the start of the actual function code.
    |  Curly-braces are used to structure a program as blocks of code. For C, so-called 'white space' consists of one
    |  or more of any combination of characters such as spaces, returns, new lines, and tabs, which is collapsed to a
    |  single generic white space character in compilation. For this reason, white space can be used for things like indentation
    |  that improve program readability. In particular, the KISS IDE editor automatically applies white space readability
    |  conventions to enhance files as they are edited.
  p
    | The body of the function consists of a block consisting of a series of C statements. A C statement specifies a data
    | structure or some specific action to be taken and is terminated with a semicolon ( 
    code ;
    | ). The simple example
    |  program has a single statement,
  .Indent
    code printf('Hello, world!\n');
  p
    | The action this statement specifies is calling the C library 
    code printf
    |  function to format and print the
    |  message 
    code Hello, world!
    |  to the project target. The
    |  '\n' directs 
    code printf
    |  to 'start a new line' (in effect ending the current line and positioning
    |  for subsequent printing to start on the next line). When printing reaches the bottom of the KIPR Controller display,
    |  any additional lines printed cause the display to scroll up. Since calling the 
    code printf
    |  function is
    |  a C statement, it has to be ended with a semicolon ( 
    code ;
    | ). A common error made by beginning C programmers
    |  is omitting the semicolon that is required to end each statement.
  p
    | The closing curly-brace ( 
    code }
    | ) for the 
    code main
    |  function's block structure concludes its definition.
  p
    | If the compiler issues a warning that 
    code printf
    |  is being used with an implicit declaration, then prefacing
    |  the program code with the preprocessor directive
  .Indent
    | #include &lt;stdio.h&gt;
  p
    | will ensure that the C preprocessor includes the declaration in preparing the code for compilation.
  p
    | As a second example exhibiting features of C, the following program code defines a function named 
    code square
    |  which returns the mathematical square of an integer. In this case the function does not represent a complete
    |  C program, since a function named 
    code main
    |  for using it has not been defined yet.
  pre
    code.language-clike
      | int square(int n)
      | {
      |     return n * n;
      | }
  p
    | The function is declared with return type
    | int, which means that it will return an integer value.
  p
    | The function name ( 
    code square
    | ) is followed by its argument list in parentheses, where arguments are separated
    |  by commas if there are more than one (there is only one in this case). The argument for 
    code square
    |  is
    |  specified to be an integer and is named 
    code n
    | . The data type for each argument is declared in the same
    |  manner as declaring the return data type of the function or the data type for a variable.
  p
    | When a function declaration specifies arguments, the variable names representing the arguments are local to the
    | function, or stated another way, they are valid only within the 'scope' of the function (they only have meaning
    | within the function's block of code). For this reason, variable names used within the scope of a function will
    | not cause a semantic conflict should their names duplicate those local to some other function.
  p
    | The 'scope' for the function 
    code square
    |  is what takes place within the block structure defining
    |  its actions (i.e., the contents within the curly braces surrounding its program statements). In this case, the
    |  function's actions consist of a single statement; namely, the
    |  return statement. The action of the
    |  return statement is to exit the function, assigning the function's return value to be what is specified
    |  by the 
    code return
    |  statement, in this case the result of the computation 
    code n * n
    | .
  p
    | Except where grouped by parentheses, expressions are evaluated according to a set of precedence rules associated
    | with the various operators used within the expression. In this case, only the multiplication operator 
    code *
    |  is employed, so operator precedence is not an issue.
  p
    | For a third example, the following program code defines a function which performs a function call to the 
    code square
    |  program.
  pre
    code.language-clike
      | #include &lt;math.h&gt;
      | double hypotenuse(int a, int b)
      | {
      |     double h;
      |     h = sqrt(square(a) + square(b));
      |     return(h);
      | }
  br
  p
    | The argument list for this function has two arguments, each with integer data type. Additionally, its block structure
    | includes a statement specifying a 'working variable' 
    code h
    | . The data type for 
    code h
    |  is given
    |  as floating point, since the C library function 
    code sqrt
    |  returns a floating point argument. If its data
    |  type was specified to be integer, the fractional part of any floating point number assigned to it would be lost.
    |  In general, as is the case for 
    code h
    | , any local variables used within a program block (indicated by
    |  a set of curly braces) are specified at the beginning of the block.
  p
    | The value assigned to 
    code h
    |  is the value returned by calling the 
    code sqrt
    |  function from the C
    |  math library and which calculates the mathematical square root of its argument. 
    code sqrt
    |  is a built-in
    |  C function that takes a floating point number as its argument. For any KISS IDE target,
    |  #include &lt;math.h&gt; is needed when using functions from the math library.
  p
    | The 
    code hypotenuse
    |  function uses the 
    code square
    |  function defined earlier. The 
    code sqrt
    |  function is specified to have a floating point argument. So what happens if 
    code sqrt
    |  is called with
    |  an integer argument instead of floating point? Answer: C will automatically coerce the integer to a floating
    |  point value (which uses a format involving both an exponent and a mantissa). If C's automatic coercion does the
    |  'wrong' thing, it can be bypassed by specifying how the value is to be coerced, which is accomplished by preceding
    |  it with the data type in parentheses into which it is to be converted; e.g., 
    code
      | (double)(square(a) + square(b))
    | .
  p
    | The 
    code hypotenuse
    |  function concludes by returning the value of 
    code h
    | .
  p
    | The functions 
    code square
    |  and 
    code hypotenuse
    |  still do not constitute a program since a 
    code main
    |  function that uses them still needs to be defined. A complete program using these two functions follows:
  a(name='HypotenuseSquare')
  pre
    code.language-clike
      | /* Extended example: C Programmer&apos;s Manual */
      | #include &lt;stdio.h&gt;
      | #include &lt;math.h&gt;
      | int square(int n);
      | double hypotenuse(int a, int b);
      | int main()
      | {
      |     printf(&quot;Hypotenuse of a 3,4 right triangle is %d\n&quot;,(int) hypotenuse(3,4)); // coerce hypotenuse to int
      | }
      | int square(int n)
      | {
      |     return(n * n);
      | }
      | double hypotenuse(int a, int b)
      | {
      |     double h;
      |     h = sqrt(square(a) + square(b));
      |     return(h);
      | }
  p
    | Program behavior is described by 
    code main
    | , which calls the C library function 
    code printf
    | , which
    |  in turn calls the function 
    code hypotenuse
    |  to obtain the parameter value, and 
    code hypotenuse
    |  in turn calls the function 
    code square
    |  in order to do its calculation. These calls result in the calculation
    |  and printing of the length (truncated to integer) of the hypotenuse of a right triangle by supplying the lengths
    |  of its two sides to the 
    code hypotenuse
    |  function. Note that the floating point value supplied to 
    code printf
    |  from 
    code hypotenuse
    |  is coerced to integer data type, since otherwise 
    code printf
    |  will print
    |  its floating point format as if it were an integer, a semantic error.
  p The two C statements
  .Indent
    code
      | int square(int n); 
      br
      | double hypotenuse(int a, int b);
  p
    | provide C 'prototype' specifications for the 
    code square
    |  and 
    code hypotenuse
    |  functions used in
    |  the program. Similar prototypes need to be supplied for the standard C library's 
    code printf
    |  function
    |  and the C math library's 
    code sqrt
    |  function. The preprocessor statements
  .Indent
    code
      | #include &lt;stdio.h&gt;
      br
      | #include &lt;math.h&gt;
  p
    | have the C preprocessor provide the needed prototypes (if not needed for a given KISS IDE target, the preprocessor
    | will skip these statements; i.e., it is usually a good habit to put them in anyway). Examples of other commonly
    | used system header files are 
    code &lt;string.h&gt;
    | , 
    code &lt;stdlib.h&gt;
    | , 
    code &lt;stdarg.h&gt;
    | , and 
    code &lt;time.h&gt;
    | .
  p
    | The declaration of a function's prototype or it's actual definition needs to precede the function's first use in
    | program code so that the compiler will be able to correctly translate the statement which calls the function.
    | For this example, since the definitions of the 
    code square
    |  and 
    code hypotenuse
    |  functions follow
    |  the definition of the 
    code main
    |  function, their prototype declarations need to be included before the definition of 
    code main
    | .
    |  Absent a declaration for a function, the compiler will issue an implicit declaration warning for where it first
    |  encounters the function, the results from which may be a subsequent compilation error or incorrect results when
    |  the program is executed.
  p This concludes the brief C tutorial. 
  // Data_Objects
  // JJM STARTED UPDATE HERE 2016-01-08
  a(name='Data_Objects')
  h2 Data Objects
  p
    | Variables and constants are basic data objects used in a C program. More complex data structures and data types
    | based on basic data objects and types can also be defined. Specification statements (such as the one used for
    | the variable 
    code h
    |  in the 
    code hypotenuse
    |  program above) are used to define the variables the programmer
    |  wants to use in a program. A specification statement may set a variable's initial value as well as specifying
    |  its data type.
  // Variables
  a(name='Variables')
  h3 Variables
  p
    | Variable names are formed from combinations of lower case letters, capital letters, the decimal digits (0-9),
    | and the underscore character ( 
    code '_'
    | ). There are two restrictions that must be observed in forming
    |  the name:
  ul
    li
      | a variable name cannot begin with a decimal digit
    li
      | a variable name cannot be a keyword such as
      | if,
      | while, etc.
  p
    | Variables which are specified as function arguments or which are defined within program blocks are called 
    i local
    |  variables. Their scope is limited to the structure in which they are defined. Variables defined at the same
    |  level as the 
    code main
    |  function and other functions (i.e., not inside any function's block structure)
    |  apply across all functions used by the program. These are called 
    i global
    |  variables and are used for
    |  data structures accessed by more than one function, or for function to function message passing (especially
    |  for functions operating in parallel threads).
  p
    | Since functions and global variables are defined at the same level, they must have unique names. The name
    | of a function or a global variable can be used as the name of a local variable, in which case the local
    | use takes precedence; i.e., the scope of the local variable supercedes that of a function or global variable
    | with the same name.
  // Declaration
  a(name='Declaration')
  .Indent
    h4 Declaration
    p
      | In C, a variable is declared by a specification statement that provides its data type, and optionally its
      | initial value. Declarations for global variable are normally grouped before the definition of 
      code main
      | .
      |  Declarations for local variables are normally grouped at the beginning of the block structure in which
      |  they are used. The general form of a variable declaration is one of the following:
    ul
      li
        | &lt;
        i data-type
        | &gt;&lt;
        i variable-name
        | &gt;;
      li
        | &lt;
        i data-type
        | &gt;&lt;
        i variable-name
        | &gt;=
        |  &lt;
        i initialization-data
        | &gt;;
    p
      | &lt;
      a(href='KIPRLinkManualBody.htm#Data_Types', target='ManualFrame')
        i data-type
      | &gt; can be a basic (ordinal) data type such as
      |  int,
      |  double,
      |  char, or a composite data type such as a pointer data type or a user-defined data type. User-defined
      |  data types are based on structures or on enumerated sets. In particular, a
      |  struct definition creates a user-defined data type
      |  struct
      |  &lt;
      i struct-name
      | &gt;, typically simplified by using
      |  typedef to provide the
      |  struct
      | &lt;
      i struct-name
      | &gt; data type with a more digestible name. Just as
      |  struct provides a means for defining a data type based on a structure,
      |  enum provides a means for defining an enumerated data type based on an enumerated set of names.
      // Local_and_Global_Scopes
      a(name='Local_and_Global_Scopes')
    h4 Local and Global Scopes
    p
      | If a variable is declared within a function, or as an argument to a function, its binding is local, meaning
      | that the variable is available for use only within the context of that function definition. If a variable
      | is declared outside of a function, it is a global variable and is available for use within any function
      | employed by the program, including functions which are defined in files other than the one in which
      | the global variable is declared. If a global variable represents a complex data structure whose definition
      | would clutter up the main program file, it is sometimes advantageous to define it in a separate file
      | to be included by the C preprocessor in preparing the program code for compilation.
    // Variable_Initialization
    a(name='Variable_Initialization')
    h4 Variable Initialization
    p
      | The initial value of a local or global variable can optionally be specified in its declaration. If no
      | initialization value is given, the value is indeterminate. When a global variable is initialized, the
      | initialization value must be a constant. In contrast, local variables may be initialized to the value
      | of arbitrary expressions including any global variables, function calls, function arguments, or local
      | variables which have already been initialized.
    p
      | The compilation process translates a program into machine executable form, initializing global variables
      | within the resulting execute module as specified in global variable declarations. Local variable initialization
      | doesn't take place until program execution enters the block in which the local variable is defined.
      | The initialization occurs every time program execution enters the block, excepting local variables
      | whose declaration is preceded by the word
      | static. For a local variable declared to be
      | static, initialization only takes place the first time the block defining it is entered. A
      | static local variable retains the last value assigned to it whether or not program execution
      | is in its block.
    |  When applied at the global level, a
    |  static specification limits the scope of a global variable or subordinate function to the source
    |  file in which it is defined. This serves the purpose of allowing a pre-compiled library function to define
    |  global variables and subordinate functions whose names can be duplicated in a calling program without
    |  incurring error.
    p
      | A small example illustrating initialization of global and local variables follows:
    pre
      code.language-clike
        | int cnt=50; // global declaration of cnt as integer; initial value 50
        | double tmp=100.123; // global declaration of tmp as floating point; initial value 100.123
        | int function_example()
        | {
        |     int x; // local declaration of x as integer; initial value indeterminate 
        |     double y=tmp; // local declaration of y as floating point; initial value global tmp 
        | }
    p
      | To recap, local variables are not initialized until the function containing them is executed. The initial
      | value of global variables are part of the compiled version of the program, so global variables revert
      | to their initialized value whenever the program is run.
    // Constants
    a(name='Constants')
    h3 Constants
    .indent
      a(name='Integer_Constants')
      h4
        | Integer (
        | int) Constants
      p
        | For most purposes, integer constants are defined using decimal (base 10) integer format. An integer
        | of type
        | int is normally stored in memory as a 32-bit 2's complement integer, which allows values
        | in the range [-2
        sup 31
        | , 2
        sup 31
        | -1]. Integer constants can also be defined using hexadecimal
        |  (base 16) integer format (marked by the prefix ' 
        code 0x
        | '), or octal (base 8) integer format
        |  (marked by the prefix ' 
        code 0
        | '), although both are awkward for representing negative numbers.
        |  For 32-bit two's complement integers, the following are true:
      .indent
        | 4053
        sub 10
        |  = FD5
        sub 16
        |  = 7725
        sub 8
        br
        |  -1
        sub 10
        |  = FFFFFFFF
        sub 16
        |  = 37777777777
        sub 8
        | .
      p In C notation, these comparisons become
      .indent
        code
          | 4053 == 0xFD5 == 07725
        br
        code
          | -1 == 0xffffffff == 037777777777
      p
        | which also illustrates each of the three formats. Appending a 'u' or 'U' to the constant changes
        | its value to the range [0, 2
        sup 32
        | -1] rather than [-2
        sup 31
        | , 2
        sup 31
        | -1].
        |  An 'unsigned' specification is sometimes needed when data is to be copied to a variable of a
        |  different type; in particular, 8-bit bytes are treated as unsigned integers.
      p
        | Present day computer memory is normally organized in 8-bit bytes, so hexadecimal pairs are commonly
        | used to exhibit the value of bytes in memory. Earlier computer systems used 3-bit groupings
        | which were represented using octal digits, explaining why octal representation is included
        | as a means for representing integers in C.
      p
        | The number of bits used for representing integers is system dependent, but is typically 32 bits
        | for type
        | int. The data type
        | long int normally specifies a 64-bit integer, and is designated by appending 'L' or
        | 'l' to the integer's representation. For most programming needs, integer type (
        | int) constants are sufficient.
      // Floating_Point_Constants
      a(name='Floating_Point_Constants')
      h4
        | Floating Point (
        | double) constants
      p
        | Fractions are an extension of the integers, and may be represented using a format termed scientific
        | (mantissa, exponent) notation; i.e.,
      .indent
        code
          | 0.&lt;
          i mantissa
          | &gt; &times; 10
          sup
            | &lt;
            i exponent
            | &gt;
      p
        | In addition to providing means for representing nominal fractional values, this format allows
        | reasonable approximation of astronomically large or infinitesimally small numbers, emphasizing
        | magnitude more so than exactness. Since the decimal point for a number such as 123.4567 is
        | floated to the front in setting the mantissa and exponent (0.1234567×10
        sup 3
        | ),
        |  the term floating point representation is used.
      p
        | Computer arithmetic is binary rather than decimal, so the exponent and mantissa are represented
        | internally as base 2 values. Note that the terminating decimal fraction 0.1
        sub 10
        |  when
        |  represented as a binary fraction is non-terminating (0.00011001100110011 ...
        sub 2
        | ).
        |  This illustrates that even in simple cases a floating point value may be an approximation,
        |  where precision is improved by allowing more bits for the mantissa (double precision doubles
        |  the number of bits used for the representation from 32 to 64, adding extra bits for both mantissa
        |  and exponent).
      p
        | A floating point constant can be defined using either ordinary decimal point representation or
        | a form of (base 10) scientific notation; for example,
      .indent
        code
          | 123.4567 == 12.34567E1 == 1234567e-4 == .1234567e3
      p
        | Since the KIPR Robot Controller does not have floating point operations integrated into its CPU,
        | floating point operations are handled by software, making them significantly slower than integer
        | operations (although still fast in human terms). Hence, floating point should only be used
        | for data that is inherently fractional.
      // Characters_and_String_Constants
      a(name='Characters_and_String_Constants')
      h4 Characters and String Constants
      p
        | A character constant is given by enclosing the character in single quote marks; e.g.,
        | 'K'. Characters are internally encoded in 8-bit bytes using ASCII representation (e.g.,
        | the internal ASCII representation of
        | 'K' is the (8-bit) hex pair '4B').
      p
        | A character string constant is a sequence of characters enclosed in quotation marks, e.g.,
        | 'This is a character string.'. C processes a character string as (1-dimensional) array
        | delimited by the (unprintable) character constant
        | '\0', which marks the end of the string within the array.
      p
        | The character constant
        | 'K' cannot be used interchangeably with the string constant
        | 'K' since
        | 'K' is an 8-bit integer and
        | 'K' is a 16-bit string whose first 8-bits are the 8-bits for
        | 'K' and the second 8-bits are the 8-bits for
        | '\0'.
      // NULL
      a(name='NULL')
      h4 NULL
      p
        | The special constant 
        code NULL
        |  (a preprocessor macro included implicitly, or explicitly
        |  using
        |  #include &lt;stio.h&gt;) is provided by the C preprocessor to represent a NULL pointer.
        |  In general, a pointer represents the location (or address) of a data structure in memory. A
        |  NULL pointer is one which exists, but which points to nothing.
      p
        | A pointer that hasn't been initialized has no semantic meaning, in contrast to a pointer initialized
        | to 
        code NULL
        | , which points to nothing (think in terms of the empty set used in mathematics).
        |  To check if a pointer variable is pointing to data you compare its value to 
        code NULL
        | .
        |  As an illustration, suppose a linked list data type is defined to have elements with 2 components,
        |  the first of which provides a data value and the second of which is a pointer to the next logical
        |  element in the list; e.g., the components for an element in the list might represent a name,
        |  and a pointer to the element containing the next name in the list in alphabetical order. If
        |  the list is processed to retrieve the name data in alphabetical order, the last element in
        |  the list will need to have 
        code NULL
        |  assigned to its pointer since there are no more
        |  names! 
        code NULL
        |  then provides a (testable) pointer component value that identifies
        |  the last element in the list.
    // Data_Types
    a(name='Data_Types')
    h3 Data Types
    p C supports the following data types among others:
    // 32-bit_Integers
    .indent
      a(name='32-bit_Integers')
      h4 32-bit Integers
      p
        | 32-bit integers are signified by the data type indicator
        | int. They are signed integers in the (decimal) range -2,147,483,648 to +2,147,483,647.
      // 32-bit_Floating_Point_Numbers
      a(name='64-bit_Floating_Point_Numbers')
      h4 64-bit Floating Point Numbers
      p
        | Floating point numbers are best specified by the data type indicator
        | double. 64-bit floating point numbers have at least 15 decimal digits of precision and range
        | from about 10
        sup -308
        |  to 10
        sup 308
        | .
      // 8-bit_Characters
      a(name='8-bit_Characters')
      h4 8-bit Characters
      p
        | Characters are 8-bit (unsigned) integers signified by the data type indicator
        | char. A character's value normally represents a standard ASCII character code, most of which
        | are printable.
      // Pointers
      a(name='Pointers')
      h4 Pointers
      p
        | A C pointer is a 32-bit number representing the address of a byte location in memory. A pointer that
        | represents the location in memory where information is stored can be used to manipulate the data
        | by performing calculations on the pointer, passing the pointer, or dereferencing the pointer (deference
        | means to obtain the value stored at the location).
      a(name='Arrays1')
      h4 Arrays
      p
        | An array is a data structure used to store a sequence of homogeneous data elements (each element
        | of the array must be of the same data type). Every array has a length which is determined at the
        | time the array is declared. The location of an element in an array is given by supplying its index
        | in brackets. For example, 
        code myarray[3]
        |  references the fourth element in an array named 
        code myarray
        |  where indexing starts from 0. By providing the index, data may be stored in
        |  or retrieved from the array in the same manner as for other variables. By specifying an array whose
        |  elements are (same-sized) arrays, an array with more than one dimension can be defined.
      a(name='Structures1')
      h4 Structures
      p
        | Structures are used to store non-homogenous but related sets of data. Before a structure can be specified,
        | its
        | struct data type must be defined. Any available data type can be used in its definition,
        | including those that are user defined. In contrast to arrays, elements of a structure are referenced
        | by name instead of number. For example, if a 
        code struct Triangle
        |  data type is defined as
      pre
        code.language-clike
          | struct Triangle {
          |     double sideA;
          |     double sideB;
          |     double sideC;
          | };
      p
        | then 
        code
          | struct Triangle x 
        |  defines a structure named 
        code x
        |  of data type 
        code struct Triangle
        | . If side A for triangle 
        code x
        |  is needed, it is referenced by name as 
        code x.sideA
        | .
      p
        | Since a function can return a
        | struct data type, structures provide a way for a function to return multiple data values.
        | Structures can also be useful for reducing the number of arguments passed to functions. More
        | importantly, structures provide a means for creating complex data structure representations such
        | as directed graphs and linked lists. For these kinds of data structures, the
        | struct elements may be dynamically allocated (see 
        code malloc
        | ) or may be taken
        |  from an array set up for this purpose that has the same
        |  struct data type.
      a(name='EnumeratedSets')
      h4 Enumerated Sets
      p
        | Enumerated sets are used to associate names with integer values, by default 0,1,2, ... according
        | to how many entries are in the set. For example,
      .Indent
        code enum letter {F,D,C,B,A};
      p
        | specifies an enumerated data type named 
        code letter
        |  with associated names F,D,C,B,A which
        |  by default correspond to the values 0,1,2,3,4.
      p For a program, the declaration
      .Indent
        code enum letter grade;
      p
        | specifies a variable named 
        code grade
        |  of type 
        code enum letter
        | ,
        |  to which can be assigned any of the names F,D,C,B,A (or equivalently the integer values 0,1,2,3,4).
        |  For example,
      .Indent
        code
          | grade = C; // same as using grade = 2;
      p
        | Enumerated sets are particularly useful for 
        code switch
        |  constructions since cases can be referred to by names rather than values; e.g.,
      pre
        | switch(grade) {
        | case A:
        | // case action for an A grade
        | break;
        | case B:
        | // case action for an B grade
        | break;
        | ...
      |  and so forth.
      p
        | While enumeration names must be distinct, the associated values do not need to be. Note that in
        | most instances,
        | #define could be used in the same manner intended for enumerated sets, but enumerated
        | sets have the advantage of the actual values being generated automatically by default. It also
        | needs to be noted that no check is made to see if a value assigned to an enumeration variable
        | is valid, which means the program needs to ensure the validity. An invalid value may produce
        | an unpredictable outcome; for example, assigning a negative value to the 
        code grade
        |  variable
        |  above may produce an invalid outcome if the variable is being used in a comparison.
    // Pointers
    a(name='PointersM')
    h3 Pointers
    p
      | A pointer is the (numeric) address of the location in memory where a data element is stored. Memory
      | addresses begin at 0 and increase by 1 for each byte of memory. Limited arithmetic operations may
      | be performed on pointers, but the value of the resulting pointer depends on the data type pointed
      | to. For example, adding 1 to the pointer for a
      | char data item increases the pointer value by 1 since that advances the pointer to the next
      | character in memory. In contrast, adding 1 to an
      | int pointer increases its value by 4 since that advances the pointer to the next integer in
      | memory. Using a pointer to try to access memory not allocated to a program will probably cause a
      | system error or crash, so it is important to insure that pointers used in a program address valid
      | objects in memory.
    p
      | A pointer data type can be defined for any allowed data type, included user-defined data types. When
      | used as a unary operator (one argument), 
      code *
      |  is the indirection (or 'value at address')
      |  operator, and is used for defining and dereferencing pointer variables. For example,
    .Indent
      code int *p;
    p
      | defines 
      code p
      |  to be a variable whose value is a pointer to a memory location holding an integer.
    p
      | When used as a unary operator, 
      code &
      |  is the memory address operator. The address of a variable
      |  named 
      code x
      |  is given by 
      code &x
      |  and so if 
      code x
      |  is an integer variable,
    .Indent
      code p=&x;
    p
      | assigns the memory address of variable 
      code x
      |  to the (integer) pointer variable 
      code p
      | .
    p
      | Retrieving the value pointed to is known as 
      i dereferencing
      |  the pointer and is given by 
      code *p
      |  for pointer variable 
      code p
      | . For the example above, both variable 
      code x
      |  and 
      code *p
      |  represent the same value in memory. 
      code *(p+1)
      |  retrieves the (integer) value of the next
      |  integer in memory (which is 4 bytes further along than 
      code x
      | ). Furthermore, the contents
      |  of the address can be changed by assigning a value to the dereferenced address; e.g.,
    .Indent
      code
        | *(p+1) = *p + 1;
    p
      | It is often useful to deal with pointers to objects, but great care must be taken to insure that the
      | pointers used at any point in your code really do point to valid objects in memory. It is easy to
      | get confused by what a pointer is addressing when it is taken from a complex structure with pointers
      | to pointers or something similar.
    p
      | Pointers are often used instead of global variables to provide a function with access to data external
      | to the function. If a pointer is passed to a function as an argument, the function then has access
      | to the memory location for the pointer, which could also represent a local variable external to the
      | function. If the function uses the pointer to change the value in the memory location, it will also
      | have changed the value of the external local variable.
    p
      | For C, the scope of function parameters is local to the function, with values assigned to them only
      | when the function is called. Programming languages typically employ one or more evaluation strategies
      | for function parameters. The ones usually cited are 
      i call by value
      | , 
      i call by reference
      | ,
      |  and
      i call by name
      | .
    ul
      li
        | For 
        i call by value
        | , the parameter is treated as a local variable initialized using the value
        |  supplied for the parameter when the function is called. This is the approach used for C.
      li
        | For 
        i call by reference
        | , no local version of the parameter is created, which means it represents
        |  storage for the calling agent, even if the supplied parameter is a constant (i.e., a poorly written
        |  function could change the value of a constant passed to it by reference, which was a real problem
        |  for the early programming language FORTRAN). Although C does not use
        c
          | call by reference in the strict sense, it accomplishes the same objective by use of pointer
          | variables as parameters. When a pointer variable is used as a parameter for a function in C,
          | by dereferencing the parameter (whose scope is local) the function can access and possibly
          | modify the value of an external variable having the same address.
      li
        | For 
        i call by name
        |  the actual name supplied as the parameter is substituted throughout the
        |  function, much as the C preprocessors does for
        |  #define macros. 
        i Call by name
        |  is not supported by C in any meaningful sense.
    // Arrays
    a(name='Arrays')
    h3 Arrays
    p
      | Arrays can be defined in C for any supported data type, including user defined data types. The name
      | of an array is actually a pointer to its first element, the one whose index is 0, so passing an array
      | to a function is a call by reference. Multi-dimensional arrays are defined as arrays of arrays (or
      | arrays of pointers). Arrays are useful for allocating space for many instances of a given data type,
      | arranged sequentially in memory, which provides means for iterating over the set of values in the
      | array.
    // Declaring_and_Initializing_Arrays
    a(name='Declaring_and_Initializing_Arrays')
    .Indent
      h4 Declaring and Initializing Arrays
      p
        | The definition for an array specifies its data type, name, and index structure, which is given inside
        | square brackets. The following statement declares an array of ten integers:
      .Indent
        code int ex_array[10];
      p
        | The elements of the array are numbered from 0 to 9. Elements are accessed by enclosing the index
        | number within square brackets; e.g., 
        code ex_array[4]
        |  denotes the fifth element of the
        |  array 
        code ex_array
        |  (since counting begins at zero). Note that 
        code ex_array == &ex_array[0]
        | .
      p
        | Arrays not initialized at declaration contain indeterminate values. Arrays may be fully or partially
        | initialized at declaration by specifying the array elements within curly braces, separating the
        | array elements from each other by commas. For example,
      .Indent
        code
          | int ex_array[10]= {3, 4, 5, -8,  17, 301};
      p
        | initializes the first six elements of 
        code ex_array
        | , with 
        code ex_array[4]
        |  equaling 
        code 17
        | , 
        code ex_array[0]
        |  equaling 
        code 3
        | , etc.
      p
        | If no size value is specified within the square brackets when the array is declared, but initialization
        | information is given, then the size of the array is determined by the number of initialization
        | elements given in the declaration. If a size is specified and initialization data is given, but
        | the length of the initialization data exceeds the specified length for the array, the excess data
        | will be ignored (and the compiler will issue a warning).
      // Strings
      a(name='CharacterStrings')
      h4 Character Strings
      p
        | Character strings are implemented as arrays of characters. An array of characters can be initialized
        | character by character, but can also be initialized by using a string constant, for example:
      .Indent
        code
          | char ex_string[]= &quot;Hello there&quot;;
      p
        | This initializes the character array 
        code ex_string
        |  with the ASCII values of the characters
        |  in ' 
        code Hello there
        | ' terminated by the (unprintable) ASCII character
        |  '\0'. The length of the array is 12, which is the number of characters in ' 
        code Hello there
        | '
        |  plus 1 for the
        |  '\0' string termination character. If the array length had been declared, the initialization
        |  would leave the balance of the array indeterminate if more than 12 and truncated (including
        |  '\0') if less than 12. When a character array containing a string constant is used as an
        |  argument for 
        code printf
        | , the format specifier %s marks where to insert the string in the
        |  formatted output; for example,
      .Indent
        code
          | char ans[10]=&quot;no&quot;;
          br
          | int q=3;
          br
          |      printf(&quot;The answer to %d is %s.\n&quot;,q,ans);
      p
        | produces the (formatted) output ' 
        code
          | The answer to 3 is no.
        | '.
      p
        | The standard C library has string functions for assigning strings ( 
        code strcpy
        | ), determining
        |  string length ( 
        code strlen
        | ), combining strings ( 
        code strcat
        | ), and the like (look
        |  for string functions in your C reference). For example,
      .Indent
        code strcpy(s,'Example string');
      p
        | is used to copy the character string in the second argument of 
        code strcpy
        |  to the character
        |  array in the first.
      p
        | To make sure that the C preprocessor includes the prototype declarations for the string functions,
        | programs that use them normally have the C preprocessor directive
      .Indent
        | #include &lt;string.h&gt;
      p
        | at the start of the program code. This directive, like the
        | #include &lt;stdio.h&gt; directive is ignored if it is issued again elsewhere in the program.
      p
        | When a character array is initialized using the curly braces syntax, unless
        | '\0' is included, there is no string delimiter, and printing the array as a character
        | string using 
        code printf
        |  will produce indeterminate results. When declaring a character
        |  array that is intended to hold character strings, the array size needs to be at least 1 larger
        |  than the size of the maximum string it will be used for to allow for the
        |  '\0' string termination character. For example, given
      .Indent
        code char pg_string[81];
      p
        | strings of length up to 80 can be stored in the variable 
        code pg_string
      // Passing_Arrays_as_Arguments
      a(name='Passing_Arrays_as_Arguments')
      h4 Passing Arrays as Arguments
      p
        | When an array is passed to a function as an argument, the address of the array's initial element
        | is actually passed, rather than the elements of the array, a call by reference as discussed
        | earlier. Hence there is not a local copy of the array inside the function, and any modifications
        | the function makes to the array are to its location in memory when declared (what is local
        | to the function is the copy of the address of the array's initial element passed as an argument).
      p
        | For a function to be able to treat an argument as an array, the argument has to specify the array's
        | data type and index structure.
      p
        | As an example, the following function has arguments for an index and an array, printing the array
        | element at the index value.
      pre
        code.language-clike
          | void print_element(int indx, int arr[])
          | {
          |     printf(&quot;Value at index %d is %d\n&quot;, indx, arr[indx]);
          | }
      p
        | The use of the square brackets specifies that the argument is a 1-dimensional array of integers.
      p
        | Alternatively, since the array name represents a pointer to the first element in the array, the
        | function argument could be specified as pointer variable, in which case the square brackets
        | would be omitted. In this case, in the body of the function the pointer variable name would
        | be used instead of the array name. For example,
      pre
        code.language-clike
          | void print_element(int indx, int *p)
          | {
          |     printf(&quot;Value at index %d is %d\n&quot;, indx, p[indx]);
          |     // or you could use printf(&quot;Value at index %d is %d\n&quot;, indx, *(p+indx));
          | }
      p
        | Either of the following two example calls to the function will work, whichever of the two versions is used:
      .Indent
        code
          |     print_element(3, ex_array);
          br
          |     print_element(4, &amp;ex_array[0]);
          |  
      // Multi-dimensional_Arrays
      a(name='Multi-dimensional_Arrays')
      h4 Multi-dimensional Arrays
      p
        | A two-dimensional array is just one-dimensional array whose elements are one-dimensional arrays.
        | For example
      .Indent
        code int k[2][3];
      p
        | specifies an array of length 2 whose objects are length 3 arrays integers. 
        code k
        |  can
        |  be viewed as a two-dimensional array with 2 rows and 3 columns, where the first row has as
        |  elements 
        code k[0][0], k[0][1], k[0][2]
        |  and the second the elements 
        code k[1][0], k[1][1], k[1][2]
        | . 
        code k[0]
        |  and 
        code k[1]
        |  represent rows of 3 elements each. Hence, in addition
        |  to accessing any element of the array using index bracket notation, any row in the array
        |  can be accessed similarly. Arrays with any number of dimensions can be generalized from this
        |  example by adding more brackets in the array declaration.
      p
        | The initialization
      .Indent
        code
          | int k[2][3] = {{0,1},{3,4,5}};
      p
        | illustrates initialization of parts of the array, where only 
        code k[0][2]
        |  has not
        |  been initialized. Conceptually the array is
      .Indent
        code
          | 0  1  ?
          br
          |            3  4  5
    // Structures
    a(name='Structures')
    h3 Structures
    p
      | As noted above, structures are used to store non-homogenous but related sets of data. In order to specify
      | a structure, a
      | struct data type for it must first be defined. Any available data type can be used in the
      | structure definition, including those that are user defined. The elements of a structure are referenced
      | by name to access them.
    p
      | Since a function can return a
      | struct data type, structures also provide a way for a function to return multiple (named)
      | data values. However, the primary purpose of structures is to provide a means for creating complex
      | data structure representations such as directed graphs and linked lists. In the construction of this
      | kind of data structure, structure elements may be dynamically allocated (see 
      code malloc
      | )
      |  or alternatively, be taken from an array having the
      |  struct data type.
    p
      | The following example illustrates structure definition, creation of an array of structures, and access
      | to its elements.
    a(name='DisplayStructure')
    pre
      code.language-clike
        | #include &lt;string.h&gt; // make sure the string function declarations are present
        | struct ex_stype { // structure definition by struct data type specification 
        |     int i;      // component is an integer named i
        |     char s[81]; // component is a string named s
        | };
        | void set_ds(int x, char nm[], int i); // function to assign values for the s and i components in structure ds[x]
        | void show_ds(int x); // function to display the elements of structure ds[x]
        | struct ex_stype ds[2]; // ds is an array each element of which is an ex_stype structure
        | int main()
        | {
        |     set_ds(0,&quot;one&quot;,1); // assign values to the components of structures ds[0] and ds[1]
        |     set_ds(1,&quot;two&quot;,2);
        |     show_ds(0);        // display the components of structures ds[0] and ds[1]
        |     show_ds(1);
        | }
        | void set_ds(int x, char nm[], int i)
        | {
        |     ds[x].i=i;            // copy argument i to the i component of structure ds[x]
        |     strcpy (ds[x].s, nm); // use the string library function strcpy to copy argument nm to the s component of structure ds[x]
        | }
        | void show_ds(int x)
        | {
        |     printf(&quot;name %d is %s\n&quot;,ds[x].i,ds[x].s);
        | }
    p
      | The first part of the example is the specification of the
      | struct data type used to define the data structure 
      code ds
      |  used in the program. The 
      code struct ex_stype
      |  data type specifies a structure with
      |  an integer component 
      code i
      |  and a string component 
      code s
      | .
    p
      | A global variable 
      code ds
      |  is declared as a 2 element array of data type 
      code struct ex_stype
      |  in the same manner that would be used for any other data type.
    p
      | The two functions, 
      code set_ds
      |  and 
      code show_ds
      | , illustrate using the dot operator
      |  ( 
      code .
      | ) to assign values to the components of a structure and to access the components of
      |  a structure, respectively. For the declaration of variable 
      code sx
    .Indent
      code struct ex_stype sx;
    p
      | the components of the structure 
      code sx
      |  are 
      code sx.i
      |  and 
      code sx.s
      | . Similarly,
      |  for the structure in item x of array 
      code ds
      | , the components are 
      code ds[x].i
      |  and 
      code ds[x].s
      | , where the index in square brackets has to be added to identify which of the
      |  structures in the array is being accessed.
    p
      | Pointers to
      | struct data types can also be used, just like pointers to any other type. When a pointer
      | is for a
      | struct data type, an 'arrow' ( 
      code -&gt;
      | ) notation can be used to access elements
      |  of the structure addressed by the pointer; for example,
    pre
      code.language-clike
        |     struct ex_stype *sptr;
        |     sptr = &amp;dx;
        |     sptr-&gt;i = 10;
        |     strcpy(sptr-&gt;s, &quot;example text&quot;);
    p
      | The dot operator can be equivalently used, but has the clumsier notation 
      code (*sptr).i
      |  as
      |  opposed to 
      code
        | sptr 
        code -&gt;
        | i
      | .
    p
      | Just as for arrays, only pointers to structures, not the structures themselves, can be passed to
      | or returned from functions.
    // Complex_Initialization_examples
    a(name='Complex_Initialization_examples')
    h3 Initialization Examples
    p
      | Complex data structures formed as arrays or as structures may be initialized upon declaration with
      | a sequence of constant values contained within curly braces and separated by commas.
    p
      | Character arrays may also be initialized as a string from a string of characters enclosed in (double)
      | quote marks.
    p
      | In initialization of a one dimensional array, the length (inside the square brackets) can be left
      | blank, in which case the allocated length is determined by what is assigned to the array. The declaration
      | for a multi-dimensional array must specify the size of all dimensions after the first dimension.
      | If a length is specified, and initialization data overflows that length, a warning is issued and
      | the excess data is ignored. If the initialization data falls short of the specified size the rest
      | will be indeterminate.
    p The following example illustrates a variety of different initializations:
    pre
      code.language-clike
        | /* declare global variables of various types */
        | int i = 50; // single basic variable 
        | int *ptr = NULL; // single basic pointer variable 
        | int x=1, y, z=3; // multiple basic variables 
        | double farr[3]= {1.2, 3.6, 7.4}; // one dimensional array 
        | int iarr[5]= {1, 3, 7}; // one dimensional array, last 2 indeterminate 
        | int jarr[]= {2, 4, 6, 8}; // one dimensional array, derived length 4 
        | char carr[2][3]={{&apos;a&apos;, &apos;b&apos;, &apos;c&apos;}, {&apos;b&apos;, &apos;d&apos;, &apos;f&apos;}}; // two dimensional array 
        | int xarr[2][5]={{1, 2, 3}, {2, 4, 6}}; // two dimensional array, last 3 rows indeterminate 
        | int yarr[][2]={{1, 2}, {2, 4}, {3,6}}; // two dimensional array, derived size 3x2 
        | char c[]=&quot;A B C&quot;; // string, array size 6=5+1 
        | char sarr[5][10]={&quot;a b c&quot;,&quot;d&quot;,&quot;e f&quot;}; // array of strings, first 6 characters of row 1 initialized, first 2 of row 2, first 4 of row 3, last 2 rows indeterminate 
        | struct employee {
        |     char name[31];
        |     double weight;
        |     struct employee *nextrec;  // pointer (self-referential) to the struct for another employee 
        | }
        | struct employee a_node = {&quot;John Doe&quot;, 165.4, NULL}; // perhaps a linked list node 
        | struct elist[2] =
        |     {{&quot;JFK&quot;, 163.1, NULL }, {&quot;LBJ&quot;}}; // not everything has to be initialized 
        | // example function which declares local variables of various types, initialized from global variables 
        | int f_locals()
        | {
        |     int x = i; // local x, global i (value 50) 
        |     int y = yarr[2][1]; // local y, global yarr (value 6) 
        |     int *iptr=&amp;i; // local iptr, address of global i 
        |     struct employee wx={&quot;Jane Doe&quot;, 115.2, &amp;a_node}; // local struct wx, pointed to global a_node 
        |     char lc[]=sarr[2]; //  local string lc with initial value &quot;e f&quot; copied from length 4 string stored in sarr[2] 
        |     . . .
        | }
    // Statements_and_Expressions
    a(name='Statements_and_Expressions')
    h2 Statements and Expressions
    p
      | C has unary operations (one argument), binary operations (2 arguments), and even a ternary operation
      | (3 arguments) for performing actions upon data used in a program. Expressions are combinations
      | using one or more operations. Statements incorporate expressions, assignments, function calls,
      | and control flow constructions to form blocks of code for a C program and are terminated by a semi-colon
      | ( 
      code ;
      | ).
    // Operators
    a(name='Operators')
    h3 Operators
    p
      | Each of the data types has a set of operators for operations that may be performed on expressions
      | for that data type (e.g., 
      code x + y
      |  is an expression).
    // Integer_Operations
    a(name='Integer_Operations')
    .indent
      h4 Integer Operators
      p The following operators are provided for integer data:
      ul
        li
          h5 Binary
          ul
            li
              b Arithmetic
              | : addition 
              code +
              | , subtraction 
              code -
              | , multiplication 
              code *
              | , division 
              code /
              | .
            li
              b Relational (comparison)
              | : greater-than 
              code &gt;
              | , less-than 
              code &lt;
              | , equality 
              code ==
              | , greater-than-equal 
              code &gt;=
              | , less-than-equal 
              code &lt;=
              | , modulus 
              code %
              | .
            li
              b Logical (Boolean)
              | : logical-OR 
              code ||
              | , logical-AND 
              code &&
              | , logical-NOT 
              code !
              | .
            li
              b Bitwise
              | : bitwise-AND 
              code &
              | , bitwise-OR 
              code |
              | , bitwise-exclusive-OR 
              code ^
              | , bitwise-NOT (one's complement) 
              code ~
              | , left shift 
              code &lt;&lt;
              | , right shift 
              code &gt;&gt;
              | .
        li
          h5 Unary
          ul
            li
              | integer promotion 
              code +
              | , additive inverse 
              code -
              | , increment (prefix or postfix) 
              code ++
              | , decrement (prefix or postfix) 
              code --
      |  In C, an integer used in a Boolean expression represents FALSE if it is 0 and TRUE if it is non-zero. In determining the
      |  result of the logical operation 
      code x && y
      | , if x is FALSE, the
      |  value returned by the operation is FALSE without checking y since logically this is enough to determine
      |  the result has to be FALSE. Similarly, for 
      code x || y
      | , if x is TRUE, the value returned
      |  by the operation is TRUE without checking y since logically that is sufficient for determining
      |  the result is TRUE. In all other cases, the value for both operands is checked. This can
      |  be useful if x is being used as a TRUE/FALSE flag where y may initially be invalid when x is FALSE.
      p
        | Integer promotion is the action of 'promoting' an arithmetic operand to a 32 bit integer, similar
        | to type casting or coercion. Unlike its counterpart, unary 
        code -
        | , it is seldom used.
      // Floating_Point_Numbers
      a(name='Floating_Point_Numbers')
      h4 Floating Point Operators
      p The following subset of integer operators are provided for floating point data:
      ul
        li
          b Arithmetic
          | : addition 
          code +
          | , subtraction 
          code -
          | , multiplication 
          code *
          | , division 
          code /
          | .
        li
          b Relational (comparison)
          | : greater-than 
          code &gt;
          | , less-than 
          code &lt;
          | , equality 
          code ==
          | , greater-than-equal 
          code &gt;=
          | , less-than-equal 
          code &lt;=
          | .
      p
        | For the KIPR Robot Controller, floating point operations are implemented in software, which means they are significantly
        | more resource intensive than integer operations. For this reason, floating point values should
        | not be substituted for integers in iterative processes (such as a loop counter).
      p
        | There is a large selection of math functions in the C library for performing calculations that
        | are inherently floating point. For example,
      pre
        code.language-clike
          | double a,x,y;
          | x = sqrt(2); // x is assigned the square of 2
          | x = log(5);  // x is assigned the base e logarithm of 5
          | x = log2(8); // x is assigned the base 2 logarithm of 5
          | x = exp(3);  // x is assigned e cubed
          | x = exp2(3); // x is assigned 2 cubed
          | y = pow(x,0.333333); // y is assigned the (approximate) cube root of x
          | x = sin(3);  // x is assigned the sine of 3 (radians)
          | a = asin(0.123); // a is assigned the primary angle (in radians) having sine 0.123
      p
        | There are many more functions in each of these categories, plus functions for other kinds of manipulation of floating point
        | data. The section below for 
        a(href='KIPRWallabyManualBody.htm#Functions', target='ManualFrame') KIPR Robot Controller Library Functions
        |  includes many of these under
        |  the 'Math' category designation.
      // Characters
      a(name='Characters')
      h4 Characters
      p
        | For C, a character is an 8-bit unsigned integer whose value is one of the 256 ASCII character codes
        | (ASCII is the acronym for 
        i American Standard Code for Information Interchange
        | ). Integer
        |  operations can be performed on character data since if a character variable is used in an integer
        |  operation, it is automatically coerced from an 8-bit unsigned integer into a (positive) 32-bit
        |  integer for the computation. ASCII encodes 0 ... 9 in order, then later A ... Z in order, and
        |  then later a ... z in order, to enable easy alphabetizing using integer comparison. Adding 32
        |  to an upper case character will convert it to lower case.
      p
        | When a value is stored into a character variable, it is coerced into an 8-bit character (by truncating
        | the upper bits). Since character data occurs in 8-bit bytes, character string data is stored
        | in consecutive byte locations in memory; i.e., treating memory as character data provides a means
        | to address and step through memory one byte at a time.
      // Compound Assignment Operators
      a(name='Compound_Assignment_Operators')
      h4 Compound Assignment Operators
      p
        | The basic assignment operator is 
        code =
        | . The following statement adds 2 to the value of
        |  a.
      .Indent
        code
          | a = a + 2;
      p
        | The compound assignment operator 
        code +=
        |  does exactly the same thing; i.e.,
      .Indent
        code a += 2;
      p All of the following binary operators can be used in a compound assignment:
      .Indent
        code
          | +, -, *, /, %, &lt;&lt;, &gt;&gt;, &amp;, ^, |
      // Increment_and_Decrement_Operators
      a(name='Increment_and_Decrement_Operators')
      h4 Unary Increment and Decrement
      p
        | The increment operator 
        code ++
        |  increments its operand by 1. When used prefix ( 
        code ++x
        | )
        |  it has a different semantic interpretation then when used postfix ( 
        code x++
        | ). The simple
        |  cases
      pre
        code.language-clike
          | x++;
          | ++x;
          | x = x + 1;
          | x+=1;
      p are all equivalent.
      |  When used in a more complex expression, the value of 
      code ++x
      |  and 
      code x
      |  change
      i before
      |  the result is used in the expression. For 
      code x++
      | , the value of 
      code x++
      |  and 
      code x
      |  change 
      i after
      |  the result is used in the expression. For example, for
      |  the following constructions using 
      code ++x
      |  and 
      code x++
      p
      pre
        code.language-clike
          | x = 3; printf(&quot;%d  %d\n&quot;, x, ++x);
          | x = 3; printf(&quot;%d  %d\n&quot;, ++x, x);
          | x = 3; printf(&quot;%d  %d\n&quot;, x, x++);
          | x = 3; printf(&quot;%d  %d\n&quot;, x++, x);
          | x = 3; printf(&quot;%d  %d\n&quot;, x, x+1);
      p
        | the displayed text will be
      .Indent
        code
          |  4  4
          br
          |  4  4
          br
          |  4  3
          br
          |  3  3
          br
          |  3  4
      p
        | Confusing? To understand this you also have to know the arguments of
        printf
          | are evaluated from right to left in setting values passed. Here's a (long-winded) explanation
          | for how the outcome above is produced by each program line:
          dl
            dt
              | Line 1: The 
              code ++x
              |  argument is cleared before values are passed to 
              code printf
              |  and by incrementing beforehand both argument values are set to 4.
            dt
              | Line 2: Just as for Line 1, the 
              code ++x
              |  argument is cleared before values
              |  are passed to 
              code printf
              | .
              dt
                | Line 3: The 
                code x++
                |  argument is rightmost and gets the current value 3 of 
                code x
                |  because the increment occurs afterwards. The new value of 
                code x
                |  (4) then becomes the value used for the 
                code x
                |  argument.
              dt
                | Line 4: The 
                code x
                |  argument is rightmost and has value 3. The 
                code x++
                |  argument sets the value 3 before it increments. The value of x subsequent to the 
                code printf
                |  is 4.
              dt
                | Line 5: This is the most intuitive case, because it doesn't use 
                code ++
                | ,
                |  but notice it also doesn't increment x.
          |  The difficulty for explaining what appears at first glance to be straight forward code illustrates why the use of these operators
          |  in normally limited to the simpler cases.
      p
        | The interpretation for a combination such as 
        code x+++y
        |  is dependent on the compiler
        |  being used so such variations are avoided, although not prohibited. [
        i
          | So which is it? 
          code (x++)+y
          |  or 
          code x+(++y)
          | ? The answer could be neither!
        | ]
      p
        | The decrement operator 
        code --
        |  decrements its operation by 1. Its semantics mirror
        |  those of 
        code ++
        | .
      // Data_Access_Operators
      a(name='Data_Access_Operators')
      h4 Data Access Operators
      |  Data access operators are ones used to manipulate components of arrays and data structures, or to directly manipulate data
      |  via memory addresses.
      ul
        li
          | The unary reference operator ( 
          code &
          | ) returns the memory address pointing to
          |  a variable, array component, structure component, or function regardless of its data type.
        li
          | The unary dereferencing (or indirection) operator ( 
          code *
          | ) applied to a pointer accesses
          |  the referenced address as an object for the data type of the pointer, either for assigning
          |  a value to it, or for utilizing its value.
        li
          | The array subscript ( 
          code
            code [ ]
          | ) brackets operator accesses the component
          |  of the array given by the index enclosed within the brackets.
        li
          | The structure component ( 
          code .
          | ) dot operator accesses, by name, the specified component.
        li
          | The structure dereference ( 
          code
            code -&gt;
          | ) arrow operator applied to a pointer
          |  to the structure accesses the referenced component (by name) of a structure (for structure 
          code ds
          |  with component named component 
          code i
          | , 
          code ds.i
          |  and 
          code
            | (&amp;ds) 
            code -&gt;i
          |  are equivalent.
      // Precedence_and_Order_of_Evaluation
      a(name='Precedence_and_Order_of_Evaluation')
      h4 Precedence and Order of Evaluation
      p
        | As per Kernighan and Ritchie's book, the following table summarizes the rules for precedence
        | and associativity for the C operators. Operators listed earlier in the table have higher
        | precedence; operators on the same line of the table have equal precedence and when used without
        | parentheses are cleared left to right.
      .Indent
        table.striped
          thead
            tr
              td(align='center')
                b Operator
              td
                b Associativity
          tbody
            tr
              td
                code
                  |  () [] -&gt; .
              td(align='center') left to right
            tr
              td
                code
                  |  ! ~ ++ -- - * &amp; (&lt;
                i data-type
                code
                  | &gt;)  sizeof 
              td(align='center')
                | right to left
            tr
              td
                code * / %
              td(align='center') left to right
            tr
              td
                code  + -
              td(align='center') left to right
            tr
              td
                code  &lt;&lt; &gt;&gt;
              td(align='center') left to right
            tr
              td
                code
                  |  &lt; &lt;= &gt; &gt;=
              td(align='center') left to right
            tr
              td
                code  == !=
              td(align='center') left to right
            tr
              td
                code  &
              td(align='center') left to right
            tr
              td
                code  ^
              td(align='center') left to right
            tr
              td
                code  |
              td(align='center') left to right
            tr
              td
                code  &&
              td(align='center') left to right
            tr
              td
                code  ||
              td(align='center') left to right
            tr
              td
                code  ?:
              td(align='center') right to left
            tr
              td
                code
                  |  = += -= *= /= %= &amp;= ^= |= &lt;&lt;= &gt;&gt;= 
              td(align='center') right to left
            tr
              td
                code  ,
              td(align='center') left to right
        |  Unary 
        code +, -, 
        | and 
        code *
        |  have higher precedence than their binary forms.
    // Control_Flow
    a(name='Control_Flow')
    h3 Control Flow
    p
      | The order in which a computer executes machine-level operations stored in memory is normally sequential,
      | with the exception of those operations which redirect the flow of executrion to continue elsewhere
      | in computer memory. This capability is reflected in C programs by control flow statements which
      | serve to redirect the sequential step by step flow the program would follow otherwise. There are
      | two classes of control flow commands, 
      i selection
      |  and 
      i iteration
      | . Selection commands
      |  use a condition test to determine what statement or block of statements to execute next ( 
      code if-else
      | ,
      |  switch, and the ternary operator 
      code ?:
      | ). Iteration commands use a condition test
      |  to determine how many times to repeat the execution of a statement or block of statements (
      |  while,
      |  for, 
      code do-while
      | ).
      |  C also provides means for exiting a control flow program structure independent of the condition
      |  test (
      |  break) and to skip the rest of a block, continuing to the next iteration (
      |  continue).
    .Indent
      // Statements_and_Blocks
      a(name='Statements_and_Blocks')
      h4 Statements and Blocks
      p
        | Each C statement is terminated by a semicolon. A program block is a sequence of statements grouped
        | together inside curly braces. Variables may be defined inside a block and are local to the block
        | (their scope does not extend outside of the block). The object for a control flow statement may
        | be a single statement or a block of statements, except for 
        code ?:
        | , which as an operator
        |  applies to expressions rather than statements.
      // If-Else
      a(name='If-Else')
      h4 If-Else
      p
        | The
        | if statement is a selection statement for making yes/no and either/or decisions, For an
        | either/or decision, the
        | if statement is paired with an
        | else statement (which can only be used in a pairing with
        | if).
      p
        | The syntax for
        | if is
      pre
        code.language-clike
          | if (&lt;
          i expression
          | &gt;)
          |     &lt;
          i statement or block
          | &gt;
      p
        | When paired with
        | else the syntax is
      pre
        code.language-clike
          | if (&lt;
          i expression
          | &gt;)
          |     &lt;
          i statement or block
          | &gt;
          | else
          |     &lt;
          i statement or block
          | &gt;
      p
        | When the 
        code &lt;
        i expression
        code &gt;
        |  evaluates as TRUE (i.e., is
        |  not equal to zero), then the 
        code &lt;
        i statement or block
        code &gt;
        |  that follows
        |  if is executed.
      p
        | When the 
        code &lt;
        i expression
        code &gt;
        |  evaluates as FALSE (i.e., is equal
        |  to 0), then the 
        code &lt;
        i statement or block
        code &gt;
        |  that follows
        |  if is not executed and if there is an
        |  else paired with
        |  if, then the 
        code &lt;
        i statement or block
        code &gt;
        | ; that follows
        |  else is executed.
      p
        | In effect, these constructions use syntax that corresponds to how similar logic is expressed
        | in English, such as
      ul
        li
          | 'If the fever is over 100F then schedule a doctor's appointment' (yes/no or do/don't do)
        li
          | 'If the manuscript is acceptable then pay for it, otherwise return it to the author' (either/or)
      a(name='TernaryOperator')
      h4
        | Ternary Operator 
        code ?:
      p
        | The ternary operator 
        code ?:
        |  provides a compact means for expressing if-else logic
        |  where assignment statements are employed as the if-else actions. For example, the following 
        code if-else
        |  construction
        |  assigns the larger of variables 
        code x
        |  and 
        code y
        |  to variable 
        code z
        | :
      pre
        code.language-clike
          | if (x &gt; y)
          |     z = x;
          | else
          |     z = y;
      p
        | This same construction can be implemented by using the ternary operator 
        code ?:
      p
      .Indent
        code
          | z = (x &gt; y) ? x : y;
      p
        | The ternary expression is formed from a condition test ( 
        code x &lt; y
        | ) followed by
        |  a question mark ( 
        code ?
        | ), then the expression ( 
        code x
        | ) to assign to 
        code z
        |  if the condition evaluates as TRUE, separated by a colon ( 
        code :
        | ) and then the
        |  expression ( 
        code y
        | ) to assign to 
        code z
        |  if the condition evaluates as FALSE. Strictly
        |  speaking, given the low precedence level of the operator, the parentheses around the condition
        |  could be omitted, but are advisable to facilitate identifying the operator's three operands.
      p
        | ANSI C requires that only the expression whose value is to be assigned to z be evaluated,
        | just as in the 
        code if-else
        |  equivalent. The ternary operator is frequently used for obtaining absolute value; e.g.,
      p
      .Indent
        code
          | absx = (x &lt; 0) ? -x : x;
      // While
      a(name='While')
      h4 While
      p
        | The
        | while statement in C is the iteration statement most commonly used for managing
        | program loops. A 
        i loop
        |  is a sequence of program logic that is repeated multiple times
        |  (0 or more); for example,, a loop might be used to print out the elapsed time second by
        |  second while waiting for a button to be pressed.
      p
        | The syntax for a
        | while statement loop is
      pre
        code.language-clike
          | while (&lt;
          i expression
          | &gt;)
          |     &lt;
          i statement or block
          | &gt;
      p
        | When the 
        code &lt;
        i expression
        code &gt;
        |  evaluates as TRUE (i.e., is
        |  not equal to zero), then the 
        code &lt;
        i statement or block
        code &gt;
        |  that follows
        |  while is executed, after which the process repeats, starting with evaluation of
        |  the 
        code &lt;
        i expression
        code &gt;
        |  again.
      p
        | When the 
        code &lt;
        i expression
        code &gt;
        |  evaluates as FALSE (i.e., is
        |  equal to 0), then the 
        code &lt;
        i statement or block
        code &gt;
        |  that
        |  follows
        |  while is not executed and the program moves on to the statement following the 
        code &lt;
        i statement or block
        code &gt;
        |  for the
        |  while.
      p
        | Note that the loop continues until something happens that causes the 
        code &lt;
        i expression
        code &gt;
        |  to evaluate as FALSE (e.g., a button is pressed or a counting variable has exceeded its
        |  limit). It is up to the programmer to ensure that within the body of the loop (or otherwise)
        |  the condition will eventually be FALSE (otherwise the loop will continue until the program
        |  is halted by external intervention).
      p
        | A loop that doesn't terminate is termed an 
        i infinite loop
        | . An infinite loop is one
        |  that will continue its iteration until the program is halted. An 
        i indefinite loop
        |  is one whose iteration will continue until some external action occurs (such as a button
        |  press). It is easy to create an infinite loop using
        |  while. For example,
      .Indent
        code while(1);
      p
        | forms an infinite loop because the 
        code &lt;
        i expression
        code &gt;
        |  for the
        |  while is 1 which is always TRUE, and the 
        code &lt;
        i statement or block
        code &gt;
        |  is empty ( 
        code ;
        | ), providing no means other than a forced program halt to end
        |  the ongoing loop iteration (which is repeatedly doing nothing).
      p
        | A common error to avoid when programming a
        | while statement loop is exemplified by the following:
      pre
        code.language-clike
          | while (i &lt; 10); // misplaced semi-colon
          |     x[i++] = i;
      p
        | In this case, the misplaced semi-colon for the
        | while has made its 
        code &lt;
        i statement or block
        code &gt;
        |  component empty. Assuming 
        code i
        |  is less than 10 when the loop starts, this
        |  semantic error makes the loop infinite and the program will 'hang' at this point, requiring
        |  a forced halt to end it. For ideas on how to locate this kind of semantic error for
        |  a program, see the section below on 
        a(href='KIPRWallabyManualBody.htm#Program_Debugging', target='ManualFrame') program debugging
        | .
      // Break
      a(name='Break')
      h4 Break
      p
        | The
        | break statement in C provides a means for a program to break out of executing
        | statements within a loop structure or a multi-way selection to proceed with execution
        | of the program statements that come next. A condition test for
        | break is sometimes used within what would otherwise be an infinite loop to break
        | out of it. The
        | break statement applies to
        | while,
        | for, 
        code do-while
        | ,
        |  and
        |  switch.
      p For example,
      pre
        | int i; // counter will need some initial value
        | while (i &lt; 100) { // has the counter reached its limit?
        | printf('cnt = %d\n', i++); // show the counter and increment it
        | if (side_button() != 0) break; // exit if the side_button is pressed
        | msleep(1000); // pause for one second
        | }
      p
        | uses a
        | break to exit the
        | while loop.
      // Continue
      a(name='Continue')
      h4 Continue
      p
        | The
        | continue statement in C provides a means for a program in a
        | while,
        | for, or 
        code do-while
        |  loop to skip the balance of the current iteration, continuing to the next iteration
        |  if the loop condition test doesn't end the loop.
      p For example,
      pre
        | int i; // counter will need some initial value
        | while (i &lt; 100) { // has the counter reached its limit?
        | if (i &lt;= 0) { // don't start cnt until i reaches 1
        | i+=1;
        | continue;
        | }
        | printf('cnt = %d\n', i++); // show the counter and increment it
        | if (side_button() != 0) break; // exit if the side_button is pressed
        | msleep(1000); // pause for one second
        | }
      // Return
      a(name='Return')
      h4 Return
      p
      p
        | The
        | return statement in C both ends a function and provides a means for the function
        | to return a value to the calling function. A function also ends once its terminating
        | brace is reached or if a
        | return statement having no return value is executed. The calling function
        | can ignore a returned value in any case.
      // For
      a(name='For')
      h4 For
      p
        | The
        | for statement in C is normally used for managing loops that employ an iteration
        | counter. A
        | while statement loop could also be used for this purpose, but in many cases
        | the program logic is clearer if a
        | for statement is employed to control the loop.
      p
        | The syntax for a
        | for statement loop is
      pre
        code.language-clike
          | for (&lt;
          i expr-1
          | &gt;;&lt;
          i expr-2
          | &gt;;&lt;
          fi
            | expr-3&gt;)
            |     &lt;
            i statement or block
            | &gt;
      p
        | The behavior of the
        | for statement loop is equivalent to that of the following
        | while statement loop:
      pre
        code.language-clike
          | &lt;
          i expr-1
          | &gt;; // initialize the counter (prime the pump)
          | while (&lt;
          i expr-2
          | &gt;) { // has the counter reached its limit? (have we pumped enough in?)
          |     &lt;
          i statement or block
          | &gt;
          |     &lt;
          i expr-3
          | &gt;; // increment the counter (pump some more in)
          | }
      p
        | For example, the following code counts assigns values from 0 to 99 to an integer
        | array
      pre
        code.language-clike
          | int i, arr[100];
          | for (i = 0; i &lt; 100; i++)
          |     arr[i] = i;
      // Switch
      a(name='Switch')
      h4 Switch-Case
      p
        | The
        | switch selection statement for C is used to select one of a series of
        | case targets. The
        | case targets for a
        | switch statement are grouped together inside curly braces as a program block.
        | Each
        | case target is followed by a series of C statements which represent that
        | case. The
        | switch selection in effect skips past cases until it reaches the one selected,
        | and program execution continues from there. If a
        | break statement is in the statements following a
        | case target, then the program exits the
        | switch statement's block at that point, in effect skipping any remaining
        | cases.
      p
        | if else selection is used to select one of two cases.
        | switch selection is used to select 0 or more cases.
      p
        | The syntax for a
        | switch statement is as follows:
      pre
        code.language-clike
          | switch (&lt;
          i expression
          | &gt;) { // switch to the case target whose &lt;
          i constant
          | &gt; matches the value of the &lt;
          i expression
          | &gt; 
          | case &lt;
          i constant
          | &gt;:
          |     &lt;
          i
            | 0 or more C statements
          | &gt;
          |     break; // optional - otherwise, program execution continues with the next case 
          | &lt;
          i additional case targets
          | &gt;
          | default: // optional target used when selection didn&apos;t match any case target 
          |     &lt;
          i
            | 0 or more C statements
          | &gt;
          |     break; // optional - otherwise, program execution continues with the next case 
          | }
      p
        | The first
        | case target whose 
        code &lt;
        i constant
        code &gt;
        |  matches
        |  the value of the
        |  expression for the
        |  switch statement is the one selected. Program execution continues from
        |  the selected
        |  case target until either a
        |  break statement is encountered, or the end of the
        |  switch program block is reached. If there is no
        |  case match, then the
        |  default target is selected. Absent a
        |  default target and a
        |  case match, the
        |  switch program block is skipped. Putting in a
        |  default case with a
        |  break statement is considered to be good form, and recognizes the likelihood
        |  of more cases being added under program maintenance.
      p
        | Normally, each
        | case is ended with a
        | break statement since the primary purpose of the
        | switch statement is to make the choice of one of several possible cases
        | to execute; for example,
      pre
        code.language-clike
          | char answer[81];
          | switch(answer[0])
          | {
          |     case &apos;y&apos;:
          |         printf(&quot;answer was yes\n&quot;);
          |         break;
          |     case &apos;n&apos;:
          |         printf(&quot;answer was no\n&quot;);
          |         break;
          |     default:
          |         printf(&quot;answer was not understood\n&quot;);
          | }
      p
        | If user input 'yes sir' is captured in the character string 
        code answer
        | ,
        |  then the text 'answer was yes' will be printed to the screen. If if was 'no sir',
        |  then the 'answer was no' would have been printed, and if it was 'No sir', the
        |  text 'answer was not understood' would have been printed (since C is case sensitive,
        |  'n' ≠ 'N').
        // Do-While
        a(name='Do-While')
      h4 Do-While
      p
        | The
        | do-while statement in C is less commonly used for controlling loop iteration
        | than the
        | while and
        | for statements.
      p
        | The syntax of a
        | do-
        | while statement is as follows:
      pre
        code.language-clike
          | do
          |     &lt;
          i statement or block
          | &gt;
          | while (&lt;
          i expression
          | &gt;);
      p
        | In contrast to the
        | while and
        | for statements, the body of the loop for a
        | do-while statement will be executed at least once since the 
        code &lt;
        i expression
        code &gt;
        |  controlling loop iteration is evaluated at the end of the loop rather than
        |  at its beginning. Sometimes program logic for a loop is best expressed by having
        |  the condition test occur at the bottom of the loop. For example,
      pre
        code.language-clike
          | do
          |     printf(&quot;.&quot;);
          | while (seconds() &lt; 5);
      p
        | The logic insures that '.' will be printed at least once (so something will always
        | be printed), in contrast to
      pre
        code.language-clike
          | while (seconds() &lt; 5)
          |     printf(&quot;.&quot;);
      p
        | for which nothing will be printed if the value returned by the function 
        code seconds
        |  already exceeds 5.
    // Style
    a(name='Programming_Style')
    h2 Programming Style
    p
      | Many authors have expressed opinions on programming style, which for C generally consists of how
      | key elements of a program are exhibited, how comments are handled, and how white space is employed,
      | most notably in how block structures are offset by placement and indentation. The manner in which
      | a program is written affects its readability, ease of understanding, and effort for debugging,
      | enhancement, and maintenance.
    p
      | The most commonly used style, K&R Style, reflects how programs are presented in Kernighan and Ritchie's
      | book on C (
      a(href='http://www.amazon.com/C-Programming-Language-2nd-Edition/dp/0131103628') The C Programming Language (2nd Edition)
      | ).
      |  This style, or a variant, is advocated by most C programming experts and is the style observed
      |  in this manual.
    // White Space
    a(name='White_Space')
    h4 White Space
    p
      | As noted earlier, the term 'white space' references combinations of characters that when printed
      | produce a blank area on the display. For C, white space is formed by using characters such as spaces,
      | new lines, and tabs. The white space characters in C are
    .Indent
      table.striped
        thead
          tr
            td(align='center')
              b Character
            td
              b Print Action
        tbody
          tr
            td
              code
                |  &apos; &apos; 
            td(align='center') space
          tr
            td
              code
                |   &apos;\n&apos; 
            td(align='center') new line
          tr
            td
              code  '\t' 
            td(align='center') horizontal tab
          tr
            td
              code  '\v' 
            td(align='center') vertical tab
          tr
            td
              code  '\r' 
            td(align='center') carriage return
          tr
            td
              code  '\f' 
            td(align='center') formfeed
      br
      | The print result may differ from one display device to another (for example, while 
      code '\n'
      |  has the same outcome for almost every device, 
      code '\r'
      |  may behave the same as 
      code '\n'
      |  for some devices but on others simply reposition printing at the start of the current line).
    p
      | The C compiler either ignores white space that is not imbedded inside double quote marks, or collapses
      | it to a single generic white space character for compilation purposes. This means that other than
      | for character strings, white space can be used for things like indentation that improve program
      | readability. White space is required where it is needed to separate adjacent objects, but if another
      | separator such as a parenthesis, comma, curly brace, square bracket, semi-colon, etc is present,
      | white space is not required.
      // Indentation
      a(name='Indentation')
    h4 Indentation
    p
      | Good use of indentation offsets program blocks, not only making a program more easily understood,
      | but making it easier to determine if the curly braces are matched and block structures will produce
      | the desired semantic results. From the C compiler's point of view,
    pre
      code.language-clike
        | /* Simple example: C Programmer&apos;s Manual */
        | int main()
        | {
        |     printf(&quot;Hello, world!\n&quot;); /* simple example */
        | }
    p and
    pre
      code.language-clike
        | /* Simple example: C Programmer&apos;s Manual */int main(){printf(&quot;Hello, world!\n&quot;);} /* simple example */
    p
      | are equivalent, but it is pretty clear the use of white space to set off the elements of the program
      | in the first version makes it more understandable than for the second. This distinction becomes
      | even more important when nested selection and iteration statements are being employed. For an
      | admittedly extreme example, the following construction as presented will compile, but from a
      | human readability point of view is almost incomprehensible:
    .Indent
      code
        | switch(i){case 0:while(j++&lt;100){k++;if(k&gt;10)break;}break;case 1:if(j&gt;50)k--;else while(j--&gt;=0)k++;break;}
    p
      | In addition to better presenting overall program logic, use of a consistent programming style facilitates
      | debugging programs. Just as writers develop styles intended to make the text they produce more
      | easily read and understood, programmers develop styles for making their programs easier to read
      | and understand, but with the added objective of making them easier to debug. The KISS IDE program
      | editor provides facilities for automatic indentation that reflects common practice for C programmers.
    // Commenting Style
    a(name='Commenting_Style')
    h4 Commenting
    p
      | Comments are the means for programmers to integrate documentation into a program. The lead comment
      | typically specifies the purpose of the program. For large projects, it is a common practice to
      | also include a (bracketed) comment on program history, in particular reflecting the changes that
      | have been made to the program, including by whom, when, and where in the program.
    p
    p
      | Multi-line comments are typically used to offset description and purpose of major program components.
      | Single-line comments are useful for provide an explanation of logic or reasoning that might
      | be subsequently useful if that part of the program needs to be revisited for debugging or
      | other purposes.
    // Program Debugging
    a(name='Program_Debugging')
    h2 Program Debugging
    p
      | Debugging is the process of correcting syntactic and semantic errors found in a program.
    a(name='Syntax_Errors')
    h4 Syntax Errors
    p
      | The C compiler cannot compile a program that has syntax errors such as a missing semi-colon
      | or other program construction error. Syntax errors are the ones most easily corrected since
      | the compiler can identify both where they occur and what the problem is. The KISS IDE lists
      | any syntax errors found during program compilation in an error panel below the program code.
      | The interface provides the line number and position within the line identifying the location
      | of the error, with a description of the cause of the error. Since the mistake causing the
      | first error listed will typically cause additional syntax errors within the program, it is
      | often the case that correcting the syntax causing the first error will fix the rest.
    a(name='Semantic_Errors')
    h4 Semantic Errors
    p
      | Just because a program compiles does not mean it will do what is intended, which is termed
      | program semantics. A semantic error manifests itself during program execution, either because
      | the program crashes or it produces erroneous results. Semantic errors are caused by errors
      | in program logic or programmer oversights (such as failure to initialize a variable). They
      | can be difficult to track down because it usually is not clear where in program execution
      | the error occurred.
    p
      | For a program which relies on data inputs, determining the presence of semantic errors requires
      | testing the program for a representative set of possible data inputs, including so-called
      i boundary conditions
      | . For example, if a data input has a range from 0 to 1000, then
      |  0 and 1000 are the boundaries for the data, and one of these, 0, will cause the program to
      |  crash if used in the denominator of a division operation. That means that once the part of
      |  the program where the error occurs has been located, program logic has to be adjusted to
      |  check the data input to see if it is 0 before using it in the division. For complex systems,
      |  program testing is an ongoing part of the software development cycle.
    p
      | Semantic errors that are rare events are difficult to correct, since being able to repeat what
      | causes the error is key to being able to resolve it. Once a semantic error can be reliably
      | repeated, various techniques are employed to determine the cause and to locate where in the
      | program it occurred. Only the basic techniques will be covered here, but operating systems
      | provide debugging tools designed to determine the cause of an error and to facilitate locating
      | where in the program code it occurred.
    a(name='printf_debugging')
    h4 Using printf and Commenting for Diagnostic Purposes
    p
      | For the smaller C programs constructed for environments like the KIPR Robot Controller, most
      | semantic errors that occur can be corrected quickly using one or both of the following two
      | approaches.
    ul
      li
        | For a C program that runs, but produces erroneous output, it is often useful to insert 
        code printf
        |  statements at various points in the program code to display the value of selected variables
        |  to see if their intermediate values are as expected. For example, in an expression containing
        |  the sub-expression 
        code (x * y-z)
        | , displaying the values of 
        code x, y
        |  and 
        code z
        |  might help discover the sub-expression should have been 
        code (x * (y-z))
        | .
      li
        | For a C program that crashes, 'commenting out' sections of code can be used to locate the
        | part of the program triggering the crash. Commenting out is relatively straight forward
        | process to implement, because inserting
        | // in front of a line of code turns it into a comment (so it will no longer be executed)
        | and whole blocks of code can be commented out by surrounding them using
        | /* */ comment bracketing.
        br
        br
        |  What is commented out has to be selected so that
        |  the program will still compile. After commenting out sections of the program, if it still
        |  crashes when executed, then what was commented out is probably not where the culprit is
        |  located. Including/excluding parts of the code in this manner will usually identify where
        |  the problem is occurring so it can be diagnosed and corrected. Sometimes the best tactic
        |  is to comment out a large enough section to eliminate the crash, then reduce the scope
        |  of commenting out in small steps until the program crash recurs.
    p
      | For larger programs, a system debugging tool may be called for. Unix systems include the debugging
      | tool 
      code sdb
      | , which has its own command structure that has to be learned to be used
      |  effectively.
    // Display_Screen_Printing
    a(name='Display_Screen_Printing')
    h2 Display Screen Printing
    p
      | The C function 
      code printf
      |  is used for printing to the KIPR Robot Controller display
      |  screen, where print output is wrapped to subsequent lines if too long for the display, and
      |  is scrolled upward as the capacity of the screen is exceeded. For controlled printing to
      |  the display, the KIPR Robot Controller Library additionally includes the 
      code display_printf
      |  version of 
      code printf
      | , which prints starting at a specified ( 
      code column, row
      | ) position
      |  on the KIPR Robot Controller display and which doesn't wrap text which exceeds screen width.
      |  The number of rows available for controlled printing is different for the 3 button (A,B,C)
      |  version of the KIPR Robot Controller program console screen than for the 6 button (X,Y,Z,A,B,C)
      |  version.
    p
      | The syntax of 
      code printf
      |  is the following:
    .Indent
      code printf(&lt;
      i format-string
      code &gt, ... );
    p
      | The 
      code &lt;
      i format-string
      code &gt;
      |  is a character string which includes
      |  0 or more '%' codes. For each % code, a corresponding argument is supplied to 
      code printf
      |  after the 
      code &lt;
      i format-string
      code &gt;
      |  to provide the value to
      |  be formatted and inserted into the print output in place of its % code.
    p
    p
      | It is important to note that in resolving % codes 
      code printf
      |  ignores the data
      |  type of the corresponding argument. In other words, since 
      code printf
      |  does not
      |  require a data type match between an argument and its corresponding % code, the argument
      |  will not be automatically coerced as it would be for an assignment statement. This is
      |  particularly important to keep in mind when both integer and floating point values are
      |  being used.
    p The use of % code formatting is best illustrated by some examples.
    // Printing_Examples
    a(name='Printing_Examples')
    h3 Printing Examples
    // Printing_a_message
    .indent
      a(name='Printing_a_message')
      h4 Example 1: Printing a message
      p
        | A 
        code printf
        |  statement employing no % codes simply prints out the 
        code &lt;
        i format-string
        code &gt;
        |  as a message; for example,
      .Indent
        code printf('Hello, world!\n');
      p
        | The character 
        code \n
        |  at the end of the string signifies an advance to the next
        |  (or new) line for any further printing by the program. When the bottom of the display
        |  is reached, the display is scrolled (up) for each line subsequently printed.
        // Printing_a_number
        a(name='Printing_a_number')
      h4 Example 2: Printing an integer
      p
        | In most environments, integers in C are stored in memory as 32-bit 2's complement integers.
        | The % code used to format the corresponding argument as a ± decimal integer
        | is '%d' (or %i'). For the following example, the value of the variable 
        code x
        |  is displayed as a decimal integer, with a leading minus sign if the integer is negative:
      .Indent
        code
          | printf(&quot;Value is %d\n&quot;, x);
      p
        | The code '%d' specifies that the first argument after the initial character string
        | in the argument list for 
        code printf
        |  (the variable 
        code x
        | ) is to
        |  be formatted as a ± decimal integer and inserted in place of '%d' in the printed
        |  output. The length of the formatted output will vary depending on the number.
      // Printing_a_number_in_hexadecimal
      a(name='Printing_a_number_in_hexadecimal')
      h4 Example 3: Other integer print formats
      p
        | As already seen, the '%d' code is used to format an argument in ± decimal integer
        | form. The '%x' and '%X' codes are used to format an argument in (32 bit) 2's complement
        | form using hexadecimal (hex) digits 0 ..9,A,B,C,D,E,F (each of which represents 4
        | bits in binary, 0000, 0001, 0010, ..., 1111). Negative 2's complement numbers have
        | a leading 1, so negative 32-bit integers written in hex require 8 hex digits beginning
        | with one of the hex digits 8-F; e.g., -28 when formatted using '%X' is FFFFFFE4.
        | For positive numbers, the space required will vary unless a % code modifier for length
        | is employed; e.g., using the % code '%8X' for the integer 28 will yield ' 
        code
        | 1C'
        |  (8 spaces are consumed).
      p
        | It needs to be emphasized that a length modifier represents the minimum amount of space
        | that will be used when the formatted result is inserted in the print line. If there
        | isn't enough space, 
        code printf
        |  will use more.
      p
        | If the code '%08X' is used instead of '%8X', leading 0's will replace any leading spaces
        | (so using %08X' for the integer 28 will yield '0000001C' as the formatted result).
        | This applies to '%d' as well; e.g., formatting the numbers -28 and 28 using '%04d'
        | yields as formatted results '-028' and '0028', respectively. A length specifier is
        | employed when numbers are being printed to line up uniformly in columns. If you always
        | want the sign of the number printed, not just when it is negative, the code '%+d'
        | forces the sign to be printed as 
        code +
        |  or 
        code -
        | .
      p
        | For example, the 
        code printf
        |  statement
      .Indent
        code
          | printf(&quot;Values are %d, %X, %04x\n&quot;, -28, -28, 28);
      p displays the text string
      .Indent
        code
          | Values are -28, FFFFFFE4, 001c
      p
        | The third % code in this 
        code printf
        |  ('%04x') has a length specifier (plus
        |  a leading 0's specifier) and lower case is used for the hex digits. If the value
        |  to be formatted requires more space, 
        code printf
        |  will override the length
        |  specifier. It is up to the programmer when using a length specifier to anticipate
        |  number size and make the length specifier sufficiently large.
      p
        | Examples 2 and 3 are representative of output formats for integers using 
        code printf
        | .
        |  There are additional integer output formats (including ones for representing integers
        |  using octal digits and for unsigned integers) described in most C references.
      // Printing_a_floating_point_number
      a(name='Printing_a_floating_point_number')
      h4 Example 4: Printing a floating point number
      p
        | The % code used to format the corresponding argument as a floating point number is
        | '%f'. In formatting for floating point, 
        code printf
        |  rounds the fractional
        |  part of the number up according to the number of decimal places used (its precision).
        |  The default precision is 6 decimal places. A precision specifier is used to limit
        |  this. For example, '%.2f' limits the precision to 2 decimal places. For example,
      .Indent
        code
          | printf(&quot;Values are %f, %.2f\n&quot;, 1.266, -1.266);
      p displays the text string
      .Indent
        code
          | Values are 1.266000, -1.27
      p
        | The code '%f' specifies that the first argument after the initial character string
        | in the argument list for 
        code printf
        |  (1.266) is to be formatted as a floating
        |  point number rounded to 6 decimal places and inserted in place of '%f' in the printed
        |  output (since 6 decimal places is sufficient, no rounding occurs). In contrast,
        |  the code '%.2f' for the second argument rounds its number (-1.266) to 2 decimal
        |  places to yield -1.27.
      p
        | There are additional floating point % codes described in C references that are used
        | for formatting very large (or very small) floating point numbers in scientific
        | (exponential) notation ( 
        code ±&lt;
        i mantissa
        code &gt;
        |  E ± 
        code &lt;
        i exponent
        code &gt;
        | ).
      // Printing_character_strings
      a(name='Printing_character_strings')
      h4 Example 5: Printing character strings
      p
        | The % code '%c' is used to format character data. The % code '%s' is used for character
        | strings, since they are frequently needed for print display.
      .Indent
        code
          | char header[] = &quot;Data: &quot;, cs=&apos;a&apos;;
          br
          | int x=28;
          br
          | printf(&quot;%s%c = %d\n&quot;, header, cs, x);
      p displays the text string
      .Indent
        code
          | Data: a = 28
      p
        | where for the printed output '%s' is replaced by the character string at the memory
        | location corresponding to 
        code header
        | , '%c' is replaced by the character
        |  given by 
        code cs
        | , and '%d' is replaced by the ± decimal representation
        |  of the data given by 
        code x
        | .
      // Printing_using_display_printf
      a(name='Printing_using_display_printf')
      h4 Example 6: Printing using display_printf
      p
        | The function 
        code
          code display_printf
        |  is only valide for the KIPR
        |  Robot Controller and the Simulator. It is like the standard 
        code
          code printf
        |  function except its first two arguments specify the column and row (zero indexed) on the display where printing starts. The
        |  remaining arguments are the same as for 
        code printf
        | .
        |  The following example prints
      .Indent
        code 2. KIPR store
      p
        | starting at column 5 on the 3rd row of the display. Note that the first row/first
        | column of the display has column index 0 and row index 0.
      .Indent
        code
          | int i = 2;
          br
          | char nm[] = &quot;KIPR store&quot;;
          br
          | display_printf(4,2,&quot;%d. %s   &quot;,i,nm);
      p
        | The column range for 
        code display_printf
        |  is 0 - 41. The row range for the
        |  3 button (A,B,C) case is 0 - 9 and for the 6 button (X,Y,Z,A,B,C) case is 0 - 7.
      p
        code display_printf
        |  does not wrap, truncating strings that go beyond the
        |  end of a row on the display.
      p
        | The special character ' 
        code \n
        | ' should be avoided when using 
        code display_printf
        |  since it will have unpredictable effects on what is displayed.
      p
        | When repeatedly printing variable data to the same place on the display, care must
        | be taken to add enough spaces to what is printed to clear artifacts from the previous
        | print; e.g., if one of the following was used,
      .Indent
        code
          | display_printf(4,2,&quot;%d. %s&quot;,i,nm); // NO
          br
          | display_printf(4,2,&quot;%d. %s   &quot;,i,nm); // YES
      p
        | then if we had already printed '2. KIPR store' and changed 
        code nm
        |  to 'Staffing'
        |  then the first of these would print
      .Indent
        code 2. Staffingre
      p
        | whereas the second would add enough spaces on the end to clear the artifacts, printing
      .Indent
        code 2. Staffing
    // Formatting_Command_Summary
    a(name='Formatting_Command_Summary')
    h3 printf % Codes Summary
    .Indent
      table.striped
        thead
          tr
            td(align='center')
              b % Code
            td
              b Associated Data Type
            td(align='center')
              b Format Outcome
        tbody
          tr
            td(align='center')
              code %d
              |  or 
              code %i 
            td(align='center')
              | int
            td(align='center') ± decimal integer
          tr
            td(align='center')
              code %x
              |  or 
              code %X 
            td(align='center')
              | int
            td(align='center')  2's complement hexadecimal representation 
          tr
            td(align='center')
              code %f
            td(align='center')
              | double
            td(align='center')  ± number with decimal point 
          tr
            td(align='center')
              code %c
            td(align='center')
              | char
            td(align='center')
              | ASCII character (low byte for
              | int )
          tr
            td(align='center')
              code %s
            td(align='center')
              | char *
            td(align='center')  ASCII characters until '\0' is reached 
    p
      | There are additional % codes for 
      code printf
      |  and more complex % code modifiers
      |  that can be used in 
      code printf
      |  statements. For information on these, see a standard
      |  C reference.
    // Preprocessor
    a(name='Preprocessor')
    h2 C Preprocessor
    .Indent
      p
        | Before the C compiler receives a file, it is first passed through the C preprocessor
        | to prepare the file for compilation. The preprocessor clears away comments, shrinks
        | white space to single characters, and processes any preprocessor directives present
        | in the program.
      // Preprocessor_Directives
      a(name='Preprocessor_Directives')
      h3 Preprocessor Directives
      p
        | Preprocessor directives are identified by the '#' symbol, which must be the first entry
        | on a line for the directive to be recognized by the C preprocessor.
      p
        | The two primary preprocessor directive are
        | #include for inserting files into the program code and
        | #define for defining macros that are expanded wherever their names appear in
        | program code.
      p
        | For a macro call to be recognized by the preprocessor, it's definition has to occur at
        | some point earlier in the program. Macro definitions begin with the macro directive
        | #define and are usually grouped together at the beginning of the file in which
        | they appear. The preprocessor will flag a macro definition as being a duplicate if
        | its name is reused for another
        | #define in the same file. If more than one file is employed for a program, a
        | preprocessor directive applies only within the file where it is defined.
      p
        | Since the programmer may or may not know what
        | #define commands appear in a
        | #include file, commands are provided to check to see if a macro has already
        | been defined (
        | #ifdef 
        code  .. 
        | #endif and
        |  #ifndef 
        code  .. 
        | #endif). For example,
      .Indent
        code
          | #ifndef PI
          br
          |   #define PI 3.1416159
          br
          | #endif
      p
        | When the preprocessor encounters a valid macro name in the program code, the macro is
        | called and its name 'expanded' to be replaced by whatever text the macro generates;
        | e.g., when the macro name PI is encountered by the preprocessor it replaces it with
        | the text 3.1416159 (for the C compiler to subsequently interpret as a floating point
        | constant).
      p
        | The directive
        | #undef removes a macro name from the list of defined macros (and otherwise does
        | nothing). It is sometimes employed defensively to guard against the possibility of
        | #include inserting a macro name that conflicts with the name of a function the
        | programmer has defined. The convention employed to minimize the likelihood of this
        | occurrence is to use upper case letters for the names of macros and for nothing else.
      p
        | The sequential bypass strategy employed by the C preprocessor precludes iterative loop
        | directives, but a limited if-else selection is provided. The directive for this purpose,
        | #if, employs a condition test with computation limited to integer constants,
        | character constants, comparisons, arithmetic and logic operators, and macros names
        | (which are expanded before the condition test is calculated). The section of code selected
        | by a
        | #if directive consists of the lines of code that follow it, continuing until
        | one of the directives
        | #else,
        | #endif, or
        | #elif is encountered. The section of code selected by a
        | #if directive is processed if the preprocessor calculates the value of the condition
        | test to be non-zero; otherwise, the preprocessor omits the section from the code sent
        | to the compiler. The term used to describe this procedure is 
        i conditional compilation
        |  since the condition test determines whether or not a section of code is sent on to
        |  the compiler; for example,
      .Indent
        code
          | #define CFLAG 1
          br
          | #if CFLAG==1
          br
          |   display_printf(1,3,&quot;On target  &quot;);
          br
          | #else
          br
          |   printf(&quot;On target\n&quot;);
          br
          | #endif
      p
        | selects which form of 
        code printf
        |  to use according to how CFLAG is #defined.
        |  CFLAG serves as a 'configuration variable' to be set according to the ennvironment
        |  where the program will be run.
      p
        | #elif has the same interpretation as 'else if' and requires a condition test.
        | The section of code selected by
        | #elif is terminated by any one of
        | #else,
        | #endif, or
        | #elif also.
      p
        | #else has the same interpretation as 'else', with its section of code terminated
        | only by
        | #endif.
      p
        | The sections of code selected by the two directives
        | #ifdef and
        | #ifndef discussed earlier can be terminated by
        | #else or
        | #elif as well as
        | #endif.
      p
        | Preprocessor macros can be used to associate a name with a constant that appears in multiple
        | places in code (e.g., PI or LMOTOR), to simplify a C function call, or to provide a
        | debugging capability that can be turned on or off by use of conditional compilation,
        | among many other possibilities.
      // Preprocessor_Include
      a(name='Preprocessor_Include')
      h3 Preprocessor Include
      p
        | The preprocessor
        | #include directive is used to insert either a system header file or a user defined
        | header file into program code. System header files typically provide the prototypes
        | for the pre-compiled functions in standard C library. They also provide configuration
        | variables in the form of macros (e.g., NULL). Some programming environments may include
        | the more common system header files automatically, depending on how much control the
        | programmer is expected to exert over the programming environment. System header files
        | incorporate
        | #ifndef statements to avoid introducing duplicated definitions, since a system
        | header file may appear in more than one user header file included by a function.
      p
        | If the file name for a
        | #include directive is enclosed in 'pointy brackets' ( 
        code &lt; &gt;
        | )
        |  then the preprocessor searches for the file in the system's directory of header files.
      p
        | If the file name for
        | #include directive is enclosed in (double) quote marks, then the preprocessor
        | searches for the file in the user's file space. Unless the file is located along the
        | user's file path, the path information for locating the file must also be included
        | (e.g., for a USB stick). The contents of the file can be anything, and will be passed
        | through the C preprocessor while being inserted, which will process any preprocessor
        | directives in the file. For user header files, care needs to be taken with any variable
        | declarations incorporated into the file (to avoid duplicates caused by #includes across
        | multiple program files) and in general function definitions should not be imbedded
        | in header files rather than pre-compiled for a user library. To sum up, when
        | #include is used with a carelessly prepared user header file, a compiler error
        | such as a duplicated global variable name may occur, or a preprocessor error such as
        | a duplicated macro name may occur.
      p
        | The following provides an example of each kind of
        | #include directive:
      .Indent
        code
          | #include &lt;stdio.h&gt; // insert function prototypes for system I/O functions 
          br
          | #include &quot;mylib.c&quot; // insert my function library 
      p
        | A few of the more commonly used system header files providing definitions for pre-compiled
        | functions in the standard C library follow:
      .Indent
        code &lt;stdlib.h&gt;
        |  [numeric conversion, memory allocation, functions such
        |  as 
        code rand
        | ]
        br
        code &lt;stdio.h&gt;
        |  [I/O functions such as 
        code printf
        | ]
        br
        code &lt;math.h&gt;
        |  [math functions such as 
        code sqrt
        | ]
        br
        code &lt;string.h&gt;
        |  [string functions such as 
        code strcpy
        | ]
        br
        code &lt;time.h&gt;
        |  [date and time functions such as 
        code time
        | ]
        br
        code &lt;stdarg.h&gt;
        |  [functions with varying number of arguments (i.e., ones
        |  using the 
        code ...
        |  argument)]
      // Preprocessor_Macros
      a(name='Preprocessor_Macros')
      h3 Preprocessor Macros
      p
        | The
        | #define preprocessor directive specifies a macro definition. The macro definition
        | is limited to one line of code (of indefinite length). Once defined the macro will
        | be expanded wherever it occurs in subsequent program code.
      p
        | Macros are often used to provide replacement text, where the macro provides a more meaningful
        | name; e.g.,
      .Indent
        code
          | #define RIGHT_MOTOR 0 // equate RIGHT_MOTOR with 0
          br
          | #define POWER  90 // equate POWER with 90
      p If the motor command
      .Indent
        code motor(RIGHT_MOTOR, POWER);
      p
        | is used in subsequent code, the preprocessor will expand the 
        code RIGHT_MOTOR
        |  and 
        code POWER
        |  macros, replace them with 0 and 90, respectively, so the code as
        |  prepared for compilation becomes
      .Indent
        code motor(0, 90);
      p
        | Global variables could also be used to provide meaningful names for quantities, but preprocessor
        | macros produce slightly more efficient code. The primary advantage in either case is
        | that if testing shows that the motor port or power needs to be changed, it only needs
        | to be changed at one place in the program.
      p
        | The definition of a preprocessor macro can also specify one or more arguments to be used
        | in expanding the macro. For example,
      .Indent
        code
          | #define GO_RIGHT(power) motor(RIGHT_MOTOR,power)
      p
        | defines a macro 
        code GO_RIGHT
        |  that takes an argument ( 
        code power
        | ) and
        |  uses the macro 
        code RIGHT_MOTOR
        |  in its definition.
      p
        | If 
        code GO_RIGHT(85)
        |  appears in program code, it will expand to 
        code motor(RIGHT_MOTOR(85)
        |  which will then expand to 
        code motor(0,85)
        |  as the code prepared for compilation.
      p
        | Superficially, the use of a macro that doesn't have arguments looks like a global variable
        | reference. Likewise, the use of a macro with arguments looks like a call to a function.
        | However, macro expansion is simply one-time text replacement which occurs during preprocessing
        | Compilation resolves global references as memory locations subject to dynamic change
        | during program execution. When called, a function evaluates and interprets its arguments
        | dynamically.
      p
        | Appropriate use of macros can make it easier to follow the C program logic and can be
        | used to facilitate program testing and modification.
      // Conditional_compilation
      a(name='Conditional_compilation')
      h3 Conditional Compilation
      p
        | The C preprocessor can be used to select code to be compiled based on logical conditions
        | in preparing a program for compilation. This is called 
        i conditional compilation
        | .
        |  Conditional compilation is used to select the code that is to be incorporated into
        |  a program based on a condition test. For example, unless a macro named 
        code DEBUG
        |  has been defined (usually empty; i.e., 
        code #define DEBUG
        | ),
        |  the precompiler can omit code whose only purpose is for debugging. In particular,
      .Indent
        code
          | #ifdef DEBUG
          br
          |   printf(&quot;Going Left\n&quot;);
          br
          |   beep();
          br
          | #endif
      p
        | generates the debugging 
        code printf
        |  and 
        code beep
        |  only if 
        code DEBUG
        |  has been defined, in which case the message 'Going Left' will be printed and KIPR
        |  LINK will beep when program execution reaches this part of its code. If 
        code DEBUG
        |  is not defined, the preprocessor will leave the code out and the debugging alert
        |  will not occur as the program executes.
      p
        | Macros can also be conditionally defined; for example, the somewhat more sophisticated
        | debugging macro definition
      .Indent
        code
          | #ifdef DEBUG // if DEBUG is defined, SHOW(printf(&quot;%d&quot;,i) generates DEBUG code 
          br
          |   #define SHOW(x) printf(&quot;DEBUG: &quot;); x // if case: SHOW macro is defined to generate code 
          br
          | #else  // if DEBUG is not defined, SHOW(printf(&quot;%d&quot;,i) generates nothing 
          br
          |   #define SHOW(x) // else case: SHOW macro is defined to generate nothing 
          br
          | #endif
      p
        | defines a 
        code SHOW
        |  macro in one of two ways, either to produce debugging 
        code printf
        |  statements from its argument, or to produce nothing, regardless
        |  of argument.
      p
        | If 
        code DEBUG
        |  has been defined, then a 
        code printf
        |  debugging statement
        |  used as the argument for 
        code SHOW
        |  will be incorporated into the program
        |  code. Debugging is activated by adding the
        |  #define DEBUG directive to the program, and deactivated by commenting it
        |  out. In particular, when 
        code DEBUG
        |  has been defined the code
      .Indent
        code SHOW(printf('%d\n',i);)
      p
        | inserted at an appropriate point in the program will be expanded by the preprocessor
        | to produce the code
      .Indent
        code
          | printf(&quot;DEBUG: &quot;); printf(&quot;i=%d\n&quot;,i);)
      p
        | Absent a definition for 
        code DEBUG
        |  the macro 
        code SHOW
        |  will expand
        |  to produce no code at all.
      p
        | If the value of 
        code i
        |  is 8 and 
        code DEBUG
        |  has been defined, the
        |  expansion of 
        code SHOW
        |  illustrated above will generate code which outputs
        |  the debugging display ' 
        code DEBUG: i=8
        | '.
      // Math_Functions
      a(name='C_Math_Library')
      h2 The C Library Math Functions
      p
        | The standard C library has a large number of precompiled math functions. 
        code #include &lt;math.h&gt;
        |  provides the function prototypes for the math functions that operate on floating
        |  point numbers, which is most of them.
        |  #include &lt;stdlib.h&gt;
        |  provides the function prototypes for those which operate on integers. Arguments
        |  for trigonometric functions use radian measure for angles rather than degrees (1
        |  degree is 2π/360 radians). The following is a representative list for the available
        |  math functions. For more information about what math functions are available, consult
        |  a C reference.
      table
        tbody
          tr
            td
              a(name='acos')
            td
              code acos
              |  [Category: Math]
              dl
                dd
                  | Format: 
                  code
                    | double  
                    code acos
                    | (
                    |                                                     double x);
                  br
                  |  Returns the angle between 0 and π whose
                  |  cosine is x, where -1 ≤ x ≤ 1. result is in radians.
          tr
            td
              a(name='atan')
            td
              code asin
              |  [Category: Math]
              dl
                dd
                  | Format: 
                  code
                    | double  
                    code asin
                    | (
                    |                                                     double x);
                  br
                  |  Returns the angle between -π/2 and π/2
                  |  whose sine is x, where -1 ≤ x ≤ 1. result is in radians.
          tr
            td
              a(name='atan')
            td
              code atan
              |  [Category: Math]
              dl
                dd
                  | Format: 
                  code
                    | double  
                    code atan
                    | (
                    |                                                     double x);
                  br
                  |  Returns the angle between -π/2 and π/2
                  |  whose tangent is x. result is in radians.
          tr
            td
              a(name='cos')
            td
              code cos
              |  [Category: Math]
              dl
                dd
                  | Format: 
                  code
                    | double  
                    code cos
                    | (
                    |                                                     double angle);
                  br
                  |  Returns cosine of angle. Angle is specified
                  |  in radians; result is between -1 and 1.
          tr
            td
              a(name='exp')
            td
              code exp
              |  [Category: Math]
              dl
                dd
                  | Format: 
                  code double exp(double x);
                  br
                  |  Returns e
                  sup x
                  |  (e is the Euler constant, the base for the natural
                  |  logarithm of a number).
          tr
            td
              a(name='exp10')
            td
              code exp10
              |  [Category: Math]
              dl
                dd
                  | Format: 
                  code double exp10(double x);
                  br
                  |  Returns 10
                  sup x
                  | .
          tr
            td
              a(name='log')
            td
              code log
              |  [Category: Math]
              dl
                dd
                  | Format: 
                  code double log(double x);
                  br
                  |  Returns log
                  sub e
                  | (x), the natural logarithm of x.
          tr
            td
              a(name='log10')
            td
              code log10
              |  [Category: Math]
              dl
                dd
                  | Format: 
                  code double log10(double x);
                  br
                  |  Returns log
                  sub 10
                  | (x), the base 10 logarithm of x.
          tr
            td
              a(name='pow')
            td
              code pow
              |  [Category: Math]
              dl
                dd
                  | Format: 
                  code
                    | double pow(double x, double y);
                  br
                  |  Returns x
                  sup y
                  | .
          tr
            td
              a(name='rand')
            td
              code rand
              | [Category: Math]
              dl
                dd
                  | Format: 
                  code int rand();
                  br
                  |  Returns
                  |  a (pseudo) random integer between 0 and a very large integer established
                  |  on system installation, drawn from the (pseudo) random number stream
                  |  initiated at start of program execution according to a 'seed' value. 
                  code rand()%m 
                  |  restricts the range from 0 to m-1. 
                  code srand
                  |  is used to re-seed random number generation to vary the random number
                  |  stream used.
          tr
            td
              a(name='sin')
            td
              code sin
              |  [Category: Math]
              dl
                dd
                  | Format: 
                  code double sin(double angle);
                  br
                  |  Returns the sine of angle. angle is specified in radians; result is between
                  |  -1 and 1.
          tr
            td
              a(name='sqrt')
            td
              code sqrt 
              |  [Category: Math]
              dl
                dd
                  | Format: 
                  code double sqrt(double x);
                  br
                  |  Returns √
                  span(style='border-top: 1px solid #000000; font-size: 15px;') x
                  | ,
                  |  the square root of x.
          td
            a(name='srand')
          td
            code srand
            |  [Category: Math]
            dl
              dd
                | Format: 
                code void srand(int num);
                br
                |  Re-seeds (pseudo) random number generation (the initial seed at start of
                |  program execution is 
                code srand(1)
                | ). Unless it is desirable that
                |  a random number stream be reused, the seed value used should be unpredictable
                |  from one run to the next. The usual way to accomplish this is to draw a
                |  value from the system clock to use as seed; e.g., 
                code
                  | int seednum = time(NULL);
                | .
                |  (the time function is declared in system include file 
                code &lt;time.h&gt;
                |  and if used with a NULL operand returns elapsed time in (whole) seconds
                |  since system start).
          tr
            td
              a(name='tan')
            td
              code tan
              |  [Category: Math]
              dl
                dd
                  | Format: 
                  code double tan(double angle);
                  br
                  |  Returns the tangent of angle. angle is specified in radians; result
                  |  is between -∞ and +∞.
          tr
      // The_Link_Library_File
      a(name='USB_stick')
      h2 File I/O for a USB Flash Drive Plugged into the KIPR Robot Controller
      p
        | Before the Linux operating system can access a file system, it has to 'mount' the
        | file system. When a USB flash drive is plugged into the KIPR Robot Controller,
        | it is automatically mounted. When the USB flash drive is unplugged it is automatically
        | unmounted. The C Library has a number of functions designed to access files located
        | in mounted file systems. The library functions 
        code fprintf
        |  and 
        code fscanf
        |  respectively provide a straight forward means for writing formatted output to a
        |  file on a USB drive plugged into the KIPR Robot Controller, and for reading formatted
        |  data from a file on the USB drive. There are a number of file processing commands,
        |  including ones for accessing files byte by byte. For a full description of the
        |  range of functions available consult a standard C reference book.
      p
        | To access a file, in addition to the file name, the directory 'path' leading to the
        | file has to be known. For the KIPR Robot Controller, the directory path to a mounted
        | Flash drive in a USB port is
      .Indent
        code /kovan/media/sda1/
      p
        | Files are accessed in C via a pointer of type 
        code FILE
        | , which is defined
        |  in the system header file 
        code &lt;stdio.h&gt;
        | . The pointer for a file
        |  is established when the file is 'opened' for access. If the 
        code fopen
        |  function returns a 
        code NULL
        |  pointer, it indicates that either the file doesn't exist for
        |  the specified file path, or its file system hasn't been mounted (e.g., the USB
        |  drive has not been plugged in). Both cases are illustrated in the following program
        |  for a USB drive plugged into a KIPR Robot Controller. The example otherwise is
        |  a program designed to send data to a file, close the file, then reopen the file
        |  and retrieve the data to verify a successful write operation. If the file doesn't
        |  exist it is created. If it does exist, it is appended to. A user defined preprocessor
        |  macro (USB) is constructed to set the file path for the USB drive, illustrating
        |  how the preprocessor can be used to potentially simplify program code.
      a(name='LinkFileExample')
        pre
          code.language-clike
            | #include &lt;stdio.h&gt;  // make sure file I/O is defined
            | // USBFILE is a Macro defined to preface a file name with the directory path for a mounted USB drive
            | #ifndef USBFILE
            |    // _STRINGIFY_ is an auxiliary macro which converts the argument into a string (by surrounding it with double quote marks)
            |    #define _STRINGIFY_(x) #x
            |    // the USBFILE macro appends x to the path for the USB drive, then uses _STRINGIFY_ to make the text a string
            |    #define USBFILE(x) _STRINGIFY_(/kovan/media/sda1/x)
            | #endif
            | int main()
            | {
            |    FILE *f; // file pointer f (the macro defining the FILE data type is in &lt;stdio.h&gt;)
            |    // A file for the USB drive named &quot;myfile&quot; is set up using macro USBFILE
            |    char s[81], chkf[] = USBFILE(myfile); // set up the file path for myfile in string variable chkf
            |    int x, data = 2;
            |    // try opening for read (&quot;r&quot;) to see if the file exists
            |    if ((f = fopen(chkf,&quot;r&quot;)) != NULL) {
            |       fclose(f); // file chkf already exists
            |       printf(&quot;Will be appending to USB %s\n&quot;, chkf);
            |    }
            |    // (chkf is not open at this point)
            |    // open to append (&quot;a&quot;), which also tests if the USB stick is plugged in
            |    if ((f = fopen(chkf,&quot;a&quot;)) == NULL) {
            |       printf(&quot;No USB stick detected\n&quot;);
            |       return -1; // exit the program
            |    }
            |    // file is now open for append; if it didn&apos;t exist it has been created
            |    printf(&quot;Sending %s, %d\n&quot;, &quot;Field &quot;, data);
            |    fprintf(f,&quot;Field &quot;); // use fprintf to send a text string to chkf
            |    fprintf(f,&quot;%d&quot;,data); // now send formatted numeric data using fprintf
            |    fclose(f); // close the file to make sure the output is sent
            |    // now read it back
            |    f = fopen(chkf,&quot;r&quot;); // it exists since we just created it
            |    fscanf(f,&quot;%s %d&quot;,s, &amp;x); // read the two data items from the file
            |    fclose(f); // done with file, so close it
            |    printf(&quot;Data read is %s: %d\n&quot;, s, x);
            | }
        p
          | The USB drive can now be removed from the KIPR Robot Controller. If not already
          | present, there will now be a file named 
          code myfile
          |  on the USB drive,
          |  which can be read using a text processor to confirm the write operation was successful.
          // The_Link_Library_File
          a(name='The_Link_Library_File')
        h2 The KIPR Robot Controller Library File
        p
          | The KIPR Robot Controller Library provides pre-compiled functions for employing
          | the features of the KIPR Robot Controller or the KIPR Robot Controller simulator.
          | The prototype declarations for these functions are automatically included by
          | the C preprocessor if the KISS IDE target selection for a program is the KIPR
          | Robot Controller or the simulator.
        // Commonly_Used_Link_Library_Functions
      a(name='Commonly_Used_Link_Library_Functions')
      h3 Refresher for Commonly Used KIPR Robot Controller Library Functions
      p
        | The most commonly used KIPR Robot Controller Library functions for robot control
        | are ones for accessing sensor ports, operating DC motors, and suspending a
        | program while a motor action is in progress. A quick refresher for the ones
        | typically used follows:
      table(style='background-color: #f0f0f0;')
        tr
          td
            br
            .Indent
              code
                a(name='display_printfx')
                | display_printf(&lt;
              i col
              code &gt;, &lt;
              i row
              code &gt;, &lt;
              i printf-arguments
              code &gt;);
              dl
                dd
                  | The purpose of this function is to display formatted output at a specific
                  | (column, row) location on the KIPR Robot Controller program console
                  | screen using standard 
                  code printf
                  |  formatting. The column
                  |  range for the display is 0 to 41. For the 3 button (A,B,C) console
                  |  display, the row range is 0 to 9, and for the 6 button (X,Y,Z,A,B,C)
                  |  console display, the row range is 0 to 7. Excess data printed to
                  |  a row is truncated (i.e. text does not wrap). Printing ' 
                  code \n
                  | '
                  |  using 
                  code display_printf
                  |  will cause undesired display results.
              code
                a(name='digitalx')
                | digital(&lt;
              i port#
              code &gt;)
              dl
                dd
                  | For a switch plugged into the port, returns 0 if the switch is open
                  | and returns 1 if the switch is closed. Digital ports are numbered
                  | 8-15. Typically used with button (switch) sensors employed in bumpers
                  | or to detect limit of travel. Will also work with sensors having
                  | an analog response by interpreting the voltage reading as 0 or 1.
              code
                a(name='analogx')
                | analog(&lt;
              i port#
              code &gt;);
              dl
                dd
                  | For an analog sensor plugged into the port, returns a value scaled
                  | to the range 0-1023 representing the analog voltage variation produced
                  | by the sensor. Analog ports are numbered 0-7. Light sensors and range
                  | finders are examples of sensors used in analog ports. For some sensors,
                  | in particular, the 'ET' distance sensor used for robotics, the port's
                  | pull up resistor (enabled by default) has to be disabled for the
                  | analog values to be meaningful.
              code
                a(name='analog_etx')
                | analog_et(&lt;
              i port#
              code &gt;);
              dl
                dd
                  | For an analog sensor plugged into the port, disables the port's pullup
                  | resistor and returns a value scaled to the range 0-1023 representing
                  | the analog voltage variation produced by the sensor. Analog ports
                  | are numbered 0-7. This is the function normally used with the 'ET'
                  | distance sensor used for robotics, which has a pullup sensor already
                  | integrated into its circuitry.
              code
                a(name='msleepx')
                | msleep(&lt;
              i int_msecs
              code &gt;);
              dl
                dd
                  | Causes the function to pause for the specified number of milliseconds
                  | (motor action continues).
              code
                a(name='mavx')
                | mav(&lt;
              i motor_#
              code &gt;, &lt;
              i vel
              code &gt;);
              dl
                dd
                  | Turns on the specified motor port, maintaining the specified motor
                  | velocity using PID (proportional, integral, derivative) motor control.
                  | The motor number is an integer in the range 0 to 3. Motor velocity
                  | is an integer between -1000 and 1000 where 0 means the motor is off
                  | and negative numbers direct the motor to run in the reverse direction
                  | for how it is plugged into the motor port.
              code
                a(name='motorx')
                | motor(&lt;
              i motor_#
              code &gt;, &lt;
              i motor_power
              code &gt;);
              dl
                dd
                  | Turns on the specified motor port at the PWM power level specified,
                  | where a positive power value operates the motor in the direction
                  | as 
                  code fd
                  |  and a negative value operates it in the reverse
                  |  direction. The motor number is an integer in the range 0 to 3. The
                  |  power setting is -100 to 100 representing percentage of full power.
                  |  Motor response with respect to power is non-linear (i.e., doubling
                  |  power does not double motor velocity). Moreover, motor velocity for
                  |  a power setting varies according to load. In contrast, PID motor
                  |  control varies the PWM power applied to try to establish and maintain
                  |  a specified motor velocity.
              code
                a(name='fdx')
                | fd(&lt;
              i motor_#
              code &gt;);
              dl
                dd
                  | Turns of the specified motor port at maximum PWM (pulse width modulation)
                  | power for the motor's forward direction for how the motor is plugged
                  | in. The motor number is an integer between 0 and 3
              code
                a(name='bkx')
                | bk(&lt;
              i motor_#
              code &gt;);
              dl
                dd
                  | Turns of the specified motor port at maximum PWM (pulse width modulation)
                  | power for the motor's reverse direction for how the motor is plugged
                  | in. The motor number is an integer between 0 and 3
              code
                a(name='offx')
                | off(&lt;
              i motor_#
              code &gt;);
              dl
                dd
                  | Turns off the specified motor port. Once a motor port is turned on,
                  | a motor plugged into the port will continue operating until the motor
                  | port is turned off or the program terminates (which turns off all
                  | motor ports).
              code
                a(name='aox')
                | ao();
              dl
                dd Turns all motor ports off.
            p
      // Functions
      a(name='Functions')
      h3 KIPR Robot Controller Library Functions
      p
        | The following is a comprehensive list of the pre-compiled functions provided
        | by the KIPR Robot Controller Library. The library functions for using a USB
        | camera, a graphics window, or a USB depth sensor, and those for controlling
        | a Create module, are presented separately.
      table
        tbody
          tr
            td
              a(name='a_button')
            td
              code a_button
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int a_button();
                  br
                  |  Returns the state of the A button on the KIPR Robot Controller program
                  |  console (1 if pressed, 0 otherwise).
          tr
            td
              a(name='a_button_clicked')
            td
              code a_button_clicked
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int a_button_clicked();
                  br
                  |  Returns the state of the A button on the KIPR Robot Controller program
                  |  console (1 of pressed, 0 otherwise). Continued function execution
                  |  is blocked while the button is pressed. The construction
                  dl
                    dd
                      code
                        | while (a_button()==0) {
                        br
                        | while (a_button()==1); ...}
                        |                //debounce A button
                  |  is equivalent to
                  dl
                    dd
                      code
                        | while 
                        code
                          |  (a_button_clicked()==0) {...}
          tr
            td
              a(name='accel_x')
            td
              code accel_x
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int accel_x();
                  br
                  |  Returns the value of the accelerometer in its x direction relative
                  |  to the horizontal plane of the KIPR Robot Controller (left - right).
          tr
            td
              a(name='accel_y')
            td
              code accel_y
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int accel_y();
                  br
                  |  Returns the value of the accelerometer in its y direction relative
                  |  to the horizontal plane of the KIPR Robot Controller (forward - back).
          tr
            td
              a(name='accel_z')
            td
              code accel_z
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int accel_z();
                  br
                  |  Returns the value of the accelerometer for its vertical, or z direction,
                  |  relative to the horizontal plane of the KIPR Robot Controller (up
                  |  - down). When the KIPR Robot Controller is horizontal it is calibrated
                  |  to have a value corresponding to the gravitational constant G (your
                  |  acceleration towards the center of the Earth that keeps you from
                  |  flying off of the planet).
          tr
            td
              a(name='alloff')
            td
              code alloff
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code voidalloff();
                  br
                  |  Turns off all motor ports.
                  |  ao is a short form for
                  |  alloff.
          tr
            td
              a(name='analog')
            td
              code analog
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int analog(int p);
                  br
                  |  Returns the value of the sensor plugged into analog port 
                  code p
                  |  scaled as an integer between 0 and 1023. Analog ports on the KIPR
                  |  Robot Controller are numbered 0 through 7. Each analog port on the
                  |  KIPR Robot Controller has a selectable pullup resistor, enabled by
                  |  default since many analog sensors do not have this component built
                  |  in, although some do (such as the 'ET' range finder). For a sensor
                  |  such as the ET sensor, the values returned by 
                  code analog
                  |  will be unsatisfactory unless the pullup resistor for its port is
                  |  disabled by using 
                  code  analog_et
                  | .
          tr
            td
              a(name='analog_et')
            td
              code analog_et
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int analog_et(int p);
                  br
                  |  For an analog sensor plugged into analog port 
                  code p
                  | , disables
                  |  the port's pullup resistor and returns a value scaled to the range
                  |  0-1023 representing the analog voltage variation produced by the
                  |  sensor. Analog ports are numbered 0-7. This is the function normally
                  |  used with the 'ET' distance sensor used for robotics, which has a
                  |  pullup sensor already integrated into its circuitry.
          tr
            td
              a(name='analog8')
            td
              code analog8
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int analo8(int p);
                  br
                  |  8-bit version of analog. Returns the value of the sensor plugged
                  |  into analog port 
                  code p
                  |  scaled as an integer between 0 and
                  |  255. Analog ports on the KIPR Robot Controller are numbered 0 through
                  |  7.
          tr
            td
              a(name='analog10')
            td
              code analog10
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int analog10(int p);
                  br
                  |  Returns the value of the sensor plugged into analog port 
                  code p
                  |  scaled as an integer between 0 and 1023. Analog ports on the KIPR
                  |  Robot Controller are numbered 0 through 7. Each analog port on the
                  |  KIPR Robot Controller has a selectable pullup resistor, enabled by
                  |  default since many analog sensors do not have this component built
                  |  in, although some do (such as the 'ET' range finder). For a sensor
                  |  such as the ET sensor, the values returned by 
                  code analog10
                  |  will be unsatisfactory unless the pullup resistor for its port is
                  |  disabled. Same as 
                  code analog
          tr
            td
              a(name='any_button')
            td
              code any_button
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code intany_button()();
                  br
                  |  Returns 1 if any button (A,B,C,X,Y,Z,Side) is pressed.
          tr
            td
              a(name='ao')
            td
              code ao
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code void ao();
                  br
                  |  Turns off all motor ports (same as 
                  code alloff
                  | ).
          tr
            td
              a(name='b_button')
            td
              code b_button
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int b_button();
                  br
                  |  Returns the state of the B button on the KIPR Robot Controller program
                  |  console (1 if pressed, 0 otherwise).
          tr
            td
              a(name='b_button_clicked')
            td
              code b_button_clicked
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int b_button_clicked();
                  br
                  |  Returns the state of the B button on the KIPR Robot Controller program
                  |  console (1 of pressed, 0 otherwise). Continued function execution
                  |  is blocked while the button is pressed. The construction
                  dl
                    dd
                      code
                        | while (b_button()==0) {
                        br
                        | while (b_button()==1); ...}
                        |                  //debounce B button
                  |  is equivalent to
                  dl
                    dd
                      code
                        | while 
                        code
                          |  (b_button_clicked()==0) {...}
          tr
            td
              a(name='beep')
            td
              code beep
              |  [Category: Output]
              dl
                dd
                  | Format: 
                  code void beep();
                  br
                  |  Produces a tone from the KIPR Robot Controller loud speaker. Returns
                  |  when the tone is finished.
          tr
            td
              a(name='bk')
            td
              code bk
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code void bk(int m);
                  br
                  |  Turns on the motor plugged into motor port 
                  code m
                  |  at full
                  |  PWM power in the reverse direction (red light comes on for the KIPR
                  |  Robot Controller motor port). Motor ports are numbered from 0 to
                  |  3.
                  br
                  |  Example: 
                  br
                  .Indent
                    code
                      | bk(3); // full power reverse for motor 3
          tr
            td
              a(name='block_motor_done')
            td
              code block_motor_done
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code
                    | void block_motor_done(int m);
                  br
                  |  If a motor positioning function is in progress for the motor plugged
                  |  into motor port 
                  code m
                  | , continued function execution is blocked
                  |  until the motor has reached its goal position. Motor positioning
                  |  functions are 
                  code move_to_position
                  |  (or 
                  code mtp
                  | )
                  |  and 
                  code move_relative_position
                  |  (or 
                  code mrp
                  | ).
                  br
                  |  Example: 
                  br
                  code
                    .Indent
                      code
                        | mtp(0,500,20000); // turn on motor 0 at 500 ticks/sec and stop when position 20000 is reached
                      br
                      | block_motor_done(1);
                      |                                                         // pause until mtp has reached its goal position of 20000 for motor
                      |                                                           1
                      |                                                         
                    |                                   This function must be used with some care, since if something prevents the motor from reaching its goal position, the program
                    |                                   will hang until halted by external means.
          tr
            td
              a(name='bmd')
            td
              code bmd
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code void bmd(int m);
                  br
                  |  This function is the same as 
                  code block_motor_done
                  | , just under a (much)
                  |  shorter name.
          tr
            td
              a(name='c_button')
            td
              code c_button
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int c_button();
                  br
                  |  Returns the state of the C button on the KIPR Robot Controller program console
                  |  (1 if pressed, 0 otherwise).
          tr
            td
              a(name='c_button_clicked')
            td
              code c_button_clicked
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int c_button_clicked();
                  br
                  |  Returns the state of the C button on the KIPR Robot Controller program console
                  |  (1 of pressed, 0 otherwise). Continued function execution is blocked while the
                  |  button is pressed. The construction
                  dl
                    dd
                      code
                        | while (c_button()==0) {
                        br
                        | while (c_button()==1); ...}
                        |              //debounce C button
                  |  is equivalent to
                  dl
                    dd
                      code
                        | while 
                        code
                          |  (c_button_clicked()==0) {...}
          tr
            td
              a(name='clear_motor_position_counter')
            td
              code clear_motor_position_counter
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code
                    | void clear_motor_position_counter(int motor_nbr);
                  br
                  |  Reset the position counter for the motor specified to 0.
          tr
            td
              a(name='console_clear')
            td
              code console_clear
              |  [Category: Output]
              dl
                dd
                  | Format: 
                  code void console_clear();
                  br
                  |  Clear
                  |  the KIPR Robot Controller program console print buffer. See also 
                  code display_clear
                  | .
          tr
            td
              a(name='digital')
            td
              code digital
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int digital(int p);
                  br
                  |  Returns the value of the sensor in digital port 
                  code p
                  | , as a true/false
                  |  value (1 for true and 0 for false). Sensors are expected to be active low, meaning
                  |  that they are valued at zero volts in the active, or true, state. Thus the library
                  |  function returns the inverse of the actual reading from the digital hardware. If
                  |  the reading is zero volts or logic zero, the 
                  code digital
                  |  function will
                  |  return true. Digital ports on the KIPR Robot Controller are numbered 8 through
                  |  15.
          tr
            td
              a(name='disable_servo')
            td
              code disable_servo
              |  [Category: Servos]
              dl
                dd
                  | Format: 
                  code void disable_servo(int p);
                  br
                  |  Disables the specified servo port. Servo ports are disabled by default, and if
                  |  enabled, consume power whenever a motor is plugged into them. Servo ports on the
                  |  KIPR Robot Controller are numbered 0 to 3.
          tr
            td
              a(name='disable_servos')
            td
              code disable_servos
              |  [Category: Servos]
              dl
                dd
                  | Format: 
                  code void disable_servos();
                  br
                  |  Disables all servo motor ports (powers down all servo motors). Servo ports are
                  |  disabled by default, and if enabled, consume power whenever a motor is plugged
                  |  into them.
          tr
            td
              a(name='display_clear')
            td
              code display_clear
              |  [Category: Output]
              dl
                dd
                  | Format: 
                  code void display_clear();
                  br
                  |  Clear
                  |  the KIPR Robot Controller program console screen for using 
                  code display_printf
                  | .
                  |  See also 
                  code console_clear
                  | .
          tr
            td
              a(name='display_printf')
            td
              code display_printf
              |  [Category: Output]
              dl
                dd
                  | Format: 
                  code
                    | void display_printf(int col, int row, char s[], ... );
                  br
                  |  The purpose of this function is to display formatted output at a specific (column,
                  |  row) location on the KIPR Robot Controller program console screen using standard 
                  code printf
                  |  formatting. The column range for the display is 0 to 41. For
                  |  the 3 button (A,B,C) console display, the row range is 0 to 9, and for the 6 button
                  |  (X,Y,Z,A,B,C) console display, the row range is 0 to 7. Excess data printed to
                  |  a row is truncated (i.e. text does not wrap). Printing ' 
                  code \n
                  | ' using 
                  code display_printf
                  |  will cause undesired display results.
          tr
            td
              a(name='enable_servo')
            td
              code enable_servo
              |  [Category: Servos]
              dl
                dd
                  | Format: 
                  code void enable_servo(int p);
                  br
                  |  Enables specified servo port. Servo ports are disabled by default, and if enabled,
                  |  consume power whenever a motor is plugged into them. If a servo position for a
                  |  port hasn't been set when it is enabled, the default position is 1023. Servo ports
                  |  on the KIPR Robot Controller are numbered 0 to 3.
          tr
            td
              a(name='enable_servos')
            td
              code enable_servos
              |  [Category: Servos]
              dl
                dd
                  | Format: 
                  code void enable_servos();
                  br
                  |  Enables
                  |  all servo motor ports. Servo ports are disabled by default, and if enabled, consume
                  |  power whenever a motor is plugged into them.
          tr
            td
              a(name='extra_buttons_show')
            td
              code extra_buttons_show
              |  [Category: Output]
              dl
                dd
                  | Format: 
                  code void extra_buttons_show();
                  br
                  |  Shows the X, Y, and Z buttons on the KIPR Robot Controller program console screen
                  |  above the A, B, and C buttons. Note: this reduces the display area for 
                  code printf
                  |  and 
                  code display_printf
                  | . See also 
                  code extra_buttons_hide, get_extra_buttons_visible
                  | .
          tr
            td
              a(name='extra_buttons_hide')
            td
              code extra_buttons_hide
              |  [Category: Output]
              dl
                dd
                  | Format: 
                  code void extra_buttons_hide();
                  br
                  |  Hides the X, Y, and Z buttons on the KIPR Robot Controller program console screen.
                  |  Note: this is the default display configuration. See also 
                  code extra_buttons_show, get_extra_buttons_visible
                  | .
          tr
            td
              a(name='fd')
            td
              code fd
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code void fd(int m);
                  br
                  |  Turns on the motor plugged into motor 
                  code m
                  |  at full PWM power in the forward
                  |  direction (green light comes on for the KIPR Robot Controller motor port). Motors
                  |  are numbered 0 to 3.
                  br
                  |  Example:
                  br
                  .Indent
                    code
                      | fd(3); // full power forward for motor 3
          tr
            td
              a(name='freeze')
            td
              code freeze
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code void freeze(int m);
                  br
                  |  Freezes motor m (prevents continued motor rotation, in contrast to
                  |  off, which allows the motor to 'coast').
          //
            &lt;tr&gt;
            &lt;td&gt;&lt;a name='get_analog_pullup'&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td&gt; &lt;code&gt;get_analog_pullup&lt;/code&gt; [Category: Sensors]
            &lt;dl&gt;&lt;dd&gt;
            Format: &lt;code&gt;&lt;font class='CVariable'&gt;int&lt;/font&gt; get_analog_pullup(&lt;font class='CVariable'&gt;int&lt;/font&gt; port);&lt;/code&gt;&lt;br&gt;
            Returns 1 if the port's pullup resistor is enabled (the default), and 0 otherwise. See also &lt;code&gt;set_analog_pullup&lt;/code&gt;.&lt;/dd&gt;
            &lt;/dl&gt;
            &lt;/td&gt;
            &lt;/tr&gt;
          //
            &lt;tr&gt;
            &lt;td&gt;&lt;a name='get_digital_pullup'&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td&gt; &lt;code&gt;get_digital_pullup&lt;/code&gt; [Category: Sensors]
            &lt;dl&gt;&lt;dd&gt;
            Format: &lt;code&gt;&lt;font class='CVariable'&gt;int&lt;/font&gt; get_digital_pullup(&lt;font class='CVariable'&gt;int&lt;/font&gt; port);&lt;/code&gt;&lt;br&gt;
            Returns 1 if the port's pullup resistor is enabled (the default), and 0 otherwise. See also &lt;code&gt;set_digital_pullup&lt;/code&gt;.&lt;/dd&gt;
            &lt;/dl&gt;
            &lt;/td&gt;
            &lt;/tr&gt;
          tr
            td
              a(name='get_extra_buttons_visible')
            td
              code get_extra_buttons_visible
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int get_extra_buttons_visible();
                  br
                  |  Returns 1 if the X, Y, and Z buttons are visible, 0 if not. See also 
                  code extra_buttons_show, extra_buttons_hide
          tr
            td
              a(name='get_motor_done')
            td
              code get_motor_done
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code int get_motor_done(int m);
                  br
                  |  For a motor moving to a goal position set by a motor positioning command, returns
                  |  1 if the motor has reached the goal position and 0 otherwise. Motor positioning
                  |  functions are 
                  code move_to_position
                  |  (or 
                  code mtp
                  | ) and 
                  code move_relative_position
                  |  (or 
                  code mrp
                  | ). See also 
                  code block_motor_done
                  | .
          tr
            td
              a(name='get_motor_position_counter')
            td
              code get_motor_position_counter
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code
                    | int get_motor_position_counter(int m);
                  br
                  |  Returns the current motor position for motor 
                  code m
                  |  in 'ticks' (a value
                  |  which is continually being updated for each motor using PID motor control based
                  |  on back EMF; a typical discrimination for a given motor is on the order of 1100
                  |  position 'ticks' per rotation)
          tr
            td
              a(name='get_pid_gains')
            td
              code get_pid_gains
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code
                    | int get_pid_gains(int motor, int *p, int *i, int *d, int *pd, int *id, int *dd);
                  br
                  |  This function is used to obtain the PID control values currently set for the KIPR Robot Controller motor ports. The 
                  code p
                  | , 
                  code i
                  |  and 
                  code d
                  |  arguments are numerators, and the 
                  code pd
                  | , 
                  code id
                  |  and 
                  code dd/
                  |  arguments are their respective denominators
                  |  for coefficients used by the PID control algorithm. While all of the parameters
                  |  are integers, the coefficients used within the PID control algorithm may be integers
                  |  or floating point. PID stands for proportional, integral, derivative and uses BEMF
                  |  (back electromotive force) feedback from a motor to determine how much PWM power
                  |  to apply based on predictors governed by the PID coefficients. If a motor is jerky,
                  |  the p and d terms should be reduced in size. If a motor lags far behind a specified
                  |  velocity, they should be increased. The default values are set at firmware install
                  |  as effective values for motors sold by KIPR. See also 
                  code set_pid_gains
          tr
            td
              a(name='get_servo_enabled')
            td
              code get_servo_enabled
              |  [Category: Servos]
              dl
                dd
                  | Format: 
                  code
                    | int get_servo_enabled(int srv);
                  br
                  |  Returns 1 if the specified servo port is enabled and 0 otherwise. Servo ports on
                  |  the KIPR Robot Controller are numbered 0 to 3.See also 
                  code enable_servo, disable_servo
                  | .
          tr
            td
              a(name='get_servo_position')
            td
              code get_servo_position
              |  [Category: Servos]
              dl
                dd
                  | Format: 
                  code
                    | int get_servo_position(int srv);
                  br
                  |  Returns the last position value set for the servo in port 
                  code srv
                  | . The
                  |  value will be in the range 0 to 2047. Servo ports on the KIPR Robot Controller
                  |  are numbered 0 to 3. See also
                  |  set_servo_position.
          tr
            td
              a(name='mav')
            td
              code mav
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code
                    | void mav(int m, int vel);
                  br
                  |  This function is the same as 
                  code move_at_velocity
          tr
            td
              a(name='motor')
            td
              code motor
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code
                    | void motor(int m, int p);
                  br
                  |  Turns on motor port 
                  code m
                  |  at 
                  code p
                  | % of full PWM motor power.
                  |  The range for 
                  code p
                  |  is -100 to 100, where a negative value runs the motor
                  |  in its reverse direction. On the KIPR Robot Controller, a motor port supplying
                  |  forward power lights green, and for reverse lights red, although actual motor direction
                  |  depends on how it is plugged in.
          tr
            td
              a(name='move_at_velocity')
            td
              code move_at_velocity
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code
                    | void move_at_velocity(int m, int vel);
                  br
                  |  Turns on motor port 
                  code m
                  | , varying applied PWM power using PID motor control
                  |  to maintain motor velocity 
                  code vel
                  |  indefinitely. The velocity range is
                  |  -1000 to 1000 ticks per second. On the KIPR Robot Controller, a motor port supplying
                  |  forward power lights green, and for reverse lights red, although actual motor direction
                  |  depends on how it is plugged in.
          tr
            td
              a(name='move_relative_position')
            td
              code move_relative_position
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code
                    | void move_relative_position(int m, int absvel, int pos);
                  br
                  |  Turns on motor port 
                  code m
                  | , varying applied PWM power using PID motor control
                  |  to maintain motor velocity 
                  code absvel
                  |  (±) until the motor has moved
                  |  from its current position cp to the goal position cp 
                  code  + pos
                  | . The range
                  |  for the 
                  code absvel
                  |  argument is 0 to 1000 ticks per second. On the KIPR
                  |  Robot Controller, a motor port supplying forward power lights green, and for reverse
                  |  lights red, although actual motor direction depends on how it is plugged in.
                dd
                  | Example: 
                  br
                  .Indent
                    code move_relative_position(1,275,-1100);
          tr
            td
              a(name='move_to_position')
            td
              code move_to_position
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code
                    | void move_to_position(int m, int absvel, int pos);
                  br
                  |  Turns on motor port 
                  code m
                  | , varying applied PWM power using PID motor control
                  |  to maintain motor velocity 
                  code absvel
                  |  (±) until the motor has moved
                  |  from its current position to goal position 
                  code pos
                  | . The range for the 
                  code absvel
                  |  argument is 0 to 1000 ticks per second. On the KIPR Robot Controller,
                  |  a motor port supplying forward power lights green, and for reverse lights red,
                  |  although actual motor direction depends on how it is plugged in. If the motor is
                  |  already at the goal position 
                  code pos
                  | , the motor doesn't move.
          tr
            td
              a(name='mrp')
            td
              code mrp
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code
                    | void mrp(int m, int vel, int pos);
                  br
                  |  This function is the same as 
                  code move_relative_position
                  | .
          tr
            td
              a(name='mtp')
            td
              code mtp
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code
                    | void mtp(int m, int vel, int pos);
                  br
                  |  This function is the same as 
                  code move_to_position
                  | .
          tr
            td
              a(name='msleep')
            td
              code msleep
              |  [Category: Time]
              dl
                dd
                  | Format: 
                  code void msleep(int msec);
                  br
                  |  Suspends function execution for the amount of time specified in milliseconds.
                  br
                  |  Example:
                  br
                  .Indent
                    code
                      | msleep(1500); //wait for 1.5 seconds
          tr
            td
              a(name='off')
            td
              code off
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code void off(int m);
                  br
                  |  Turns off motor port 
                  code m
                  | .
                  br
                  |  Example:
                  br
                  .Indent
                    code off(1);
                    | // turn off motor 1
          tr
            td
              a(name='power_level')
            td
              code power_level
              |  [Category: Sensor]
              dl
                dd
                  | Format: 
                  code double power_level();
                  br
                  |  Returns
                  |  the current power level for the KIPR Robot Controller battery.
          tr
            td
              a(name='run_for')
            td
              code run_for
              |  [Category: Threads]
              dl
                dd
                  | Format: 
                  code
                    | void run_for(double sec, &lt;
                  i function_name
                  code &gt;);
                  br
                  |  Runs the specified function and tracks its execution until either the function
                  |  finishes or the specified number of seconds has elapsed. If the specified number
                  |  of seconds has elapsed, 
                  code runfor
                  |  terminates execution for the function.
          tr
            td
              a(name='seconds')
            td
              code seconds
              |  [Category: Time]
              dl
                dd
                  | Format: 
                  code double seconds();
                  br
                  |  Returns the number of seconds that have elapsed since system start up according
                  |  to the system's internal clock. Resolution is 0.001 seconds (one millisecond).
          tr
            td
              a(name='set_a_button_text')
            td
              code set_a_button_text
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code
                    | void set_a_button_text char txt[]);
                  br
                  |  This function resets the text displayed on the A button to be the text string specified
                  |  rather than the default string 'A'.
          //
            &lt;tr&gt;
            &lt;td&gt;&lt;a name='set_analog_pullup'&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td&gt; &lt;code&gt;set_analog_pullup&lt;/code&gt; [Category: Sensors]
            &lt;dl&gt;&lt;dd&gt;
            Format: &lt;code&gt;&lt;font class='CVariable'&gt;void&lt;/font&gt; set_analog_pullup(&lt;font class='CVariable'&gt;int&lt;/font&gt; port, &lt;font class='CVariable'&gt;int&lt;/font&gt; pullupTF);&lt;/code&gt;&lt;br&gt;
            By default, a pullup resistor is enabled for each analog port. This function disables (or re-enables) the pullup resistor for the selected analog port. If an analog sensor doesn't have an integrated pullup resistor (such as an IR light sensor), the pullup resistor for the sensor's analog port needs to be enabled. For an analog sensor that sets its own pullup value (the 'ET' optical range finder is such a sensor), the pullup resistor for its analog port needs to be disabled. For example, &lt;/code&gt;&lt;br&gt;
            &lt;div class='Indent'&gt; &lt;code&gt;set_analog_pullup(3,0); &lt;font class='Comment'&gt;/*disable the port 3 pullup resistor&lt;/code&gt;&lt;br&gt;
            (port is now 'floating' and the ET sensor will work correctly in it)*/&lt;/font&gt;&lt;/code&gt;&lt;br&gt;
            &lt;code&gt;set_analog_pullup(3,1); &lt;font class='Comment'&gt; /*re-enable the port 3 pullup resistor &lt;/code&gt;&lt;br&gt;
            (the ET sensor will no longer work correctly in it)*/&lt;/font&gt;&lt;/div&gt;&lt;/code&gt;
            See also &lt;code&gt;get_analog_pullup&lt;/code&gt; and &lt;code&gt;analog_ET&lt;/code&gt;.&lt;/dd&gt;
            &lt;/dl&gt;
            &lt;/td&gt;
            &lt;/tr&gt;
          tr
            td
              a(name='set_b_button_text')
            td
              code set_b_button_text
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code
                    | void set_b_button_textchar txt[]);
                  br
                  |  This function resets the text displayed on the B button to be the text string specified
                  |  rather than the default string 'B'.
          tr
            td
              a(name='set_c_button_text')
            td
              code set_c_button_text
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code
                    | void set_c_button_textchar txt[]);
                  br
                  |  This function resets the text displayed on the C button to be the text string specified
                  |  rather than the default string 'C'.
          tr
            td
              a(name='set_digital_output')
            td
              code set_digital_output
              |  [Category: Output]
              dl
                dd
                  | Format: 
                  code
                    | void set_digital_output(int port, int inout);
                  br
                  |  Digital ports on the KIPR Robot Controller can be configured for either input or
                  |  output. By default digital ports are set for input. If the value of 
                  code inout
                  |  is 1, the port is configured for output, for example, the statement
                  br
                  .Indent
                    code set_digital_output(9,1);
                  |  when executed configures digital port 9 for output. The port number specified must be in the range from 8 to 15. See also 
                  code set_digital_value
                  | . See below for an 
                  a(href='#digital_out_LED') example program
                  |  using digital output.
          //
            &lt;tr&gt;
            &lt;td&gt;&lt;a name='set_digital_pullup'&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td&gt; &lt;code&gt;set_digital_pullup&lt;/code&gt; [Category: Sensors]
            &lt;dl&gt;&lt;dd&gt;
            Format: &lt;code&gt;&lt;font class='CVariable'&gt;void&lt;/font&gt; &lt;font class='CFunction'&gt;set_digital_pullup&lt;/font&gt;(&lt;font class='CVariable'&gt;int&lt;/font&gt; port,&lt;font class='CVariable'&gt;int&lt;/font&gt; pullupTF);&lt;/code&gt;&lt;br&gt;
            By default, a pullup resistor is enabled for each digital port. This function disables (or re-enables) the pullup resistor for the selected digital port. If a digital sensor doesn't have an integrated pullup resistor (which is the case for simple switches or an LED), the pullup resistor for the sensor's digital port needs to be enabled. For a digital sensor that sets its own pullup value (there are none used for Botball), the pullup resistor for its digital port needs to be disabled. See also &lt;code&gt;get_digital_pullup&lt;/code&gt;.&lt;/dd&gt;
            &lt;/dl&gt;
            &lt;/td&gt;
            &lt;/tr&gt;
          tr
            td
              a(name='set_digital_value')
            td
              code set_digital_value
              |  [Category: Output]
              dl
                dd
                  | Format: 
                  code
                    | void set_digital_value(int port, int value);
                  br
                  |  Sets the (SEN) value for the specified port on the KIPR Robot Controller to either
                  |  0 (low) or 1 (high). For the sensor ports on the KIPR Robot Controller, the SEN
                  |  rail is the inner rail having a single row of sockets. The specified port must
                  |  be in the range 8 to 15. The library function 
                  code set_digital_ouput
                  |  is
                  |  used to configure a digital port on the KIPR Robot Controller for output (or to
                  |  re-configure it for input).
                  br
                  br
                  | As an example, if the anode lead for an LED (the longer of its two leads)
                  |  is plugged into the SEN socket for digital port 9 and its cathode lead into the
                  |  GND rail (the outer rail for the PWR/GND rails), then if digital port 9 has been
                  |  set for output
                  br
                  .Indent
                    code set_digital_value(9,1);
                  |  will turn on the LED when executed and 
                  br
                  .Indent
                    code set_digital_value(9,0);
                  |  will turn it off. See below for an 
                  a(href='#digital_out_LED') example program
                  |  using digital output.
          tr
            td
              a(name='set_pid_gains')
            td
              code set_pid_gains
              |  [Category: Motors]
              dl
                dd
                  | Format: 
                  code
                    | int set_pid_gains(int motor, int p, int i, int d, int pd, int id, int dd);
                  br
                  |  This function is used to change the PID control values currently set for the KIPR
                  |  Robot Controller motor ports. The 
                  code p
                  | , 
                  code i
                  |  and 
                  code d
                  |  arguments are numerators, and the 
                  code pd
                  | , 
                  code id
                  |  and 
                  code dd
                  |  arguments are their respective denominators for coefficients used by the PID control
                  |  algorithm. While all of the parameters are integers, the coefficients used within
                  |  the PID control algorithm may be integers or floating point. PID stands for proportional,
                  |  integral, derivative and uses BEMF (back electromotive force) feedback from a motor
                  |  to determine how much PWM power to apply based on predictors governed by the PID
                  |  coefficients. If a motor is jerky, the p and d terms should be reduced in size.
                  |  If a motor lags far behind a specified velocity, they should be increased. The
                  |  default values are set at firmware install as effective values for motors sold
                  |  by KIPR. See also 
                  code get_pid_gains
          tr
            td
              a(name='set_servo_position')
            td
              code set_servo_position
              |  [Category: Servos]
              dl
                dd
                  | Format: 
                  code
                    | int set_servo_position(int srv, int pos);
                  br
                  |  Sets the position value of the servo in port 
                  code srv
                  | . The value of 
                  code pos
                  |  must be in the range 0 to 2047. The KIPR Robot Controller has 4 servo ports numbered
                  |  0 to 3. A servo motor consumes maximum power when trying to reach a position, so
                  |  if the servo cannot reach the position specified, its power consumption will rapidly
                  |  pull the KIPR Robot Controller battery down. Servo motors tend to reach their limit
                  |  of travel around 200 short of either end of the 0 to 2047 range, so values close
                  |  to the limit of travel should be avoided. Additionally, servo travel is not smooth,
                  |  and positions tend to be about 5 units apart on the 0 to 2047 scale; i.e., position
                  |  increments should be at least 5. see also 
                  code get_servo_position
                  | .
          tr
            td
              a(name='set_x_button_text')
            td
              code set_x_button_text
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code
                    | void set_x_button_text(char txt[]);
                  br
                  |  This function resets the text displayed on the X button to be the text string specified
                  |  rather than the default string 'X'. See also 
                  code
                    | extra_buttons_show, extra_buttons_hide, get_extra_buttons_visible
                  | .
          tr
            td
              a(name='set_y_button_text')
            td
              code set_y_button_text
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code
                    | void set_y_button_text(char txt[]);
                  br
                  |  This function resets the text displayed on the Y button to be the text string specified
                  |  rather than the default string 'Y'. See also 
                  code
                    | extra_buttons_show, extra_buttons_hide, get_extra_buttons_visible
                  | .
          tr
            td
              a(name='set_z_button_text')
            td
              code set_z_button_text
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code
                    | void set_z_button_text(char txt[]);
                  br
                  |  This function resets the text displayed on the Z button to be the text string specified
                  |  rather than the default string 'Z'. See also 
                  code
                    | extra_buttons_show, extra_buttons_hide, get_extra_buttons_visible
                  | .
          //
            the purpose of the following function is unclear since it neither runs a motor nor affects performance of motor functions
            &lt;tr&gt;
            &lt;td&gt;&lt;a name='setpwm'&gt;&lt;/a&gt;&lt;/td&gt;
            &lt;td&gt; &lt;code&gt;setpwm&lt;/font&gt;&lt;/code&gt; [Category: Motors]
            &lt;dl&gt;&lt;dd&gt;
            &lt;font class='CVariable'&gt;int&lt;/font&gt; setpwm(&lt;font class='CVariable'&gt;int &lt;/font&gt;m, &lt;font class='CVariable'&gt;int&lt;/font&gt; dc);&lt;/code&gt;&lt;br&gt;
            Runs motor m at duty cycle &lt;code&gt;dc&lt;/code&gt; (values are from -100 to 100)&lt;/dd&gt;
            &lt;/dl&gt;
            &lt;/td&gt;
            &lt;/tr&gt;
          tr
            td
              a(name='side_button')
            td
              code
                | side_button (or black_button)
              | [Category:
              |  Sensors]
              dl
                dd
                  | Format: 
                  code int side_button();
                  br
                  |  Returns the state of the (physical) side button on the KIPR Robot Controller (1
                  |  if pressed, 0 otherwise).
          tr
            td
              a(name='side_button_clicked')
            td
              code side_button_clicked
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int side_button_clicked();
                  br
                  |  Returns the state of the (physical) side button on the KIPR Robot Controller (1
                  |  if pressed, 0 otherwise). Continued function execution is blocked while the button
                  |  is pressed. The construction returns 1 for pressed, 0 for not pressed. The construction
                  dl
                    dd
                      code
                        | while (side_button()==0) {
                        br
                        | while (side_button()==1); ...}
                        |                  //debounce A button
                  |  is equivalent to
                  dl
                    dd
                      code
                        | while (a_button_clicked()==0) {...}
          tr
            td
              a(name='thread_create')
            td
              code thread_create
              |  [Category: Threads]
              dl
                dd
                  | Format: 
                  code thread thread_create(&lt;
                  i function name
                  code &gt;);
                  br
                  |  The 
                  code thread_create
                  |  function is used to create a thread for running
                  |  a function in parallel to 
                  code main
                  | , returning a thread ID value of type
                  |  thread. The special data type
                  |  thread is for the thread ID's created by the system to keep track of active
                  |  threads. Note that the returned value must be assigned to a variable of type
                  |  thread to remain available to the program. When a function is run in a thread
                  |  (via 
                  code thread_start
                  | ),the thread will remain active until the function
                  |  finishes or the thread is destroyed (via 
                  code thread_destroy
                  | ). If the thread
                  |  hasn't been destroyed, it can be started again; otherwise, a new thread has to
                  |  be created for the function to be run in a thread again. Since the system limits
                  |  how many threads can be created, thread management is important; i.e., threads
                  |  should be destroyed once they have finished (if threads seem to stop working it
                  |  is usually because too many have been created). See the 
                  a(href='#Threads') section on threads
                  |  below for additional information and an example.
          tr
            td
              a(name='thread_destroy')
            td
              code thread_destroy
              |  [Category: Threads]
              dl
                dd
                  | Format: 
                  code
                    | void thread_destroy(thread tid);
                  br
                  |  The 
                  code thread_destroy
                  |  function is used to destroy a thread created for
                  |  running a function in parallel to main. The thread is destroyed by passing its
                  |  thread ID to 
                  code thread_destroy
                  | . If the function for the thread is running in the thread
                  |  when the thread is destroyed, its execution is terminated. See the 
                  a(href='#Threads') section on threads
                  |  below for additional information and an example.
          tr
            td
              a(name='thread_start')
            td
              code thread_start
              |  [Category: Threads]
              dl
                dd
                  | Format: 
                  code
                    | void thread_start(thread tid);
                  br
                  |  The 
                  code thread_start
                  |  function is used to activate the thread given by 
                  code tid
                  | , running its associated function in the thread in parallel with 
                  code main
                  |  and any other active threads. The value of argument 
                  code tid
                  |  must have a thread ID value as returned by 
                  code thread_create
                  | . Keep in
                  |  mind that thread IDs generated by 
                  code thread_create
                  |  must be retained in
                  |  variables of type
                  |  thread to remain available for later use in a program. The thread is active
                  |  until its function finishes or until it is terminated by 
                  code thread_destroy
                  | .
                  |  A global variable can be used as a flag for a function running in a thread to signal
                  |  when it is done.
                  p
                    | The following example shows the 
                    code main
                    |  process creating a thread for
                    |  the function 
                    code check_sensor
                    | , running the function in the thread, and
                    |  then destroying the thread one second later (whether or not the thread is still
                    |  active):
                  a(name='BasicThread')
                  pre
                    code.language-clike
                      | int main()
                      | {
                      |     thread tid;  // variable for holding a thread&apos;s ID
                      |     tid = thread_create(check_sensor);  // capture thread&apos;s ID in tid
                      |     thread_start(tid);  // run check_sensor in the thread
                      |     msleep(1000);  // let it keep running for a second
                      |     thread_destroy(tid);  // stop check_sensor if still running
                      | }
                      br
                  br
                  |  See the 
                  a(href='#Threads') section on threads
                  |  below for a complete example
                  |  using threads.
          tr
            td
              a(name='thread_wait')
            td
              code thread_wait
              |  [Category: Threads]
              dl
                dd
                  | Format: 
                  code
                    | void thread_wait(thread tid);
                  br
                  |  If 
                  code thread_wait
                  |  is executed in a function, it will block continued
                  |  execution of the function until the function running in the thread given by 
                  code tid
                  |  has finished (or until the thread given by 
                  code tid
                  |  is destroyed by some
                  |  other process). If the thread given by 
                  code tid
                  |  is inactive, the function
                  |  does nothing. 
                  code thread_wait
                  |  is used for synchronization of multiple threads (e.g.,
                  |  thread 1 doesn't continue until thread 2 is done). See the 
                  a(href='#Threads') section on threads
                  |  below for additional information and an example.
          tr
            td
              a(name='x_button')
            td
              code x_button 
              | [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int x_button();
                  br
                  |  Returns
                  |  the state of the X button when it is visible on the KIPR Robot Controller program
                  |  console (1 if pressed, 0 otherwise). This button is an extra button. Use 
                  code extra_buttons_show
                  |  to show the X, Y, and Z buttons. See also 
                  code extra_buttons_hide, get_extra_buttons_visible
                  | .
          tr
            td
              a(name='x_button_clicked')
            td
              code x_button_clicked
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int x_button_clicked();
                  br
                  |  Returns the state of the X button when it is visible on the KIPR Robot Controller
                  |  program console (1 if pressed, 0 otherwise). Continued function execution is blocked
                  |  while the button is pressed. The construction
                  dl
                    dd
                      code
                        | while (x_button()==0) {
                        br
                        | while(x_button()==1); ...}  //debounce X button
                  |  is equivalent to
                  dl
                    dd
                      code while(x_button_clicked()==0) {...}
                      br
                  |  This button is an extra button. Use 
                  code extra_buttons_show
                  |  to show the
                  |  X, Y, and Z buttons. See also 
                  code extra_buttons_hide, get_extra_buttons_visible
                  | .
          tr
            td
              a(name='y_button')
            td
              code y_button 
              | [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int y_button();
                  br
                  |  Returns
                  |  the state of the Y button when visible on the KIPR Robot Controller program console
                  |  (1 if pressed, 0 otherwise). This button is an extra button. Use 
                  code extra_buttons_show
                  |  to show the X, Y, and Z buttons. See also 
                  code extra_buttons_hide, get_extra_buttons_visible
                  | .
          tr
            td
              a(name='y_button_clicked')
            td
              code y_button_clicked
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int y_button_clicked();
                  br
                  |  Returns the state of the Y button when it is visible on the KIPR Robot Controller
                  |  program console (1 if pressed, 0 otherwise). Continued function execution is blocked
                  |  while the button is pressed. The construction
                  dl
                    dd
                      code
                        | while (y_button()==0) {
                        br
                        | while(y_button()==1); ...}  //debounce Y button
                  |  is equivalent to
                  br
                  dl
                    dd
                      code while(y_button_clicked()==0) {...}
                      br
                  |  This button is an extra button. Use 
                  code extra_buttons_show
                  |  to show the
                  |  X, Y, and Z buttons. See also 
                  code extra_buttons_hide, get_extra_buttons_visible
                  | .
          tr
            td
              a(name='z_button')
            td
              code z_button 
              | [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int z_button();
                  br
                  |  Returns
                  |  the state of the Z button when visible on the KIPR Robot Controller program console
                  |  (1 if pressed, 0 otherwise). This button is an extra button. Use 
                  code extra_buttons_show
                  |  to show the X, Y, and Z buttons. See also 
                  code extra_buttons_hide, get_extra_buttons_visible
                  | .
          tr
            td
              a(name='z_button_clicked')
            td
              code z_button_clicked
              |  [Category: Sensors]
              dl
                dd
                  | Format: 
                  code int z_button_clicked();
                  br
                  |  Returns the state of the Z button when it is visible on the KIPR Robot Controller
                  |  program console (1 if pressed, 0 otherwise). Continued function execution is blocked
                  |  while the button is pressed. The construction
                  dl
                    dd
                      code
                        | while (z_button()==0) {
                        br
                        | while(z_button()==1); ...}  //debounce Z button
                  |  is equivalent to
                  br
                  dl
                    dd
                      code while(z_button_clicked()==0) {...}
                      br
                  |  This button is an extra button. Use 
                  code extra_buttons_show
                  |  to show the
                  |  X, Y, and Z buttons. See also 
                  code extra_buttons_hide, get_extra_buttons_visible
                  | .
      .Indent
        a(name='digital_out_LED')
        h4 Example program for lighting an LED plugged into a digital port
        p
          | By default the digital ports for the KIPR Robot Controller are configured for input.
          | The KIPR Robot Controller Library function 
          code set_digital_output
          |  is used
          |  to configure digital port direction; for example,
        .Indent
          code set_digital_output(9, 1);
        p configures port 9 for output and
        .Indent
          code set_digital_output(9, 0);
        p configures it for input.
        p
          | For a digital port configured for output, the KIPR Robot Controller Library function 
          code set_digital_value
          |  is used to set the port's output value to either 0 (low)
          |  or 1 (high); for example,
        .Indent
          code set_digital_value(9, 1);
        p sets the output value for port 9 high.
        p
          | If you have a typical 5mm LED on hand, you can use the following program to operate it.
          | An LED will 'turn on' when voltage applied to its anode lead rises above a prescribed
          | level (typically between 1.9 and 3.2V, depending on color). If too much current is
          | passed through the LED, it will burn out (the typical spec is 20-30mA). For the KIPR
          | Robot Controller, digital outputs on the SEN rail are sufficiently current limited
          | to operate an LED without burning it out.
        table(width='80%')
          tbody
            tr
              td
                | The LED's anode is normally identified by having the longer of the two leads. Additionally,
                | the flange at the base of the LED is normally flattened on the cathode side.
              td
                // &lt;img src='/imgs/docs/LEDform.gif' style='float:right;' width='80%'&gt;&lt;/img&gt;
        br
        a(name='BlinkLED')
        pre
          code.language-clike
            | /*  This is a program to blink an LED plugged into digital port 9 */
            | int main()
            | {
            |    printf(&quot;LED in port 9\n&quot;);
            |    printf(&quot;Press side button to quit\n&quot;);
            |    set_digital_output(9, 1); // set digital port direction to digital output
            |    while (side_button() == 0) {
            |       set_digital_value(9, 1); // set digital output to 1 (high)
            |       msleep(500);
            |       set_digital_value(9, 0); // set digital output to 0 (low)
            |       msleep(500);
            |    }
            |    set_digital_output(9, 0); // set digital port direction back to digital input
            |    printf(&quot;\ndone\n&quot;);
            | }
      // Vision API
      a(name='vision')
      h3 KIPR Robot Controller Vision Library Functions
      p
        | The KIPR Robot Controller Vision System incorporates color vision tracking and QR code
        | identification. A USB web camera is used to provide images to the KIPR Robot Controller
        | at a rate dependent on lighting conditions but exceeding 6 frames per second. Using the
        | KIPR Robot Controller interface, an arbitrary number of camera configurations containing
        | channels for color vision tracking and/or QR code identification can be defined.
      p
        | For color vision tracking, images are processed by the KIPR Robot Controller to identify
        | 'blobs' matching the color specification for each color channel in a camera configuration.
        | A blob is a set of contiguous pixels in the image matching the color specification for
        | the channel.
      p
        | For each color channel in a selected configuration, the values to be used to identify which
        | pixels in an image match the desired color for the channel are interactively selected
        | from a color spectrum chart to provide a color specification for the channel. Live feed
        | from the camera simplifies the process of determining how much of the spectrum is needed
        | to produce blobs matching the color (e.g., a particular part of the spectrum might include
        | all pixels that are 'reddish' in color for a channel to be used for identifying red objects).
        | The spectrum values for the channel are retained with the configuration until the configuration
        | is deleted. See the KIPR Robot Controller Manual available from KIPR for information
        | on setting up camera configurations on a KIPR Robot Controller controller.
      p
        | There are three camera image resolutions supported on the KIPR Robot Controller, 160×120
        | ( 
        code LOW-RES
        | ), 320×240 ( 
        code MED-RES
        | ), and 640×480 ( 
        code HIGH-RES
        | ). 
        code LOW-RES
        |  is sufficient for
        |  most purposes and requires far less processing overhead. For 
        code LOW-RES
        |  the
        |  upper left corner for the image has coordinates (0,0) and the lower right has coordinates
        |  (159,119). The camera image displayed on the KIPR Robot Controller is slightly smaller
        |  than the actual image size.
      p
        // &lt;img class='center' src='/imgs/docs/Vision_Coordinates.gif' width='20%'&gt;&lt;/img&gt;
      p
        | KIPR Robot Controller Vision Library functions are used to select a configuration and
        | obtain information about the color blobs being identified by its channels, such as
        | bounding box coordinates and pixel density.
      p
        | In addition to channels for color tracking, a configuration can have channels for identifying
        | QR (Quick Response) codes. A QR code is essentially a 2-dimensional bar code for
        | compactly representing text data. KIPR Robot Controller Vision Library functions
        | are provided for decoding any QR code in the image. See the QR code vision functions 
        code get_object_data, get_object_data_length
        |  below.
      table
        tbody
          tr
            td
              a(name='camera_close')
            td
              code camera_close 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code void camera_close();
                  br
                  |  Cleanup the current camera instance. See also 
                  code
                    | camera_open, camera_open_at_res, camera_open_device
                  | .
          tr
            td
              a(name='camera_load_config')
            td
              code camera_load_config 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | int camera_load_config(char name[]);
                  br
                  |  Loads a config file on the KIPR Robot Controller other than the default
                  |  config file. You 
                  b must
                  |  append 
                  code .config
                  |  to the name for
                  |  this function to locate it. Returns 1 on success, 0 on failure. See also 
                  code
                    | camera_open, camera_open_at_res, camera_open_device
                  | .
          tr
            td
              a(name='camera_open')
            td
              code camera_open 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code int camera_open();
                  br
                  |  Opens the KIPR Robot Controller's default channel configuration. The default
                  |  configuration is selected from among the channel configurations defined
                  |  on the KIPR Robot Controller using its 
                  i settings..channels
                  |  menu.
                  |  A resolution of 
                  code LOW_RES
                  |  is used. Returns 1 on success, 0 on
                  |  failure. See also 
                  code
                    | camera_open_at_res, camera_open_device, camera_close
                  | .
          tr
            td
              a(name='camera_open_at_res')
            td
              code camera_open_at_res 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | int camera_open_at_res(int res_numb);
                  br
                  |  Opens the KIPR Robot Controller's default channel configuration. The default
                  |  configuration is selected from among the channel configurations defined
                  |  on the KIPR Robot Controller using its 
                  i settings..channels
                  |  menu.
                  |  A resolution of one of 
                  code LOW_RES
                  | , 
                  code MED_RES
                  | , 
                  code HIGH_RES
                  |  needs to be specified. Returns 1 on success, 0 on failure. See also 
                  code
                    | camera_open, camera_open_device, camera_close
                  | .
          tr
            td
              a(name='camera_open_device')
            td
              code camera_open_device 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | int camera_open_device(int number, int res_numb);
                  br
                  |  If more than 1 camera is plugged in, 0 is the first camera, 1 is the second
                  |  camera, etc. Only 1 camera at a time can be used, and the default configuration
                  |  is selected. A resolution of one of 
                  code LOW_RES
                  | , 
                  code MED_RES
                  | , 
                  code HIGH_RES
                  |  needs to be specified. Returns 1 on success, 0 on
                  |  failure. See also 
                  code
                    | camera_open, camera_open_at_res, camera_close
                  | .
          tr
            td
              a(name='camera_update')
            td
              code camera_update 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code int camera_update();
                  br
                  |  Retrieves the current image from the camera for processing. Returns 1 on
                  |  success, 0 on failure.
          tr
            td
              a(name='get_channel_count')
            td
              code get_channel_count 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code int get_channel_count();
                  br
                  |  Returns the number of channels in the current configuration. See also 
                  code get_object_count
                  | .
          tr
            td
              a(name='get_camera_frame')
            td
              code get_camera_frame 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | const unsigned char* get_camera_frame();
                  br
                  |  Returns a pointer to the camera frame. The pointer is valid until 
                  code camera_update()
                  |  is called again. Frame data is in BGR 888 pixel format, 3 bytes per pixel.
                  |  It is stored as a 1-dimensional character array where each byte is the
                  |  8-bit (unsigned) integer value for each BGR color (blue-green-red). For
                  |  the camera default resolution 
                  code LOW_RES
                  |  (160×120), the
                  |  camera frame has length 3×160×120 = 57,600 and has to be processed
                  |  byte by byte. The following code illustrates processing the camera frame
                  |  using the graphics function 
                  code graphics_pixel
                  |  to transfer it
                  |  to a graphics window for display (see the 
                  a(href='#Graphics') Graphics Library
                  | ):
                  dl
                    dd
                      code
                        | int r,c,i;
                        br
                        | const unsigned char *img;
                        br
                        |             camera_update();
                        br
                        |             img=get_camera_frame();
                        br
                        | for(r=0;r&lt;120;r++) {
                        br
                        | for(c=0;c&lt;160;c++) {
                        br
                        |                 i=3*(160*r + c); // index of pixel to paint into row r, column c
                        br
                        |                 graphics_pixel(c,r,img[i+2],img[i+1],img[i]); // RGB order by reversing GBR
                        br
                        |             }
                        br
                        |             }
                        br
                        |             graphics_update();
                        b
          tr
            td
              a(name='get_object_area')
            td
              code get_object_area 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | int get_object_area(int channel, int);
                  br
                  |  Returns the object's bounding box area. -1 is returned if the channel or
                  |  object doesn't exist.
          tr
            td
              a(name='get_object_bbox')
            td
              code get_object_bbox 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | rectangle get_object_bbox(int channel, int object);
                  br
                  |  Returns the bounding box of the given object on the given channel as a
                  |  rectangle data type. For example,
                  br
                  dl
                    dd
                      code
                        | rectangle mybox;
                        br
                        |           mybox = get_object_bbox(0,2);
                        br
                        |           printf(&quot;x coord %d  y coord %d\n&quot;, mybox.x, mybox.y);
                  |  displays the x and y coordinates of bounding box 2 for channel 0.
          tr
            td
              a(name='get_object_center')
            td
              code get_object_center 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | point2 get_object_center(int channel, int object);
                  br
                  |  Returns The (x, y) center of the given object on the given channel as a
                  |  point2 data type. For example,
                  dl
                    dd
                      code
                        | point2 mcenter;
                        br
                        |           mcenter = get_object_center(0,2);
                        br
                        |           printf(&quot;x center coord %d  y center coord %d\n&quot;, mcenter.x, mcenter.y);
                      br
                  |  displays the x and y coordinates of center point of box 2 for channel 0.
          tr
            td
              a(name='get_object_centroid')
            td
              code get_object_centroid 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | int get_object_centroid(int channel, int object);
                  br
                  |  Returns The (x, y) coordinates of the 
                  b centroid
                  |  of the given object
                  |  on the given color channel as a point2 data type (the centroid is the center
                  |  of mass for the pixels of the specified color). For example,
                  br
                  dl
                    dd
                      | point2 
                      code
                        | mcenter;
                        br
                        |           mcentroid = get_object_centroid(0,2);
                        br
                        |           printf(&quot;x centroid coord %d  y centroid coord %d\n&quot;, mcentroid.x, mcentroid.y);
                  |  displays the x and y coordinates of centroid of box 2 for color channel 0. The centroid is NOT the same as the center. It
                  |  is the center of mass for a blob; e.g., for a color arrow pointing right,
                  |  there are more pixels to right of center, so the centroid is to the right
                  |  of center.
          tr
            td
              a(name='get_code_num')
            td
              code get_code_num 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | int get_code_num(int channel, int object);
                  br
                  |  Returns the QR data associated with an object for a QR channel as an integer.
                  |  If the given channel or object doesn't exist, -1 is returned. See also 
                  code get_object_data
                  | .
          tr
            td
              a(name='get_object_confidence')
            td
              code get_object_confidence 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | double get_object_confidence(int channel, int object);
                  br
                  |  Returns the confidence, between 0.0 and 1.0, that the density of color
                  |  pixels for the object on the given channel is significant. If the channel
                  |  or object doesn't exist, 0.0 is returned.
          tr
            td
              a(name='get_object_count')
            td
              code get_object_count 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | int get_object_count(int channel);
                  br
                  |  Returns the number of objects being 'seen' for the specified channel. Objects
                  |  are sorted by bounding box area, largest first. Returns -1 if channel doesn't
                  |  exist. See also 
                  code get_channel_count
                  | .
          tr
            td
              a(name='get_object_data')
            td
              code get_object_data 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | char *get_object_data(int channel, int object);
                  br
                  |  Returns the sequence of character data associated with a given object on
                  |  a QR channel. If there is no data, 0 is returned. The data is not guaranteed
                  |  to be null terminated, but can be accessed using array notation; for example,
                  br
                  dl
                    dd
                      code get_object_data(0,0)[0], get_object_data(0,0)[1]
                      | , etc.
                  code camera_update
                  |  will invalidate the pointer returned by 
                  code get_object_data
                  | .
                  |  See also 
                  code get_object_data_length
                  | .
          tr
            td
              a(name='get_object_data_length')
            td
              code get_object_data_length 
              |  [Category: Vision]
              dl
                dd
                  | Format: 
                  code
                    | int get_object_data_length(int channel, int object);
                  br
                  |  Returns the number of characters associated with the QR code on a QR channel.
                  |  If there is no data, 0 is returned. If the channel or object is invalid,
                  |  0 is returned. See also 
                  code get_object_data
                  | .
      .Indent
        h4 Example program for using a camera to track an object
        p
          | Camera functions will not provide meaningful data until the camera has been activated
          | using 
          code camera_open
          |  or 
          code camera_open_at_res
          | . For most purposes,
          |  the 
          code LOW_RES
          |  setting used by 
          code camera_open
          |  is sufficient
          |  and it serves to reduce frame processing overhead. Once the camera has been activated,
          |  the camera function 
          code camera_update
          |  is used to obtain the current frame
          |  in the camera's field of view. Note that 
          code camera_update
          |  is called every
          |  time through a camera processing loop to provide a current camera frame for processing.
        a(name='PointServo')
        pre
          code.language-clike
            | /* This program points a servo (that is plugged into port 0 and centered on the camera&apos;s field of vision) towards an object that fits into the color model defined for channel 0 */ 
            | int main()
            | {
            |    int offset, x, y;
            |    enable_servo(0);      // enable servo
            |    camera_open();        // activate camera
            |    camera_update();      // get most recent camera image and process it
            |    while (side_button() == 0) {
            |       x = get_object_center(0,0).x;  // get image center x data
            |       y = get_object_center(0,0).y;  //    and y data
            |       if (get_object_count(0) &gt; 0) { // there is a blob
            |          display_printf(0,1,&quot;Center of largest blob: (%d,%d)   &quot;,x,y);
            |          offset=5*(x-80); // amount to deviate servo from center
            |          set_servo_position(0,1024+offset);
            |       }
            |       else {
            |          display_printf(0,1,&quot;No object in sight                &quot;);
            |       ]
            |       msleep(200);       // don&apos;t rush print statement update
            |       camera_update();   // get new image data before repeating
            |    }
            |    disable_servos();
            |    camera_close();
            |    printf(&quot;All done\n&quot;);
            | }
      .Indent
        h4
          | Example program to translate a QR code while showing the camera image in a graphics
          | window
        p
          | This program displays the camera image in a 160×120 graphics window centered
          | on the 320×240 KIPR Robot Controller display, decoding any QR code found
          | and displaying the result in the space above the graphics window.
        a(name='TranslateQR')
        pre
          code.language-clike
            | // Assume channel 1 is configured for identifying QR codes
            | // If a QR code is found, it is translated
            | int main()
            | {
            |     int r, c, ix, i, lngth;
            |     const unsigned char *img; // variable to hold camera image
            |     camera_open(); graphics_open(160,120); // activate camera and open a graphics window
            |     camera_update(); // get most recent camera image and process it
            |     while(side_button()==0) {
            |         img=get_camera_frame(); // get a camera frame and display it in graphics window
            |         for(r=0; r&lt;120; r++) {
            |              for(c=0; c&lt;160; c++) {
            |                  ix=3*(160*r + c); // index of pixel to paint into row r, column c
            |                  graphics_pixel(c,r,img[ix+2],img[ix+1],img[ix]); // RGB order by reversing GBR
            |              }
            |         }
            |         graphics_update(); // show the frame
            |         if (get_object_count(1) &gt; 0) { // there is a QR code in view
            |             display_printf(0,0,&quot;QR code:                              &quot;);
            |             lngth = get_object_data_length(1,0); // decode and display above graphics window
            |             for(i=0; i &lt; lngth; i++) { // print QR code letter by letter until end of data
            |                 display_printf(9+i,0,&quot;%c&quot;, get_object_data(1,0)[i]);
            |             }
            |         }
            |         else {
            |             display_printf(0,0,&quot;No QR code detected                   &quot;);
            |         }
            |         camera_update(); // get new image data before repeating 
            |     }
            |     camera_close(); graphics_close(); // clean up
            | }
      // Graphics API
      a(name='Graphics')
      h3 KIPR Robot Controller Graphics Functions
      p
        | The KIPR Robot Controller (and Simulator) support basic graphical draw operations,
        | which allow a user to create their own user interface if they wish. Functions are
        | provided to draw and color pixels, lines, circles, triangles, and rectangles (non-rotated).
        | The screen and two dimensional objects can also be filled with a single color. Both
        | mouse clicks and cursor location can be detected (on the KIPR Robot Controller, a
        | screen tap corresponds to a left mouse click).
      p
        | Note that any virtual features of the KIPR Robot Controller user interface (such as
        | the A,B,C buttons) will be unavailable if obscured by the graphics window (it is
        | advisable to use the side button when doing graphical applications for this reason).
      table
        tbody
          tr
            td
              a(name='graphics_open')
            td
              code graphics_open 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code int graphics_open(int 
                  | width,
                  |  int height);
                  br
                  |  Opens and centers a graphics window on the display
                  |  of the specified width and height. The maximum width for the KIPR Robot
                  |  Controller display is 320, and the maximum height is 240. See also 
                  code graphics_close
                  | .
          tr
            td
              a(name='graphics_close')
            td
              code graphics_close 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code void graphics_close();
                  br
                  |  Closes the graphics window on the display, restoring access to any virtual
                  |  buttons underneath it. See also 
                  code graphics_open
                  | .
          tr
            td
              a(name='graphics_update')
            td
              code graphics_update 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code void graphics_update();
                  br
                  |  Repaints the pixels in the graphics window to show any changes that have
                  |  been made.
          tr
            td
              a(name='graphics_clear')
            td
              code graphics_clear 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code void graphics_clear();
                  br
                  |  Erases the graphics window (not shown until 
                  code graphics_update
                  | ).
          tr
            td
              a(name='graphics_fill')
            td
              code graphics_fill 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code
                    | void graphics_fill(int r, int g, int b);
                  br
                  |  Colors the pixels in the window using the 
                  code r
                  | , 
                  code g
                  | , 
                  code b
                  |  color encoding.
          tr
            td
              a(name='graphics_pixel')
            td
              code graphics_pixel 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code
                    | void graphics_pixel(int x, int y, int r, int g, int b);
                  br
                  |  Colors the specified pixel in the window using the 
                  code r
                  | , 
                  code g
                  | , 
                  code b
                  |  color encoding, where columns 
                  code x
                  |  and rows 
                  code y
                  |  are
                  |  indexed starting from the upper left corner of the graphics window.
          tr
            td
              a(name='graphics_line')
            td
              code graphics_line 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code
                    | void graphics_line(int x1, int y1, int x2, int y2, int r, int g, int b);
                  br
                  |  Draws a line in the window from the specified ( 
                  code x1
                  | , 
                  code y1
                  | )
                  |  pixel to the ( 
                  code x2
                  | , 
                  code y2
                  | ) pixel using the 
                  code r
                  | , 
                  code g
                  | , 
                  code b
                  |  color encoding (where columns x and rows y are indexed starting from the
                  |  upper left corner of the graphics window).
          tr
            td
              a(name='graphics_circle')
            td
              code graphics_circle 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code
                    | void graphics_circle(int cx, int cy, int radius, int r, int g, int b);
                  br
                  |  Draws a circle in the window of the specified radius centered at ( 
                  code cx
                  | , 
                  code cy
                  | )
                  |  using the 
                  code r
                  | , 
                  code g
                  | , 
                  code b
                  |  color encoding (where
                  |  columns x and rows y are indexed starting from the upper left corner of
                  |  the graphics window).
          tr
            td
              a(name='graphics_circle_fill')
            td
              code graphics_circle_fill 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code
                    | void graphics_circle_fill(int cx, int cy, int radius, int r, int g, int b);
                  br
                  |  Draws a circle in the window of the specified radius centered at ( 
                  code cx
                  | , 
                  code cy
                  | )
                  |  and fills it using the 
                  code r
                  | , 
                  code g
                  | , 
                  code b
                  |  color
                  |  encoding (where columns x and rows y are indexed starting from the upper
                  |  left corner of the graphics window).
          tr
            td
              a(name='graphics_rectangle')
            td
              code graphics_rectangle 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code
                    | void graphics_rectangle(int x1, int y1, int x2, int y2, int r, int g, int b);
                  br
                  |  Draws a rectangle in the window with upper left corner ( 
                  code x1
                  | , 
                  code y1
                  | )
                  |  and lower right corner ( 
                  code x2
                  | , 
                  code y2
                  | ) using the 
                  code r
                  | , 
                  code g
                  | , 
                  code b
                  |  color encoding (where columns x and rows y are indexed starting from the
                  |  upper left corner of the graphics window).
          tr
            td
              a(name='graphics_rectangle_fill')
            td
              code graphics_rectangle_fill 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code
                    | void graphics_rectangle_fill(int x1, int y1, int x2, int y2, int r, int g, int b);
                  br
                  |  Draws a rectangle in the window with upper left corner ( 
                  code x1
                  | , 
                  code y1
                  | )
                  |  and lower right corner ( 
                  code x2
                  | , 
                  code y2
                  | ) and fills it using
                  |  the 
                  code r
                  | , 
                  code g
                  | , 
                  code b
                  |  color encoding (where
                  |  columns x and rows y are indexed starting from the upper left corner of
                  |  the graphics window).
          tr
            td
              a(name='graphics_triangle')
            td
              code graphics_triangle 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code
                    | void graphics_triangle(int x1, int y1, int x2, int y2, int x3, int y3, int r, int g, int b);
                  br
                  |  Draws a triangle in the window with corners ( 
                  code x1
                  | , 
                  code y1
                  | ),
                  |  ( 
                  code x2
                  | , 
                  code y2
                  | ), ( 
                  code x3
                  | , 
                  code y3
                  | ) using
                  |  the 
                  code r
                  | , 
                  code g
                  | , 
                  code b
                  |  color encoding (where columns
                  |  x and rows y are indexed starting from the upper left corner of the graphics
                  |  window).
          tr
            td
              a(name='graphics_triangle_fill')
            td
              code graphics_triangle_fill 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code
                    | void graphics_triangle_fill(int x1, int y1, int x2, int y2, int x3, int y3, int r, int g, int b);
                  br
                  |  Draws a triangle in the window with corners ( 
                  code x1
                  | , 
                  code y1
                  | ),
                  |  ( 
                  code x2
                  | , 
                  code y2
                  | ), ( 
                  code x3
                  | , 
                  code y3
                  | ) and
                  |  fills it using the 
                  code r
                  | , 
                  code g
                  | , 
                  code b
                  |  color encoding
                  |  (where columns x and rows y are indexed starting from the upper left corner
                  |  of the graphics window).
          tr
            td
              a(name='get_mouse_position')
            td
              code get_mouse_position 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code
                    | void get_mouse_position(int *x, int *y);
                  br
                  |  Assigns the column,row position of the cursor in the window to the two
                  |  specified address parameters. Note that the typical call for this function
                  |  will look like
                  br
                  .Indent
                    code get_mouse_position(&col, &row);
          tr
            td
              a(name='get_mouse_left_button')
            td
              code get_mouse_left_button 
              |  [Category: Graphics]
              dl
                dd
                  | Format: 
                  code int get_mouse_left_button();
                  br
                  |  Returns 1 if the left mouse button is clicked or if the KIPR Robot Controller
                  |  display is tapped. The two additional functions 
                  code get_mouse_middle_button
                  |  and 
                  code get_mouse_right_button
                  |  are also available but have no
                  |  meaning on the KIPR Robot Controller (unless a mouse is attached)
      // Xtion API
      a(name='DepthSensor')
      h3 KIPR Robot Controller Depth Functions
      table.centerTable
        tbody
          tr
            td
              | The KIPR Robot Controller has functions supporting the use of an ASUS Xtion as
              | a USB depth sensor.
            td(width='50%')
              // &lt;img class='right' src='/imgs/docs/XtionDepth.gif' width='50%'&gt;&lt;/img&gt;
              br
      p
        | The USB depth sensor provides the KIPR Robot Controller with a 240×320 row,column
        | (2-dimensional) image of the space in front of it (rows measured down from the upper
        | left corner of the image and columns to the right). The depth functions provide information
        | about the three dimensional space in front of the Xtion, where the space is organized
        | in (x,y,z) coordinates with the x-axis directed right, the y-axis is directed up,
        | and the z-axis directed straight out from the Xtion. Coordinate (0,0,0) is the center
        | of the Xtion face. Coordinate values are given in millimeters (mm). The depth sensor's
        | effective range is from about 1/2 meter to 5 meters.
      table.centerTable
        tbody
          tr
            td
              // &lt;img class='center' src='/imgs/docs/XtionDepthView.jpg' width='80%'&gt;&lt;/img&gt;
      br
      table
        tbody
          tr
            td
              a(name='depth_open')
            td
              code depth_open 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code int depth_open();
                  br
                  |  Turns on the depth sensor. Returns 1 on success, 0 on failure. See also 
                  code depth_close
                  | .
          tr
            td
              a(name='depth_close')
            td
              code depth_close 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code void depth_close();
                  br
                  |  Clean up the depth instance and power down the sensor. See also 
                  code depth_open
                  | .
          tr
            td
              a(name='depth_update')
            td
              code depth_update 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code int depth_update();
                  br
                  |  Generates a new image from the depth sensor for use by the depth functions.
                  |  Returns 1 on success, 0 on failure.
          tr
            td
              a(name='depth_scanline_update')
            td
              code depth_scanline_update 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code
                    | int depth_scanline_update(int row);
                  br
                  |  Replaces the current scanline information with the scanline information
                  |  for the specified row of the image. Returns 1 on success, 0 on failure.
                  tr
                  tr
                    td
                      a(name='get_depth_value')
                    td
                      code get_depth_value 
                      |  [Category: Depth]
                      dl
                        dd
                          | Format: 
                          code
                            | int get_depth_value(int row, int col);
                          br
                          |  Returns the value of the depth coordinate z in mm for row and
                          |  column positions of the image. See also 
                          code get_depth_world_point
                          | .
                  tr
                    td
                      a(name='get_depth_world_point')
                    td
                      code get_depth_world_point 
                      |  [Category: Depth]
                      dl
                        dd
                          | Format: 
                          code
                            | point3 get_depth_world_point(int row, int col);
                          br
                          |  Returns an object of type 
                          code point3
                          |  giving the (x,y,z)
                          |  coordinates for the object at position (row,col) in the current
                          |  image. For 
                          br
                          .Indent
                            code
                              |  point3 p3;
                              br
                              |                p3 = get_depth_world_point(4,7);
                              |           
                          |  the (x,y,z) coordinates for row 4, column 7 in the image are given by 
                          code p3.x
                          | , 
                          code p3.y
                          | , 
                          code p3.z
                          | . The value returned by 
                          code get_depth_value
                          |  is the same as 
                          code p3.z
                          | .
                  tr
                    td
                      a(name='get_depth_world_point_x')
                    td
                      code get_depth_world_point_x 
                      |  [Category: Depth]
                      dl
                        dd
                          | Format: 
                          code
                            | int get_depth_world_point_x(int row, int col);
                          br
                          |  Returns the x coordinate for the object at position (row,col)
                          |  in the current image. See also 
                          code get_depth_world_point
                          | .
                  tr
                    td
                      a(name='get_depth_world_point_y')
                    td
                      code get_depth_world_point_y 
                      |  [Category: Depth]
                      dl
                        dd
                          | Format: 
                          code
                            | int get_depth_world_point_y(int row, int col);
                          br
                          |  Returns the y coordinate for the object at position (row,col)
                          |  in the current image. See also 
                          code get_depth_world_point
                          | .
                  tr
                    td
                      a(name='get_depth_world_point_z')
                    td
                      code get_depth_world_point_z 
                      |  [Category: Depth]
                      dl
                        dd
                          | Format: 
                          code
                            | int get_depth_world__zpoint(int row, int col);
                          br
                          |  Returns the z coordinate for the object at position (row,col)
                          |  in the current image. The return value is the same as the value
                          |  returned by 
                          code get_depth_value
                          | . See also 
                          code get_depth_world_point
                          | .
                  td
                    a(name='get_depth_scanline_object_count')
                  td
                    code get_depth_scanline_object_count 
                    |  [Category: Depth]
                    dl
                      dd
                        | Format: 
                        code int get_depth_scanline_object_count();
                        br
                        |  Returns the number of objects detected on the scanline, where an
                        |  object is detected by not having a depth break in scanning across
                        |  it. This means that if the scanline crosses a cavity, it will report
                        |  two objects. Objects are numbered starting from 0, ordered from
                        |  nearest to farthest. By default, the closest pixel for each object
                        |  is used to determine how near it is.
          tr
            td
              a(name='get_depth_scanline_object_nearest_x')
            td
              code get_depth_scanline_object_nearest_x 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code
                    | int get_depth_object_nearest_x(int obj);
                  br
                  |  For the specified object returns the coordinate value for the farthest
                  |  pixel detected.
          tr
            td
              a(name='get_depth_scanline_object_nearest_y')
            td
              code get_depth_scanline_object_nearest_y 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code
                    | int get_depth_object_nearest_y(int obj);
                  br
                  |  For the specified object returns the coordinate value for the farthest
                  |  pixel detected.
          tr
            td
              a(name='get_depth_scanline_object_nearest_z')
            td
              code get_depth_scanline_object_nearest_z 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code
                    | int get_depth_object_nearest_z(int obj);
                  br
                  |  For the specified object returns the coordinate value for the nearest
                  |  pixel detected.
          tr
            td
              a(name='get_depth_scanline_object_center_x')
            td
              code get_depth_scanline_object_center_x 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code
                    | int get_depth_object_center_x(int obj);
                  br
                  |  For the specified object returns the coordinate value for the farthest
                  |  pixel detected.
          tr
            td
              a(name='get_depth_scanline_object_center_y')
            td
              code get_depth_scanline_object_center_y 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code
                    | int get_depth_object_center_y(int obj);
                  br
                  |  For the specified object returns the coordinate value for the farthest
                  |  pixel detected.
          tr
            td
              a(name='get_depth_scanline_object_center_z')
            td
              code get_depth_scanline_object_center_z 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code
                    | int get_depth_object_center_z(int obj);
                  br
                  |  For the specified object returns the coordinate value for the center
                  |  pixel.
          tr
            td
              a(name='get_depth_scanline_object_farthest_x')
            td
              code get_depth_scanline_object_farthest_x 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code
                    | int get_depth_object_farthest_x(int obj);
                  br
                  |  For the specified object returns the coordinate value for the farthest
                  |  pixel detected.
          tr
            td
              a(name='get_depth_scanline_object_farthest_y')
            td
              code get_depth_scanline_object_farthest_y 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code
                    | int get_depth_object_farthest_y(int obj);
                  br
                  |  For the specified object returns the coordinate value for the farthest
                  |  pixel detected.
          tr
            td
              a(name='get_depth_scanline_object_farthest_z')
            td
              code get_depth_scanline_object_farthest_z 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code
                    | int get_depth_object_farthest_z(int obj);
                  br
                  |  For the specified object returns the coordinate value for the farthest
                  |  pixel detected.
          tr
            td
              a(name='get_depth_scanline_object_size')
            td
              code get_depth_scanline_object_size 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code
                    | int get_depth_object_size(int obj);
                  br
                  |  For the specified object returns the distance on the scanline between
                  |  the leftmost and rightmost pixel detected.
          tr
            td
              a(name='get_depth_scanline_object_angle')
            td
              code get_depth_scanline_object_angle 
              |  [Category: Depth]
              dl
                dd
                  | Format: 
                  code
                    | int get_depth_object_angle(int obj);
                  br
                  |  For the specified object returns the angular measure (in degrees)
                  |  from the leftmost pixel on the scanline to the right most. Positive
                  |  is counterclockwise.
      .Indent
        h4
          | Example program for using a depth sensor and a graphical representation to find the
          | distance to an object
        a(name='PointDistance')
        pre
          code.language-clike
            | int main()
            | {
            |    int r, g, b, row, col, val;
            |    depth_open(); // initiate depth sensor
            |    graphics_open(320,240); // open up graphics window (full screen on KIPR Robot Controller)
            |    while(!get_mouse_left_button()) { // loop until mouse is clicked (screen is tapped)
            |       depth_update(); // get a new depth image
            |       for(row=0; row&lt;240; row++) { // loop through rows
            |          for(col=0; col&lt;320; col++) { // loop through columns in current row
            |             val = get_depth_value(row,col) ; // get distance for pixel in mm
            |             if(val == 0)  // if too close or not a valid value, don&apos;t color
            |                continue;
            |             else if (val &gt; 1530) { // if more than 1.53m away color in gray scale
            |                val = (5000-val)/20; // range is from 173 on down (towards darker)
            |                graphics_pixel(col,row,val,val,val); // paint using r=g=b (gray scale)
            |             }
            |             else { // and otherwise ... 
            |                val=val &gt; 510 ? val-510 : 0; // rerange the distance inward by 510mm
            |                r=val &gt; 510 ? 0 : 255-val/2;  // increase red for closer
            |                g=val &gt; 510 ? 255-(val-510)/2 : val/2; // greenish for mid values
            |                b=val &gt; 510 ? val/2-255 : 0;  // increase blue for farther
            |                graphics_pixel(col,row, r,g,b); // draw the pixel
            |             }
            |          }
            |       }
            |       graphics_update(); // paint the screen using the new pixel valuess
            |    }
            |    get_mouse_position(&amp;col,&amp;row); // where was screen tapped?
            |    depth_close(); graphics_close();  //close sensor and graphics window
            |     // Display the distance (z coordinate) to the pixels&apos;s point in space
            |    printf(&quot;Distance to pixel %i,%i is %imm\n\n\n&quot;,col,row,get_depth_value(row,col));
            | }
      // Create Function Library
      a(name='Create_functions')
      h3 Create Function Library
      p
        | The functions in the KIPR Robot Controller Library for controlling an iRobot Create
        | module provide an interface between a program on the KIPR Robot Controller and the
        | Create Open Interface (
        a(href='http://www.irobot.com/filelibrary/pdfs/hrd/create/Create%20Open%20Interface_v2.pdf')
          | http://www.irobot.com/filelibrary/pdfs/hrd/create/Create%20Open%20Interface_v2.pdf
        | ).
        |  Each Create function in the KIPR Robot Controller Library is designed to send the
        |  Create a series of Open Interface commands that cause the Create to perform some
        |  action. A script of Open Interface commands can also be downloaded to the Create
        |  to be played later (see the library function 
        code create_write_byte
        | ).
      p
        | The KIPR Robot Controller communicates with the iRobot Create via a (TTL) serial connection.
        | Functions included in the KIPR Robot Controller Library for the iRobot Create send
        | serial byte code sequences to the Create over the serial connection, making it possible
        | to operate the Create without having to reference the Open Interface guide. These
        | sequences cover the large majority of actions users typically want to have performed
        | by a Create module (e.g., drive forward at a given speed, determine how far the Create
        | has traveled, etc). They also provide a means for the KIPR Robot Controller to directly
        | control an iRobot Create.
      p
        | A Create script is a (limited) sequence of pre-defined iRobot Create byte code commands
        | ordered to perform some set of actions independent of external control. In contrast
        | to other commands, a command to start a script disables serial communications until
        | the script has finished. See the 
        a(href='#Create_script_example') example program
        |  below for more information on user defined scripts.
      p
        | The KIPR Robot Controller Library functions for moving the iRobot Create are non-blocking,
        | so when a movement command is sent to the iRobot Create, its trajectory will continue
        | until a different Create movement function is executed on the KIPR Robot Controller.
        | In contrast, once a script is started on the Create it will run to completion, during
        | which time the connection to the KIPR Robot Controller is ignored. The iRobot Create
        | may also be used to play MIDI music. Up to 16 songs may be downloaded to the iRobot
        | Create from a song array on the KIPR Robot Controller. See the Create Open Interface
        | manual for details on note and duration codes.
      p
        | The library functions for accessing Create sensor data return either the requested
        | data or an error code. A return value greater than 100,000 is used to indicate an
        | error occurred, where the error number is given by 100,000 + 
        code &lt;
        i Create-Serial-Interface-Packet-Number
        code &gt;
        | .
        |  For example, a code of 100,007 indicates an error occurred when requesting bumper
        |  or wheel drop sensor status. Sensor packet numbers range from 7 to 42 as described
        |  in the Create Open Interface manual.
      p
        | The Create Open Interface manual has details concerning the physical characteristics
        | of the iRobot Create module and descriptions of how to use the various byte code
        | commands.
      // Create Serial Interface
      a(name='Create_serial_interface')
      h4 Create Serial Interface Functions
      table
        tbody
          tr
            td
              a(name='create_clear_serial_buffer')
            td
              code create_clear_serial_buffer 
              |  [Category: Create Serial Interface Function]
              dl
                dd
                  | Format: 
                  code void create_clear_serial_buffer();
                  br
                  |  Clears the internal serial interface buffer of any unaccessed send/receive
                  |  data.
          td
            a(name='create_connect')
          td
            code create_connect() 
            |  [Category: Create Serial Interface Function]
            dl
              dd
                | Format: 
                code int create_connect;
                br
                |  Establishes a USB serial connection between the KIPR Robot Controller and
                |  a Create module. This statement is normally paired with an 
                code msleep
                |  statement, since it takes more than one second for the communications link
                |  to stabilize ( 
                code msleep(1500)
                |  is sufficient). If the program is
                |  paused and the Create is not turned on, the function will block continued
                |  execution until the Create is turned on. This function is always the first
                |  step for sending Create Open Interface commands from the KIPR Robot Controller
                |  to the Create. By default, the Create starts in 
                code create_safe
                |  mode.
          tr
            td
              a(name='create_disconnect')
            td
              code create_disconnect 
              |  [Category: Create Serial Interface Function]
              dl
                dd
                  | Format: 
                  code void  create_disconnect();
                  br
                  |  Restores the Create to power on configuration (which will also shut off
                  |  any running motors).
          tr
            td
              a(name='create_read_block')
            td
              code create_read_block 
              |  [Category: Create Serial Interface Function]
              dl
                dd
                  | Format: 
                  code
                    | int create_read_block(char *data, int count);
                  br
                  |  Uses the serial interface to have the Create send the number of bytes specified
                  |  into the character string pointed to by 
                  code data
                  | . 1 is returned
                  |  on read success, 0 on failure.
          tr
            td
              a(name='create_write_byte')
            td
              code create_write_byte 
              |  [Category: Create Serial Interface Function]
              dl
                dd
                  | Format: 
                  code
                    | void create_write_byte(char byte);
                  br
                  |  Uses the serial interface to have the KIPR Robot Controller send the specified
                  |  byte to the iRobot Create. The purpose of this function is for writing
                  |  functions for supplying a series of byte commands to the Create to have
                  |  it perform some action, or to load a song, or to load a script.
      // Create Configuration
      a(name='Create_configuration')
      h4 Create Configuration Functions
      table
        tbody
          tr
            td
              a(name='create_full')
            td
              code create_full 
              |  [Category: Create Configuration Function]
              dl
                dd
                  | Format: 
                  code void  create_full();
                  br
                  |  Create will move however you tell it (even if that is a bad thing). In
                  |  particular, the Create will not stop and disconnect if a wheel drop or
                  |  cliff sensor goes high.
          tr
            td
              a(name='create_passive')
            td
              code create_passive 
              |  [Category: Create Configuration Function]
              dl
                dd
                  | Format: 
                  code void  create_passive();
                  br
                  |  Puts Create into passive mode (motor commands won't work).
          tr
            td
              a(name='create_safe')
            td
              code create_safe 
              |  [Category: Create Configuration Function]
              dl
                dd
                  | Format: 
                  code void create_safe();
                  br
                  |  Create will execute all commands, but will disconnect and stop if a wheel
                  |  drop or cliff sensor goes high.
          tr
            td
              a(name='create_start')
            td
              code create_start 
              |  [Category: Create Configuration Function]
              dl
                dd
                  | Format: 
                  code void  create_start();
                  br
                  |  Puts Create back into active mode (all commands will work). Active mode
                  |  is the default mode at power on.
          tr
            td
              a(name='get_create_mode')
            td
              code get_create_mode 
              |  [Category: Create Configuration Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_mode();
                    br
                    |  Returns the Create's current operating mode (0=off, 1=passive, 2=safe,
                    |  3=full). In passive mode, motor commands don't work. All commands work
                    |  in safe or full mode. In safe mode, the Create will stop all motors and
                    |  disconnect if any cliff sensors or wheel drop sensors go high. In full
                    |  mode, the Create will continue any movement commands and remain connected
                    |  regardless of sensor values.
      // Create Movement Functions
      a(name='Create_movement')
      h4 Create Movement Functions
      table
        tbody
          tr
            td
              a(name='create_drive')
            td
              code create_drive 
              |  [Category: Create Movement Function]
              dl
                dd
                  | Format: 
                  code
                    | void create_drive(int speed, int radius);
                  br
                  |  Moves the Create in an arc (see below for point turns and straight). Speed
                  |  range for all commands is -500 to 500mm/sec and radius is -2000 to 2000mm.
          tr
            td
              a(name='create_drive_direct')
            td
              code create_drive_direct 
              |  [Category: Create Movement Function]
              dl
                dd
                  | Format: 
                  code
                    | void create_drive_direct(int r_speed, int l_speed);
                  br
                  |  Moves the Create by setting the speed for the left side and right side
                  |  separately, speed range -500 to 500mm/sec.
          tr
            td
              a(name='create_drive_straight')
            td
              code create_drive_straight 
              |  [Category: Create Movement Function]
              dl
                dd
                  | Format: 
                  code
                    | void create_drive_straight(int speed);
                  br
                  |  Moves the Create straight at speed in the range -500 to 500mm/sec.
          tr
            td
              a(name='create_spin_CCW')
            td
              code create_spin_CCW 
              |  [Category: Create Movement Function]
              dl
                dd
                  | Format: 
                  code
                    | void create_spin_CCW(int speed);
                  br
                  |  Spins the Create Counter Clock Wise with edge speed of speed of -500 to
                  |  500mm/sec.
          tr
            td
              a(name='create_spin_CW')
            td
              code create_spin_CW 
              |  [Category: Create Movement Function]
              dl
                dd
                  | Format: 
                  code
                    | void create_spin_CW(int speed);
                  br
                  |  Spins the Create Clock Wise with edge speed of -500 to 500mm/sec.
          tr
            td
              a(name='create_stop')
            td
              code create_stop 
              |  [Category: Create Movement Function]
              dl
                dd
                  | Format: 
                  code void create_stop();
                  br
                  |  Stops the Create drive wheels.
          tr
            td
              a(name='get_create_distance')
            td
              code get_create_distance
              |  [Category: Create Movement Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_distance();
                    br
                    |  Returns the accumulated distance the Create has traveled since it was
                    |  turned on or since the distance was reset. Moving backwards reduces this
                    |  value. The distance is in millimeters.
          tr
            td
              a(name='get_create_normalized_angle')
            td
              code get_create_normalized_angle
              |  [Category: Create Movement Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_normalized_angle();
                    br
                    |  Returns the accumulated angle the Create has turned since it was turned
                    |  on or the distance was reset, normalized to the range 0 to 359 degrees.
                    |  Turning CCW increases this value and CW decreases the value.
          tr
            td
              a(name='get_create_overcurrents')
            td
              code get_create_overcurrents
              |  [Category: Create Movement Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_overcurrents();
                    br
                    |  Returns the overcurrent status byte where the 16's bit indicates overcurrent
                    |  in the left wheel; 8's bit overcurrent in the right wheel, 4's bit is
                    |  LD2, 2's bit is LD0 and 1's bit is LD1 (LD is for the Create's 3 low
                    |  side driver outputs, pins 22 to 24 for the connector in the Create cargo
                    |  bay). Seldom used in practice.
          tr
            td
              a(name='get_create_requested_left_velocity')
            td
              code get_create_requested_left_velocity
              |  [Category: Create Movement Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_requested_left_velocity();
                    br
                    |  Returns the speed the Create is moving (-500 to 500mm/sec) the left wheel
                    |  according to the most recent movement command executed.
          tr
            td
              a(name='get_create_requested_radius')
            td
              code get_create_requested_radius
              |  [Category: Create Movement Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_requested_radius();
                    br
                    |  Returns the radius the Create is turning (-2000 to 2000mm) according
                    |  to the most recent movement command executed.
          tr
            td
              a(name='get_create_requested_right_velocity')
            td
              code get_create_requested_right_velocity
              |  [Category: Create Movement Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_requested_right_velocity();
                    br
                    |  Returns the speed the Create is moving (-500 to 500mm/sec) the right
                    |  wheel according to the most recent movement command executed.
          tr
            td
              a(name='get_create_requested_velocity')
            td
              code get_create_requested_velocity
              |  [Category: Create Movement Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_requested_velocity();
                    br
                    |  Returns the speed the Create is moving (-500 to 500mm/s) according to
                    |  the most recent movement command executed.
          tr
            td
              a(name='get_create_total_angle')
            td
              code get_create_total_angle
              |  [Category: Create Movement Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_total_angle();
                    br
                    |  Returns the accumulated angle the Create has turned through since it
                    |  was turned on or since the distance or angle was reset. Turning CCW increases
                    |  this value and CW decreases the value.
          tr
            td
              a(name='set_create_distance')
            td
              code set_create_distance
              |  [Category: Create Movement Function]
              dl
                dd
                  dd
                    | Format: 
                    code
                      | void set_create_distance(int dist);
                    br
                    |  Resets the distance accumulation value for 
                    code get_create_distance
                    |  to the value specified.
          tr
            td
              a(name='set_create_normalized_angle')
            td
              code set_create_normalized_angle
              |  [Category: Create Movement Function]
              dl
                dd
                  dd
                    | Format: 
                    code
                      | void set_create_normalized_angle(int angle);
                    br
                    |  Resets the normalized angle accumulation value for 
                    code get_create_normalized_angle
                    |  to the value specified.
          tr
            td
              a(name='set_create_total_angle')
            td
              code set_create_total_angle
              |  [Category: Create Movement Function]
              dl
                dd
                  dd
                    | Format: 
                    code
                      | void set_create_total_angle(int angle);
                    br
                    |  Resets the total angle accumulation value for 
                    code get_create_total_angle
                    |  to the value specified.
      // Create Sensor Functions
      a(name='Create_sensors')
      h4 Create Sensor Functions
      // &lt;img class='center' src='/imgs/docs/CreateSensors.gif' width=50%&gt;&lt;/img&gt;
      br
      tr
        td
          a(name='get_create_advance_button')
        td
          code get_create_advance_button
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_advance_button();
                br
                |  Returns 1 if the advance (
                bold
                  code &gt;&gt;
                  | |
                | ) button is being pressed, 0 otherwise.
      tr
        td
          a(name='get_create_bay_AI')
        td
          code get_create_bay_AI
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_bay_AI();
                br
                |  Returns the 10 bit analog value on pin 4 of the connector in the Create cargo
                |  bay.
      tr
        td
          a(name='get_create_bay_DI')
        td
          code get_create_bay_DI
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_bay_DI();
                br
                |  Returns a byte for determining the current digital inputs (0 or 1) being
                |  applied to pins 16, 6, 18, 5, and 17 of the connector in the Create cargo
                |  bay. The 128, 64, and 32 bits of the byte are not used. The 16 bit is for
                |  pin 15, 8 bit for pin 6, 4 bit for pin 18, 2 bit for pin 5 and 1 bit for
                |  pin 17. Pin 15 is used to alter communications baud rate.
      tr
        td
          a(name='get_create_cwdrop')
        td
          code get_create_cwdrop
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_cwdrop();
                br
                |  Returns 1 if the front caster wheel has dropped, 0 otherwise.
      tr
        td
          a(name='get_create_infrared')
        td
          code get_create_infrared
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_infrared();
                br
                |  Returns the byte detected from an iRobot remote control, Returns 255 if no
                |  byte has been detected.
      tr
        td
          a(name='get_create_lbump')
        td
          code get_create_lbump
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_lbump();
                br
                |  Returns 1 if the left bumper is pressed, 0 otherwise.
      tr
        td
          a(name='get_create_lcliff')
        td
          code get_create_lcliff
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_lcliff();
                br
                |  Returns 1 if the left cliff sensor is over a surface that doesn't reflect
                |  IR (e.g., black) or over a cliff, 0 otherwise.
      tr
        td
          a(name='get_create_lcliff_amt')
        td
          code get_create_lcliff_amt
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_lcliff_amt();
                br
                |  Returns the left cliff sensor (analog) reading as a 12 bit value (0 to 4095).
      tr
        td
          a(name='get_create_lfcliff')
        td
          code get_create_lfcliff
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_lfcliff();
                br
                |  Returns 1 if left front cliff sensor is over a surface that doesn't reflect
                |  IR (e.g., black) or over a cliff, 0 otherwise.
      tr
        td
          a(name='get_create_lfcliff_amt')
        td
          code get_create_lfcliff_amt
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_lfcliff_amt();
                br
                |  Returns the left front cliff sensor (analog) reading as a 12 bit value (0
                |  to 4095).
      tr
        td
          a(name='get_create_lwdrop')
        td
          code get_create_lwdrop
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_lwdrop();
                br
                |  Returns 1 if the left wheel has dropped, 0 otherwise. Materials supplied
                |  with the Create include two wheel clips that when installed will prevent
                |  the drive wheels from dropping.
      tr
        td
          a(name='get_create_number_of_stream_packets')
        td
          code get_create_number_of_stream_packets
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_number_of_stream_packets();
                br
                |  If data streaming is being used, returns the size of the stream.
      tr
        td
          a(name='get_create_play_button')
        td
          code get_create_play_button
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_play_button();
                br
                |  Returns 1 if the play button ( 
                code
                  bold &gt;
                | ) is being pressed,
                |  0 otherwise.
      tr
        td
          a(name='get_create_rbump')
        td
          code get_create_rbump
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_rbump();
                br
                |  Returns 1 if the right bumper is pressed, 0 otherwise.
      tr
        td
          a(name='get_create_rcliff')
        td
          code get_create_rcliff
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_rcliff();
                br
                |  Returns 1 if right cliff sensor is over a surface that doesn't reflect IR
                |  (e.g., black) or over a cliff, 0 otherwise.
      tr
        td
          a(name='get_create_rcliff_amt')
        td
          code get_create_rcliff_amt
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_rcliff_amt();
                br
                |  Returns the right cliff sensor (analog) reading as a 12 bit value (0 to 4095).
      tr
        td
          a(name='get_create_rfcliff')
        td
          code get_create_rfcliff
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_rfcliff();
                br
                |  Returns 1 if right front cliff sensor is over a surface that doesn't reflect
                |  IR (e.g., black) or over a cliff, 0 otherwise.
      tr
        td
          a(name='get_create_rfcliff_amt')
        td
          code get_create_rfcliff_amt
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_rfcliff_amt();
                br
                |  Returns the right front cliff sensor (analog) reading as a 12 bit value (0
                |  to 4095).
      tr
        td
          a(name='get_create_rwdrop')
        td
          code get_create_rwdrop
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_rlwdrop();
                br
                |  Returns 1 if right wheel has dropped, 0 otherwise.
      tr
        td
          a(name='get_create_vwall')
        td
          code get_create_vwall
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_vwall();
                br
                |  Returns 1 if an iRobot virtual wall beacon is detected, 0 otherwise.
      tr
        td
          a(name='get_create_wall')
        td
          code get_create_wall
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_wall();
                br
                |  Returns 1 if a wall is detected by the right facing wall sensor, 0 otherwise.
                |  There is no left facing wall sensor.
      tr
        td
          a(name='get_create_wall_amt')
        td
          code get_create_wall_amt
          |  [Category: Create Sensor Function]
          dl
            dd
              dd
                | Format: 
                code int get_create_wall_amt();
                br
                |  Returns the current wall sensor (analog) reading as a 12 bit value (0 to
                |  4095).
      // Create battery functions
      a(name='Create_battery')
      h4 Create Battery Functions
      table
        tbody
          tr
            td
              a(name='get_create_battery_capacity')
            td
              code get_create_battery_capacity
              |  [Category: Create Sensor Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_battery_capacity();
                    br
                    |  Returns the battery capacity in mAh. This function is seldom used in
                    |  practice.
          tr
            td
              a(name='get_create_battery_charge')
            td
              code get_create_battery_charge
              |  [Category: Create Sensor Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_battery_charge();
                    br
                    |  Returns the battery charge in mAh.
          tr
            td
              a(name='get_create_battery_charging_state')
            td
              code get_create_battery_charging_state
              |  [Category: Create Sensor Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_charging_state();
                    br
                    |  0-not charging; 1-recondition charging; 2-full charging; 3-trickle charging;
                    |  4-waiting; 5-charge fault. This function is seldom used in practice.
          tr
            td
              a(name='get_create_battery_current')
            td
              code get_create_battery_current
              |  [Category: Create Sensor Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_battery_current();
                    br
                    |  Returns the current flow in mA.
          tr
            td
              a(name='get_create_battery_temp')
            td
              code get_create_battery_temp
              |  [Category: Create Sensor Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_battery_temp();
                    br
                    |  Returns the battery temperature in degrees C.
          tr
            td
              a(name='get_create_battery_voltage')
            td
              code get_create_battery_voltage
              |  [Category: Create Sensor Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_battery_voltage();
                    br
                    |  Returns the battery voltage in mV.
      // Create Built In Scripts
      a(name='Create_built_ins')
      h4 Create Built-in Script Functions
      table
        tbody
          tr
            td
              a(name='create_create_spot')
            td
              code create_spot 
              |  [Category: Create Built In Script]
              dl
                dd
                  | Format: 
                  code void  create_spot();
                  br
                  |  Simulates a Roomba doing a spot clean.
          tr
            td
              a(name='create_cover')
            td
              code create_cover 
              |  [Category: Create Function]
              dl
                dd
                  | Format: 
                  code void  create_cover();
                  br
                  |  Simulates a Roomba covering a room.
          tr
            td
              a(name='create_demo')
            td
              code create_demo 
              |  [Category: Create Function]
              dl
                dd
                  | Format: 
                  code
                    | void  create_demo(int  d);
                  br
                  |  Runs built in demos (see (
                  a(href='http://www.irobot.com/filelibrary/pdfs/hrd/create/Create%20Open%20Interface_v2.pdf') Create Open Interface Manual
                  | ).
          tr
            td
              a(name='create_cover_dock')
            td
              code create_cover_dock 
              |  [Category: Create Function]
              dl
                dd
                  | Format: 
                  code void create_cover_dock();
                  br
                  |  Create roams around until its IR detects an iRobot IR docking station and
                  |  then attempts to dock for recharging.
      // Create music functions
      a(name='Music_LED_functions')
      h4 Create LED and Music Functions
      table
        tbody
          tr
            td
              a(name='create_advance_led')
            td
              code create_advance_led 
              |  [Category: Create Music/LED Function]
              dl
                dd
                  | Format: 
                  code
                    | void create_advance_led(int on);
                  br
                  |  The value 1 causes the Advance LED light ( 
                  code &gt;&gt;
                  | |) to turn on,
                  |  0 to turn it off.
          tr
            td
              a(name='create_play_led')
            td
              code create_play_led 
              |  [Category: Create Music/LED Function]
              dl
                dd
                  | Format: 
                  code
                    | void create_play_led(int on);
                  br
                  |  The value 1 causes the Play LED (&gt;) to turn on, 0 to turn it off.
          tr
            td
              a(name='create_play_song')
            td
              code create_play_song 
              |  [Category: Create Music/LED Function]
              dl
                dd
                  | Format: 
                  code
                    | void create_play_song(int num);
                  br
                  |  Plays the specified song that has been loaded onto the Create.
          tr
            td
              a(name='create_power_led')
            td
              code create_power_led 
              |  [Category: Create Music/LED Function]
              dl
                dd
                  | Format: 
                  code
                    | void create_power_led(int color, int brightness);
                  br
                  |  The value 0 causes the I/O power LED to turn red, 255 to turn green. Brightness
                  |  ranges from 0 to 255 with 0 representing off.
          tr
            td
              a(name='get_create_song_number')
            td
              code get_create_song_number
              |  [Category: Create Music/LED Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_song_number();
                    br
                    |  Returns the number of the song currently selected (0 to 15).
          tr
            td
              a(name='get_create_song_playing')
            td
              code get_create_song_playing
              |  [Category: Create Music/LED Function]
              dl
                dd
                  dd
                    | Format: 
                    code int get_create_song_playing();
                    br
                    |  Returns 1 if a song is playing, 0 otherwise.
          tr
            td
              a(name='create_load_song')
            td
              code create_load_song 
              |  [Category: Create Music/LED Function]
              dl
                dd
                  | Format: 
                  code
                    | void create_load_song(int num);
                  br
                  |  Loads a song from an internal 16 by 33 working array of integers to the
                  |  Create, where the first column for each song is the number of notes (max
                  |  is 16). The remaining columns alternate between pitch and duration. See
                  |  (
                  a(href='http://www.irobot.com/filelibrary/pdfs/hrd/create/Create%20Open%20Interface_v2.pdf') Create Open Interface Manual
                  |  for details.
      .Indent
        h4 Example program for using the KIPR Robot Controller to control a Create module
        a(name='MoveCreate')
        pre
          code.language-clike
            | /* This is a program to make the iRobot Create drive in a circle with a radius of 0.25 meters at a speed of 200 mm/sec for 10 seconds, displaying the distance traveled around the circle and the angle that the turn covered */
            | int main()
            | {
            |     printf(&quot;connecting to Create\n&quot;);
            |     create_connect();
            |     set_create_distance(0); // reset the cumulative distance traveled
            |     set_create_total_angle(0); // reset the cumulative angle turned through
            |     create_drive(200, 250); // start move in an arc
            |     msleep(10000); // sleep for 10 seconds and stop
            |     create_stop();
            |     printf(&quot;\nResults:\n&quot;);
            |     printf(&quot;  distance = %d mm\n&quot;, get_create_distance(0.1));
            |     printf(&quot;  angle = %d degrees\n&quot;, get_create_total_angle(0.1));
            |     printf(&quot;\ndisconnecting from Create\n&quot;);
            |     create_disconnect();
            | }
      .Indent
        a(name='Create_script_example')
        h4 Example Create script definition using the KIPR Robot Controller
        p
          | The iRobot Create has several built in scripts, mostly to serve the needs of its
          | cousin, the iRobot Roomba. The Open Interface provides byte code commands for running
          | these. It also has a byte code command for loading a user defined script onto the
          | iRobot Create along with a byte code command to start it running. The user defined
          | script remains available until the iRobot Create is power cycled.
        p
          | Unlike high level languages, scripts for the iRobot Create have no provision for
          | flow of control commands such as if and while, but can use commands to wait for
          | an elapsed time, or for a specified distance or angle to be reached, or for an
          | event such as a bump (wait commands are not available except within scripts).
        p Memory for storing a user defined script is limited to 100 bytes.
        p
          | In this example, a function is used to download a sequence of byte commands to the
          | iRobot Create to load a script. The example script is designed to cause the Create
          | to move 1/2 meter at 500 mm/sec (uninterruptible). The script definition follows
          | the first two bytes sent to the Create (byte command 152, and a byte whose numeric
          | value gives the number of bytes that follow). Note that the number of bytes for
          | the script is just the count of the 
          code create_write_byte
          |  function calls
          |  used after the first two. See the 
          a(href='http://www.irobot.com/filelibrary/pdfs/hrd/create/Create%20Open%20Interface_v2.pdf') Create Open Interface manual
          |  for information on the byte commands.
        a(name='CreateScriptExample')
        pre
          code.language-clike
            | #define RUN_SCRIPT create_write_byte(153) // macro to run the currently loaded script
            | void make_drive_script(int dist, int speed) {
            |    create_write_byte(152);        // specifies start of script definition
            |    create_write_byte(13);         // specifies number of bytes to follow,(defining the script)
            |    create_write_byte(137);        // drive command (speed and turn radius in next 4 bytes)
            |    create_write_byte(speed &gt;&gt; 8); // send speed high byte (bits 8-15 shifted to 0-7)
            |    create_write_byte(speed);      // send speed low byte
            |    create_write_byte(128);        // send hex 80
            |    create_write_byte(0);          // send hex 00 (special case: turn radius hex 8000 or 7FFF is straight)
            |    create_write_byte(156);        // wait for distance done (in mm)
            |    create_write_byte(dist &gt;&gt; 8);  // send dist high byte
            |    create_write_byte(dist);       // send dist low byte
            |    create_write_byte(137);        // stop move by changing speed and radius to 0
            |    create_write_byte(0);          // send high byte (0 speed)
            |    create_write_byte(0);          // send low byte (0 speed)
            |    create_write_byte(0);          // null turn radius
            |    create_write_byte(0);          // null turn radius
            |    // end of script (13 bytes)
            | }
            | int main()
            | {
            |    // program to load and test the above script
            |    create_connect();
            |    set_create_distance(0);
            |    set_create_total_angle(0);
            |    make_drive_script(500, 500); // script to move 0.5m at 500 mm/sec
            |    msleep(500); // give serial connection some time
            |    RUN_SCRIPT;
            |    msleep(2000); // allow time for the script to finish (+ some extra)
            |    printf(&quot;  distance traveled = %d mm\n&quot;, get_create_distance());
            |    printf(&quot;  angle turned = %d degrees\n&quot;, get_create_total_angle());
            |    create_disconnect();
            | }
      // Functions Categorized
      a(name='FunctionsCategorized')
      h3 Categorized Function List (cross-linked)
      |  Each function listed is provided with a cross link to its library description.
      .indent
        a(name='CategoryBotball')
        h4 Botball
        code
          table
            tbody
              tr
                td
                  ul
                    li
                      | void run_for(double delay, &lt;
                      em function_name
                      | &gt;);  [
                      a(href='#run_for') §
                      | ]
                    li
                      | void shut_down_in(double delay);  [
                      a(href='#Botball') §
                      | ]
                    | 	  &lt;li&gt;&lt;font class='CVariable'&gt;int&lt;/font&gt; target_cha_in_chb(&lt;font class='CVariable'&gt;int&lt;/font&gt; cha, &lt;font class='CVariable'&gt;int&lt;/font&gt; chb, &lt;font class='CVariable'&gt;int&lt;/font&gt; *x, &lt;font class='CVariable'&gt;int&lt;/font&gt; *y)&lt;/li&gt;
                    li
                      | void wait_for_light(int light_port_);  [
                      a(href='#Botball') §
                      | ]
        a(name='CategoryCreate')
        h4 Create
        table
          tbody
            tr
              td(alignment='top')
                ul
                  b Serial Interface
                  code
                    li
                      | void create_clear_serial_buffer(); [
                      a(href='#create_clear_serial_buffer') §
                      | ]
                    li
                      | int create_connect(); [
                      a(href='#create_connect') §
                      | ]
                    li
                      | void  create_disconnect(); [
                      a(href='#create_disconnect') §
                      | ]
                    li
                      | int create_read_block(
                      |                                                   char *data,
                      |                                                   int count); [
                      a(href='#create_read_block') §
                      | ]
                    li
                      | void create_write_byte(
                      |                                                   char byte); [
                      a(href='#create_write_byte') §
                      | ]
                    li
                      | void  create_full(); [
                      a(href='#create_full') §
                      | ]
                    li
                      | void  create_start(); [
                      a(href='#create_start') §
                      | ]
                    li
                      | void  create_passive(); [
                      a(href='#create_passive') §
                      | ]
                    li
                      | void create_safe(); [
                      a(href='#create_safe') §
                      | ]
                    li
                      | int get_create_mode(); [
                      a(href='#get_create_mode') §
                      | ]
                  b Movement
                  code
                    li
                      | void create_drive(
                      |                                                   int speed,
                      |                                                   int radius); [
                      a(href='#create_drive') §
                      | ]
                    li
                      | void create_drive_direct(
                      |                                                   int r_speed,
                      |                                                   int l_speed); [
                      a(href='#create_drive_direct') §
                      | ]
                    li
                      | void create_drive_straight(
                      |                                                   int speed); [
                      a(href='#create_drive_straight') §
                      | ]
                    li
                      | void create_spin_CCW(
                      |                                                   int speed); [
                      a(href='#create_spin_CCW') §
                      | ]
                    li
                      | void create_spin_CW(
                      |                                                   int speed); [
                      a(href='#create_spin_CW') §
                      | ]
                    li
                      | void create_stop(); [
                      a(href='#create_stop') §
                      | ]
                    li
                      | int get_create_distance(); [
                      a(href='#get_create_distance') §
                      | ]
                    li
                      | int get_create_normalized_angle(); [
                      a(href='#get_create_normalized_angle') §
                      | ]
                    li
                      | int get_create_overcurrents(); [
                      a(href='#get_create_overcurrents') §
                      | ]
                    li
                      | int get_create_requested_left_velocity(); [
                      a(href='#get_create_requested_left_velocity') §
                      | ]
                    li
                      | int get_create_requested_radius(); [
                      a(href='#get_create_requested_radius') §
                      | ]
                    li
                      | int get_create_requested_right_velocity(); [
                      a(href='#get_create_requested_right_velocity') §
                      | ]
                    li
                      | int get_create_requested_velocity(); [
                      a(href='#get_create_requested_velocity') §
                      | ]
                    li
                      | int get_create_total_angle(); [
                      a(href='#get_create_total_angle') §
                      | ]
                    li
                      | void set_create_distance(
                      |                                                   int dist); [
                      a(href='#set_create_distance') §
                      | ]
                    li
                      | void set_create_normalized_angle(
                      |                                                   int angle); [
                      a(href='#set_create_normalized_angle') §
                      | ]
                    li
                      | void set_create_total_angle(
                      |                                                   int angle); [
                      a(href='#set_create_total_angle') §
                      | ]
                  b Battery
                  code
                    li
                      | int get_create_battery_capacity(); [
                      a(href='#get_create_battery_capacity') §
                      | ]
                    li
                      | int get_create_battery_charge(); [
                      a(href='#get_create_battery_charge') §
                      | ]
                    li
                      | int get_create_charging_state(); [
                      a(href='#get_create_charging_state') §
                      | ]
                    li
                      | int get_create_battery_current(); [
                      a(href='#get_create_battery_current') §
                      | ]
                    li
                      | int get_create_battery_temp(); [
                      a(href='#get_create_battery_temp') §
                      | ]
                    li
                      | int get_create_battery_voltage(); [
                      a(href='#get_create_battery_voltage') §
                      | ]
              td
                ul
                  code
                  b Sensors
                  code
                    li
                      | int get_create_advance_button(); [
                      a(href='#get_create_advance_button') §
                      | ]
                    li
                      | int get_create_bay_DI(); [
                      a(href='#get_create_bay_DI') §
                      | ]
                    li
                      | int get_create_bay_AI(); [
                      a(href='#get_create_bay_AI') §
                      | ]
                    li
                      | int get_create_cwdrop(); [
                      a(href='#get_create_cwdrop') §
                      | ]
                    li
                      | int get_create_infrared(); [
                      a(href='#get_create_infrared') §
                      | ]
                    li
                      | int get_create_lbump(); [
                      a(href='#get_create_lbump') §
                      | ]
                    li
                      | int get_create_lcliff(); [
                      a(href='#get_create_lcliff') §
                      | ]
                    li
                      | int get_create_lcliff_amt(); [
                      a(href='#get_create_lcliff_amt') §
                      | ]
                    li
                      | int get_create_lfcliff(); [
                      a(href='#get_create_lfcliff') §
                      | ]
                    li
                      | int get_create_lfcliff_amt(); [
                      a(href='#get_create_lfcliff_amt') §
                      | ]
                    li
                      | int get_create_lwdrop(); [
                      a(href='#get_create_lwdrop') §
                      | ]
                    li
                      | int get_create_number_of_stream_packets(); [
                      a(href='#get_create_number_of_stream_packets') §
                      | ]
                    li
                      | int get_create_play_button(); [
                      a(href='#get_create_play_button') §
                      | ]
                    li
                      | int get_create_rbump(); [
                      a(href='#get_create_rbump') §
                      | ]
                    li
                      | int get_create_rcliff(); [
                      a(href='#get_create_rcliff') §
                      | ]
                    li
                      | int get_create_rcliff_amt(); [
                      a(href='#get_create_rcliff_amt') §
                      | ]
                    li
                      | int get_create_rfcliff(); [
                      a(href='#get_create_rfcliff') §
                      | ]
                    li
                      | int get_create_rfcliff_amt(); [
                      a(href='#get_create_rfcliff_amt') §
                      | ]
                    li
                      | int get_create_rlwdrop(); [
                      a(href='#get_create_rlwdrop') §
                      | ]
                    li
                      | int get_create_vwall(); [
                      a(href='#get_create_vwall') §
                      | ]
                    li
                      | int get_create_wall(); [
                      a(href='#get_create_wall') §
                      | ]
                    li
                      | int get_create_wall_amt(); [
                      a(href='#get_create_wall_amt') §
                      | ]
                  b Built in Scripts
                  code
                    li
                      | void  create_spot(); [
                      a(href='#create_spot') §
                      | ]
                    li
                      | void  create_cover(); [
                      a(href='#create_cover') §
                      | ]
                    li
                      | void  create_demo(
                      |                                                   int  d); [
                      a(href='#create_demo') §
                      | ]
                    li
                      | void create_cover_dock(); [
                      a(href='#create_cover_dock') §
                      | ]
                  b LEDs and Music
                  code
                    li
                      | void create_advance_led(
                      |                                                   int on); [
                      a(href='#create_advance_led') §
                      | ]
                    li
                      | int get_create_song_number(); [
                      a(href='#get_create_song_number') §
                      | ]
                    li
                      | int get_create_song_playing(); [
                      a(href='#get_create_song_playing') §
                      | ]
                    li
                      | void create_load_song(
                      |                                                   int num); [
                      a(href='#create_load_song') §
                      | ]
                    li
                      | void create_play_led(
                      |                                                   int on); [
                      a(href='#create_play_led') §
                      | ]
                    li
                      | void create_play_song(
                      |                                                   int num); [
                      a(href='#create_play_song') §
                      | ]
                    li
                      | void create_power_led(
                      |                                                   int color, int brightness); [
                      a(href='#create_power_led') §
                      | ]
        a(name='CategoryGraphics')
        h4 Graphics
        table
          tbody
            tr
              td
                ul
                  code
                    li
                      | int graphics_open(int width, int height);  [
                      a(href='#graphics_open') §
                      | ]
                    li
                      | void graphics_close();  [
                      a(href='#graphics_close') §
                      | ]
                    li
                      | void graphics_update();  [
                      a(href='#graphics_update') §
                      | ]
                    li
                      | void graphics_clear();  [
                      a(href='#graphics_clear') §
                      | ]
                    li
                      | void graphics_fill(int r, int g, int b);  [
                      a(href='#graphics_fill') §
                      | ]
                    li
                      | void graphics_pixel(int x, int y, int r, int g, int b);  [
                      a(href='graphics_pixel') §
                      | ]
                    li
                      | void graphics_line(int x1, int y1, int x2, int y2, int r, int g, int b);  [
                      a(href='#graphics_line') §
                      | ]
                    li
                      | void graphics_circle(int cx, int cy, int radius, int r, int g, int b);  [
                      a(href='#graphics_circle') §
                      | ]
                    li
                      | void graphics_circle_fill(int cx, int cy, int radius, int r, int g, int b);  [
                      a(href='#graphics_circle_fill') §
                      | ]
                    li
                      | void graphics_rectangle(int x1, int y1, int x2, int y2, int r, int g, int b);  [
                      a(href='#graphics_rectangle') §
                      | ]
                    li
                      | void graphics_rectangle_fill(int x1, int y1, int x2, int y2, int r, int g, int b);  [
                      a(href='#graphics_rectangle_fill') §
                      | ]
                    li
                      | void graphics_triangle(int x1, int y1, int x2, int y2, int x3, int y3, int r, int g, int b);  [
                      a(href='graphics_triangle') §
                      | ]
                    li
                      | void graphics_triangle_fill(int x1, int y1, int x2, int y2, int x3, int y3, int r, int g, int b);  [
                      a(href='graphics_triangle_fill') §
                      | ]
                    li
                      | int get_mouse_position(int *x, int *y);  [
                      a(href='#get_mouse_position') §
                      | ]
                    li
                      | int get_mouse_left_button();  [
                      a(href='#get_mouse_left_button') §
                      | ]
        a(name='CategoryMath')
        h4 Math
        table
          tbody
            tr
              td
                ul
                  code
                    li
                      | double atan(double angle);  [
                      a(href='#atan') §
                      | ]
                    li
                      | double cos(double angle);  [
                      a(href='#cos') §
                      | ]
                    li
                      | double exp(double num);  [
                      a(href='#exp') §
                      | ]
                    li
                      | double exp10(double num);  [
                      a(href='#exp10') §
                      | ]
                    li
                      | double log(double num);  [
                      a(href='#log') §
                      | ]
                    li
                      | int log10(double num);  [
                      a(href='#log10') §
                      | ]
                    li
                      | double pow(double x, double y);  [
                      a(href='#pow') §
                      | ]
                    li
                      | int rand(int m);  [
                      a(href='#rand') §
                      | ]
                    li
                      | double sin(double angle);  [
                      a(href='#sin') §
                      | ]
                    li
                      | double sqrt(double num);  [
                      a(href='#sqrt') §
                      | ]
                    li
                      | void srand(int s);  [
                      a(href='#srand') §
                      | ]
                    li
                      | double tan(double angle);  [
                      a(href='#tan') §
                      | ]
        a(name='CategoryMotors')
        h4 Motors
        table
          tbody
            tr
              td
                ul
                  code
                    li
                      | void alloff();  [
                      a(href='#alloff') §
                      | ]
                    li
                      | void ao();  [
                      a(href='#ao') §
                      | ]
                    li
                      | void bk(int m);  [
                      a(href='#bk') §
                      | ]
                    li
                      | void block_motor_done(int m);  [
                      a(href='#block_motor_done') §
                      | ]
                    li
                      | void bmd(int m);  [
                      a(href='#bmd') §
                      | ]
                    li
                      | int get_motor_done(int m);  [
                      a(href='#get_motor_done') §
                      | ]
                    li
                      | void clear_motor_position_counter(int motor_nbr);  [
                      a(href='#clear_motor_position_counter') §
                      | ]
                    li
                      | void fd(int m);  [
                      a(href='#fd') §
                      | ]
                    li
                      | void freeze(int m);  [
                      a(href='#freeze') §
                      | ]
                    li
                      | int get_motor_done(int m);  [
                      a(href='#get_motor_done') §
                      | ]
                    li
                      | int get_motor_position_counter(int m);  [
                      a(href='#get_motor_position_counter') §
                      | ]
                    li
                      | int get_pid_gains(int motor, int p, int i, int d, int pd, int id, int dd);  [
                      a(href='#get_pid_gains') §
                      | ]
                    li
                      | void mav(int m, int vel);  [
                      a(href='#mav') §
                      | ]
                    li
                      | void motor(int m, int p);  [
                      a(href='#motor') §
                      | ]
                    li
                      | void move_at_velocity(int m, int vel);  [
                      a(href='#move_at_velocity') §
                      | ]
                    li
                      | void move_relative_position(int m, int speed, int pos);  [
                      a(href='#move_relative_position') §
                      | ]
                    li
                      | void move_to_position(int m, int speed, int pos);  [
                      a(href='#move_to_position') §
                      | ]
                    li
                      | void mrp(int m, int vel, int pos);  [
                      a(href='#mrp') §
                      | ]
                    li
                      | void mtp(int m, int vel, int pos);  [
                      a(href='#mtp') §
                      | ]
                    li
                      | void off(int m);  [
                      a(href='#off') §
                      | ]
                    li
                      | int set_pid_gains(int motor, int p, int i, int d, int pd, int id, int dd);  [
                      a(href='#set_pid_gains') §
                      | ]
                    li
                      | int setpwm(int m, int dutycycle);  [
                      a(href='#setpwm') §
                      | ]
        a(name='CategoryOutput')
        h4 Output
        table
          tbody
            tr
              td
                ul
                  code
                    li
                      | void beep();  [
                      a(href='#beep') §
                      | ]
                    li
                      | void console_clear();  [
                      a(href='#console_clear') §
                      | ]
                    li
                      | void display_clear();  [
                      a(href='#display_clear') §
                      | ]
                    li
                      | void display_printf(int col, int row, char s[], . . .);  [
                      a(href='#display_printf') §
                      | ]
                    li
                      | void extra_buttons_show();  [
                      a(href='#extra_buttons_show') §
                      | ]
                    li
                      | void extra_buttons_hide();  [
                      a(href='#extra_buttons_hide') §
                      | ]
                    li
                      | void set_a_button_text(char txt[]);  [
                      a(href='#set_a_button_text') §
                      | ]
                    li
                      | void set_b_button_text(char txt[]);  [
                      a(href='#set_b_button_text') §
                      | ]
                    li
                      | void set_c_button_text(char txt[]);  [
                      a(href='#set_c_button_text') §
                      | ]
                    li
                      | void set_digital_output(int port, int inout);  [
                      a(href='#set_digital_output') §
                      | ]
                    li
                      | void set_digital_value(int port, int value);  [
                      a(href='#set_digital_value') §
                      | ]
                    li
                      | void set_x_button_text(char txt[]);  [
                      a(href='#set_x_button_text') §
                      | ]
                    li
                      | void set_y_button_text(char txt[]);  [
                      a(href='#set_y_button_text') §
                      | ]
                    li
                      | void set_z_button_text(char txt[]);  [
                      a(href='#set_z_button_text') §
                      | ]
        a(name='CategoryThreads')
        h4 Threads
        table
          tbody
            tr
              td
                ul
                  code
                    li
                      | thread thread_create(&lt;
                      em function_name
                      | &gt;);  [
                      a(href='#thread_create') §
                      | ]
                    li
                      | void thread_destroy(&lt;
                      em thread id
                      | &gt;&gt;);  [
                      a(href='#thread_destroy') §
                      | ]
                    li
                      | void thread_start(&lt;
                      em thread id
                      | &gt;);  [
                      a(href='#thread_start') §
                      | ]
                    li
                      | void thread_wait(&lt;
                      em thread id
                      | &gt;);  [
                      a(href='#thread_wait') §
                      | ]
                    li
                      | void run_for(double sec, void &lt;
                      em function_name
                      | &gt;);  [
                      a(href='#run_for') §
                      | ]
        a(name='CategorySensors')
        h4 Sensors
        table
          tbody
            tr
              td
                ul
                  code
                    li
                      | int a_button();  [
                      a(href='#a_button') §
                      | ]
                    li
                      | int a_button_clicked();  [
                      a(href='#a_button_clicked') §
                      | ]
                    li
                      | int accel_x();  [
                      a(href='#accel_x') §
                      | ]
                    li
                      | int accel_y();  [
                      a(href='#accel_y') §
                      | ]
                    li
                      | int accel_z();  [
                      a(href='#accel_z') §
                      | ]
                    li
                      | int analog(int p);  [
                      a(href='#analog') §
                      | ]
                    li
                      | int analog_et(int p);  [
                      a(href='#analog_et') §
                      | ]
                    li
                      | int analog8(int p);  [
                      a(href='#analog8') §
                      | ]
                    li
                      | int analog10(int p);  [
                      a(href='#analog10') §
                      | ]
                    li
                      | int any_button();  [
                      a(href='#any_button') §
                      | ]
                    li
                      | int b_button();  [
                      a(href='#b_button') §
                      | ]
                    li
                      | int b_button_clicked();  [
                      a(href='#b_button_clicked') §
                      | ]
                    li
                      | int c_button();  [
                      a(href='#c_button') §
                      | ]
                    li
                      | int c_button_clicked();  [
                      a(href='#c_button_clicked') §
                      | ]
                    li
                      | int digital(int p);  [
                      a(href='#digital') §
                      | ]
                    li
                      | int get_analog_pullup(int port);  [
                      a(href='#get_analog_pullup') §
                      | ]
                    li
                      | int get_digital_pullup(int port);  [
                      a(href='#get_digital_pullup') §
                      | ]
                    li
                      | double power_level();  [
                      a(href='#power_level') §
                      | ]
                    li
                      | int get_extra_buttons_visible();  [
                      a(href='#get_extra_buttons_visible') §
                      | ]
                    li
                      | void set_analog_pullup(int port, int pullupTF);  [
                      a(href='#set_analog_pullup') §
                      | ]
                    li
                      | void set_digital_pullup(int port, int pullupTF);  [
                      a(href='#set_digital_pullup') §
                      | ]
                    li
                      | int side_button();  [
                      a(href='#side_button') §
                      | ]
                    li
                      | int side_button_clicked();  [
                      a(href='#side_button_clicked') §
                      | ]
                    li
                      | int x_button();  [
                      a(href='#x_button') §
                      | ]
                    li
                      | int x_button_clicked();  [
                      a(href='#x_button_clicked') §
                      | ]
                    li
                      | int y_button();  [
                      a(href='#y_button') §
                      | ]
                    li
                      | int y_button_clicked();  [
                      a(href='#y_button_clicked') §
                      | ]
                    li
                      | int z_button();  [
                      a(href='#z_button') §
                      | ]
                    li
                      | int z_button_clicked();  [
                      a(href='#z_button_clicked') §
                      | ]
        a(name='CategoryServos')
        h4 Servos
        table
          tbody
            tr
              td
                ul
                  code
                    li
                      | void disable_servo(int p);  [
                      a(href='#disable_servo') §
                      | ]
                    li
                      | void disable_servos();  [
                      a(href='#disable_servos') §
                      | ]
                    li
                      | void enable_servo(int p);  [
                      a(href='#enable_servo') §
                      | ]
                    li
                      | void enable_servos();  [
                      a(href='#enable_servos') §
                      | ]
                    li
                      | int get_servo_enabled(int srv);  [
                      a(href='#get_servo_enabled') §
                      | ]
                    li
                      | int get_servo_position(int srv);  [
                      a(href='#get_servo_position') §
                      | ]
                    li
                      | int set_servo_position(int srv, int pos);  [
                      a(href='#set_servo_position') §
                      | ]
        a(name='CategoryTime')
        h4 Time
        table
          tbody
            tr
              td
                ul
                  code
                    li
                      | void msleep(int msec);  [
                      a(href='#msleep') §
                      | ]
                    li
                      | double seconds();  [
                      a(href='#seconds') §
                      | ]
        a(name='CategoryVision')
        h4 Vision
        table
          tbody
            tr
              td
                ul
                  code
                    li
                      | void camera_close();  [
                      a(href='#camera_close') §
                      | ]
                    li
                      | int camera_load_config(char name[]);   [
                      a(href='#camera_load_config') §
                      | ]
                    li
                      | int camera_open();  [
                      a(href='#camera_open') §
                      | ]
                    li
                      | int camera_open_at_res(int res_numb);  [
                      a(href='#camera_open_at_res') §
                      | ]
                    li
                      | int camera_open_device(int number, int res_numb);  [
                      a(href='#camera_open_device') §
                      | ]
                    li
                      | int camera_update();  [
                      a(href='#camera_update') §
                      | ]
                    li
                      | int get_channel_count();  [
                      a(href='#get_channel_count') §
                      | ]
                    li
                      | int get_object_area(int channel, int object);  [
                      a(href='#get_object_area') §
                      | ]
                    li
                      | rectangle get_object_bbox(int channel, int object);  [
                      a(href='#get_object_bbox') §
                      | ]
                    li
                      | point2 get_object_center(int channel, int object);  [
                      a(href='#get_object_center') §
                      | ]
                    li
                      | point2 get_object_centroid(int channel, int object);  [
                      a(href='#get_object_centroid') §
                      | ]
                    li
                      | int get_code_num(int channel, int object);  [
                      a(href='#get_code_num') §
                      | ]
                    li
                      | double get_object_confidence(int channel, int object);  [
                      a(href='#get_object_confidence') §
                      | ]
                    li
                      | int get_object_count(int channel);  [
                      a(href='#get_object_count') §
                      | ]
                    li
                      | char *get_object_data(int channel, int object);  [
                      a(href='#get_object_data') §
                      | ]
                    li
                      | int get_object_data_length(int channel, int object);  [
                      a(href='#get_object_data_length') §
                      | ]
        a(name='CategoryDepth')
        h4 Depth
        table
          tbody
            tr
              td
                ul
                  code
                    li
                      | void depth_close();  [
                      a(href='#depth_close') §
                      | ]
                    li
                      | int depth_open();  [
                      a(href='#depth_open') §
                      | ]
                    li
                      | int depth_update();  [
                      a(href='#depth_update') §
                      | ]
                    li
                      | int get_depth_value(int row, int col);  [
                      a(href='#get_depth_value') §
                      | ]
                    li
                      | point3 get_depth_world_point(int row, int col);  [
                      a(href='#get_depth_world_point') §
                      | ]
                    li
                      | int get_depth_world_point_x(int row, int col);  [
                      a(href='#get_depth_world_point_x') §
                      | ]
                    li
                      | int get_depth_world_point_y(int row, int col);  [
                      a(href='#get_depth_world_point_y') §
                      | ]
                    li
                      | int get_depth_world_point_z(int row, int col);  [
                      a(href='#get_depth_world_point_z') §
                      | ]
      // Botball
      a(name='Botball')
      h3 Botball
      p
        | Three functions are included in the KIPR Robot Controller Library to assist programmers
        | in writing programs that meet the basic requirements for a Botball game:
      ul
        li
          code wait_for_light(&lt;
          i port_num
          code &gt;)
          | , a function for
          |  ensuring the robot doesn't begin operating until the starting light comes on.
        li
          code shut_down_in(&lt;
          i time
          code &gt;)
          | , a function which ensures
          |  the robot stops operating within the time limits for a Botball game.
        li
          code run_for(&lt;
          i time
          code &gt;, &lt;
          i func_name
          code &gt;)
          | ,
          |  which is used to start a function, but not allow it to run beyond a specified
          |  time.
      p For the typical Botball program, the first executable statement will be
      .Indent
        code wait_for_light(&lt;
        i port_num
        code &gt;);
      p
        | If there are any other set up routines being used, then usually 
        code wait_for_light
        |  will immediately follow them. 
        code wait_for_light
        |  takes the robot operator
        |  through a process of using the starting light to set calibration values for the
        |  IR light sensor plugged into the specified port. The purpose is to set two values,
        |  one to check the sensor reading with light off and the other with light on. The
        |  difference between the two values has to be large enough for the sensor to determine
        |  if the light is off or on. If the sensor is suitably shielded and is positioned
        |  so that a successful calibration is achieved, 
        code wait_for_light
        |  calls
        |  for 'hands off' and blocks further execution until the light is turned on. When
        |  'light on' is detected by the sensor, the program resumes and runs the robot according
        |  to program design. If problems occur in the calibration process, the user is notifited
        |  and the process repeats after a brief pause.
      |  The first statement in a Botball programm following 
      code wait_for_light
      |  is
      |  usually a call to the Botball function
      .Indent
        code shut_down_in(&lt;
        i time
        code &gt;);
      p
        | which will shutdown all motors and the Create module (if being used) once the specified
        | time has expired, then terminate the program.
      p
        | In contrast to completely killing the program using 
        code shut_down_in
        | , when
        |  program design requires performing some activity after the robot has completed its
        |  primary task, the function
      .Indent
        code run_for(&lt;
        i time
        code &gt;, &lt;
        i func_name
        code &gt;);
      p
        | can be used to execute the specified function, halting it once the specified time has
        | elapsed (an action that occurs only if the function is still running). The basic
        | idea is to separate the primary task out of 
        code main
        |  and write it as a function
        |  so it can be run using 
        code run_for
        | . One simple instance where this is useful
        |  is at game end when a servo needs to remain on to maintain its position. The necessary
        |  command can be executed after using 
        code run_for
        |  to run the primary task.
        |  This approach puts the burden back on the programmer to make sure all other servo
        |  activity is halted and all drive motors and the Create module are stopped within
        |  the game's time limit.
      //
        &lt;p&gt; The function &lt;/p&gt;
        &lt;div class='Indent'&gt; &lt;code&gt;target_cha_in_chb(&lt;&lt;/code&gt;cha &lt;code&gt;&gt;, &lt;&lt;/code&gt;chb &lt;code&gt;&gt;, &lt;*&lt;/code&gt;x &lt;code&gt;&gt;, &lt;*&lt;/code&gt;y &lt;code&gt;&gt;);&lt;/code&gt;&lt;/div&gt;
        &lt;p&gt;uses the vision system to look for a color target where the color described in the color channel a is completely
        surrounded by the color described by the color channel b. The addresses of to two integer variables, x & y, are also passed. If a suitable target is found in the current frame (this function does NOT perform a track_update() call) then the function returns 1 and the contents of the two variables x and y are changed to match the image pixel location of the centroid of the color blob associated with the inside of the target. If no target with the right colors is in view, then 0 is returned and x and y are not modified. If more than one target is in view, the one with the larger inner blob (as seen by the camera) is the one whose coordinates are returned. An example of use, where the inner color is on channel 3 and the outer on 2, might be:&lt;/p&gt;
        &lt;div class='Indent'&gt; &lt;code&gt;&lt;font class='CVariable'&gt;int&lt;/font&gt; x, y;&lt;br&gt;
        &lt;font class='CVariable'&gt;if&lt;/font&gt; (target_cha_in_chb(3,2,&x,&y)==1) printf(&lt;font class='Quote'&gt;'Target found at (%d,%d)\n'&lt;/font&gt;, x, y);&lt;/code&gt;&lt;/div&gt;
      p The library functions for Botball are:
      table(style='background-color: #f0f0f0;')
        tr
          td
            br
            .Indent
              code
                a(name='run_forx')
                | run_for(&lt;
              i time
              code &gt;, &lt;
              i function_name
              code &gt;);
              dl
                dd
                  | Runs the specified function and tracks its execution until either the function
                  | finishes or the specified number of seconds has elapsed. If the specified
                  | number of seconds has elapsed, 
                  code run_for
                  |  terminates execution
                  |  for the function.
              code
                a(name='shut_down_inx')
                | shut_down_in(&lt;
              i time
              code &gt;);
              dl
                dd
                  | Starts a timing routine that will end program execution, turn off all motors,
                  | and issue a stop command to the Create when the specified amount of time
                  | has elapsed.
              //
                no longer in code library
                &lt;code&gt;&lt;a name='target_cha_in_chbx'&gt;&lt;/a&gt;target_cha_in_chb(&lt;cha&lt;/code&gt;&gt;, &lt;chb &lt;code&gt;&gt;, &lt;*&lt;/code&gt;x &lt;code&gt;&gt;, lt;*&lt;/code&gt;y &lt;code&gt;&gt;);&lt;/code&gt;
                &lt;dl&gt;&lt;dd&gt;Looks for a target consisting of a color blob on a color background, where the channel number for the inner color is &lt;code&gt;cha&lt;/code&gt; and for the surrounding surrounding background is &lt;code&gt;chb&lt;/code&gt;. If the target is found then the function returns 1, otherwise 0. If a target is found then the contents of the variables pointed to by x and y are changed to the center coordinate of the inner blob.
                &lt;/dd&gt;&lt;/dl&gt;
              code
                a(name='wait_for_lightx')
                | wait_for_light(&lt;
              i port
              code &gt;);
              dl
                dd
                  | Steps the user through a calibration procedure to establish on/off light
                  | levels for a sensor plugged in the specified port. If calibration does
                  | not provide enough discrimination between light off and light on, the program
                  | cycles for another try. If there is enough discrimination, after 'light
                  | off', the program blocks continued execution of the function until 'light
                  | on', at which point execution resumes. 
                  code wait_for_light
                  |  is normally
                  |  placed at the beginning of a program designed to operate a robot, so that
                  |  after calibration, when the light comes on the robot will start autonomously.
      .Indent
        h4 Example program for the KIPR Robot Controller using a Botball program format
        a(name='BotballFormat')
        pre
          code.language-clike
            | int main()
            | {
            |    double s;
            |    int i;
            |    /* Botball calibration: determine if light sensor can discriminate between light and dark */
            |    wait_for_light(3);  // light sensor in analog port 3
            |    /* Botball timing: limit is 120 seconds; e.g., shut_down_in(119.5); */
            |    shut_down_in(10.5); // stop execution once 10.5 seconds have elapsed
            |    /* Botball program logic would be next ... the stuff below is just to keep the program running for awhile */
            |    display_clear(); // clear display for display_printf
            |    s=seconds(); // system on time at start of run
            |    for(i=0; i&lt;15; i++) {
            |       display_printf(1,1,&quot;%d. time elapsed = %.2f     &quot;, i, seconds()-s);
            |       msleep(1000); // sleep for a second
            |    }
            |    display_printf(1,3,&quot;done&quot;);
            | }
      // Threads
      a(name='Threads')
      h3 Threads
      p
        | The term thread is short for the phrase 'thread of execution', and represents a sequence
        | of instructions to be managed by the system as it schedules processing time among
        | running processes. On a single processor machine, like the KIPR Robot Controller,
        | the instructions running in separate threads appear to be operating in parallel.
        | Each thread, once started, will continue until its process finishes or until it is
        | forcibly terminated by another process using the 
        code thread_destroy
        |  function.
        |  Each active thread gets a small amount of time in turn until all of its statements
        |  have been executed or it is forcibly terminated. If a thread's process cannot complete
        |  all of its statements before its turn is over, it is paused temporarily for the next
        |  thread to gets its share of time. This continues until all the active threads have
        |  gotten their slice of time and then thread processing repeats. The KIPR Robot Controller's
        |  processor is fast enough so that from the user's viewpoint it appears that all of
        |  the active processes are running in parallel.
      p
        | Functions running in threads can communicate with one another by reading and modifying
        | global variables. The global variables can be used as semaphores so that one process
        | can signal another when it is not in a section of code that might cause a conflict.
        | Process IDs may also be stored in global variables of type
        | thread so that one process can destroy another one's thread if that is necessary
        | program logic (think in terms of a process that is in an indefinite loop monitoring
        | sensors, so it will never finish otherwise).
      p
        | Since the operating system limits how many threads can be created, it is inadvisable
        | to create threads in a loop. Good thread management is to destroy a thread rather
        | than leaving it hanging around once it is no longer being used. Threads not destroyed
        | by program end may still count against the operating system limit when the program
        | is run again (unless of course the system has been rebooted). This may result in
        | a program which for no observable reason ceases to work properly. It is up to the
        | program to keep track of a thread it creates, and there are no means (short of rebooting)
        | to destroy a thread after the fact.
      p The library functions for controlling threads are:
      table(style='background-color: #f0f0f0;')
        tr
          td
            br
            .Indent
              code
                a(name='thread_createx')
                | thread_create(&lt;
              i function_name
              code &gt;);
              dl
                dd
                  | Creates a thread for running the specified function and returns a value of
                  | type
                  | thread, which is the thread ID to be used for running the thread
                  | as an independent process.
              code
                a(name='thread_destroyx')
                | thread_destroy(&lt;
              i thread_id
              code &gt;);
              dl
                dd
                  | Deactivates the specified thread if it is active (stopping its associated
                  | function) and destroys its thread ID.
              code
                a(name='thread_startx')
                | thread_start(&lt;
              i thread_id
              code &gt;);
              dl
                dd
                  | Activates the specified thread by running its associated process in the thread.
              code
                a(name='thread_waitx')
                | thread_wait(&lt;
              i thread_id
              code &gt;);
              dl
                dd
                  | Suspends execution of the function that calls 
                  code thread_wait
                  |  while
                  |  the specified thread remains active. It's purpose is to synchronize threads
                  |  by suspending further execution of a function until the selected active
                  |  threads have finished.
      .Indent
        h4 Example program for the KIPR Robot Controller using threads
        p
          | This example illustrates how to detect a button press even it occurs while the main
          | process is paused.
        pre
          code.language-clike
            | int flag=0; // global flag to signal when side button pressed
            | void chksens() {
            |    while (1) {
            |       if (side_button()) flag = 1;
            |       msleep(100); // check side button every 1/10th second
            |    }
            | }
            |  main() {
            |    int cnt = 0;
            |    thread tid; // thread variable for holding thread id
            |    tid = thread_create(chksens); // create a thread for chksens
            |    thread_start(tid); // start chksens running in its thread
            |    while (flag == 0) { // button press during sleep is still caught
            |       display_printf(1,2,&quot;elapsed time %d   &quot;,++cnt);
            |       msleep(1000);
            |    }
            |    thread_destroy(tid); // remove the thread
            |    display_printf(0,4,&quot;done&quot;);
            | }
      // KIPR Robot Controller Images
      a(name='LinkImages')
      h2 KIPR Robot Controller Images
      .Indent
        // digital and analog sensors
        a(name='LinkSensors')
        h3 Analog and Digital Sensor Images
        p
          | The image below is the front of the KIPR Robot Controller showing where the analog
          | and digital sensor ports are located.
        // &lt;img class='center' src='/imgs/docs/Link_sensor_ports.gif' width='70%'&gt;&lt;/img&gt;
        p.center
          br
          | Examples of digital and analog sensors used with the KIPR Robot Controller
        table.centerTable(border='1', cellpadding='5', cellspacing='0')
          tbody
            tr
              td(align='center', valign='center')
                a(href='#light_sensor')
                  br
                  img(border='0', src='/imgs/docs/LightSensor.gif', width='60%')
                  br
                  |  IR light sensor
                  br
                |  (analog)
              td(align='center', valign='center')
                a(href='#reflectance_sensors')
                  img(border='0', src='/imgs/docs/Reflectance_sensors.gif', width='60%')
                  br
                  |  IR reflectance sensors
                  br
                |  (analog)
              td(align='center', valign='center')
                a(href='#ET_sensor')
                  img(border='0', src='/imgs/docs/ET.gif', width='60%')
                  br
                  |  IR 'E.T.' Distance Sensor
                  br
                |  (floating analog)
            tr
              td(align='center', colspan='2', valign='center')
                a(href='#touch_sensors')
                  br
                  img(border='0', src='/imgs/docs/TouchSensors.gif')
                  br
                  |  Touch Sensors
                  br
                |  (digital)
              td(align='center', valign='center')
                a(href='#break_beam_sensor')
                  br
                  img(border='0', src='/imgs/docs/BreakBeam.gif')
                  br
                  |  IR 'Break Beam' Sensor
                  br
                |  (digital)
            tr
              td(align='center', valign='center')
                a(href='#analog_slider')
                  br
                  img(border='0', src='/imgs/docs/AnalogSlider.gif')
                  br
                  |  Slider sensor
                  br
                |  (analog)
              td(align='center', valign='center')
                a(href='#analog_pot')
                  br
                  img(border='0', src='/imgs/docs/AnalogPot.gif')
                  br
                  |  Potentiometer (Pot) Sensor
                  br
                |  (analog)
              td(align='center', valign='center')
                a(href='#sensors')
                  br
                  img(border='0', height='120', src='/imgs/docs/sonar.jpg', width='60')
                  br
                  |  Ultrasonic rangefinder (SONAR)
        // light_sensor
        .Indent
          a(name='light_sensor')
          h4 Infrared light sensor (analog)
          img(border='0', src='/imgs/docs/LightSensor.gif', width='40%')
          br
          ul
            li Analog sensor
            li Connect to ports 0-7
            li
              | Access with function 
              code
                a(href='#analog') analog
                | (&lt;
              i port#
              code &gt;) 
            li Low values indicate lots of Infrared
            li High values indicate low Infrared
            li
              | Sensor is somewhat directional and can be made more so using an opaque tube or Lego
              | to block out extraneous light. Sensor can be attenuated by placing paper in front.
          // Reflectance Sensors
          a(name='reflectance_sensors')
          h4 Infrared large and small reflectance sensors (analog)
          img(border='0', src='/imgs/docs/Reflectance_sensors.gif', width='30%')
          br
          ul
            li Analog sensor
            li Connect to ports 0-7
            li
              | Access with function 
              code
                a(href='#analog') analog
                | (&lt;
              i port#
              code &gt;);
            li
              | Values measure IR reflection from a surface, allowing a robot to detect surface features
              | such as a black tape line
            li
              | Dark surfaces produce high readings (low IR reflectivity) and light surfaces produce
              | low readings (high IR reflectivity)
            li
              | Proximity of sensor to surface affects the difference in readings, so can be used
              | to detect drop-offs
            li Sensor has a reflectance range of about 3 inches
          // ET_sensor
          a(name='ET_sensor')
          h4 Infrared 'E.T.' Distance Sensor (floating analog)
          img(border='0', src='/imgs/docs/ET.gif')
          br
          ul
            li
              | Floating analog sensor (pullup resistor for port must be disabled for readings to
              | be meaningful)
            li Connect to port 0-7
            li
              | Access with function 
              code
                a(href='#analog') analog_et
                | (&lt;
              i port#
              code &gt;)
              | ;
            li Low values indicate large distance
            li High values indicate distance approaching ~4 inches
            li
              | Range is 4-30 inches. Result is approximately 1/(d)^2. Objects closer than 4 inches
              | will have the same readings as those far away.
            li Sharp Electronics part number GP2D12
            li
              | Sensor shines a narrow infrared beam, and measures the angle of the beam return using
              | a position-sensitive detector (PSD):
          // touch_sensor
          a(name='touch_sensors')
          h4 Touch sensors (digital)
          img(border='0', src='/imgs/docs/TouchSensors.gif')
          br
          ul
            li Digital switch sensors
            li Connect to ports 8-15
            li
              | Access with function 
              code
                a(href='#digital') digital
                | (&lt;
              i port#
              code &gt;);
            li 1 indicates switch is closed
            li 0 indicates switch is open
            li These make good bumpers and can be used for limit switches on an actuator
          // break_beam_sensor
          a(name='break_beam_sensor')
          h4 Infrared 'Break Beam' Sensor (digital)
          img(border='0', src='/imgs/docs/image010.gif')
          br
          ul
            li Digital sensor
            li Connect to ports 8-15
            li
              | Access with function 
              code
                a(href='#digital') digital
                | (&lt;
              i port#
              code &gt;)
            li 1 indicates slot is empty
            li 0 indicates slot is blocked
            li
              | Can be used for alignment; e.g., a winch with a pin which when blocking the slot
              | indicates alignment is reached
            li
              | Can also be used for encoders, where the edge of a wheel with holes around its perimeter
              | passes through the slot, alternately breaking the beam
          // sonar_sensor
          //
            &lt;a name='sonar_sensor'&gt;&lt;/a&gt;
            &lt;h4&gt;Sonar (Ultrasonic Rangefinder)&lt;/h4&gt;
            &lt;img border='0' height='180' width='90' src='/imgs/docs/sonar.jpg'&gt;
            &lt;br&gt;
            &lt;ul&gt;
            &lt;li&gt;Timed analog sensor. Sends a 'ping' of high-pitched sound and listens for an echo&lt;/li&gt;
            &lt;li&gt;Connect to ports 0-7&lt;/li&gt;
            &lt;li&gt;Access with function &lt;font class='CFunction'&gt;&lt;a href='#analog'&gt;analog&lt;/a&gt;&lt;/font&gt;(&lt;port#&gt;) &lt;/li&gt;
            &lt;li&gt;Returned value is distance in inches to closest object in field of view&lt;/li&gt;
            &lt;li&gt;Range is approximately 10-250 inches&lt;/li&gt;
            &lt;li&gt;When first powered up, make sure there is nothing within 24
            inches (60cm) so sonar can self calibrate.
            &lt;li&gt;The sonar field of view is an approximately 30 degree teardrop:&lt;/li&gt;
            &lt;/ul&gt;
          a(name='analog_slider')
          h4 Analog slider
          img(border='0', height='66', src='/imgs/docs/AnalogSlider.gif', width='200')
          br
          ul
            li Analog sensor
            li Connect to ports 0-7
            li
              | Access with function 
              code
                a(href='#analog') analog
                | (&lt;
              i port#
              code &gt;);
            li Values range from 0 to 2047
          a(name='analog_pot')
          h4 Analog pot (potentiometer)
          img(border='0', height='128', src='/imgs/docs/AnalogPot.gif', width='100')
          br
          ul
            li Analog sensor
            li Connect to ports 0-7
            li
              | Access with function 
              code
                a(href='#analog') analog
                | (&lt;
              i port#
              code &gt;);
            li Values range from 0 to 2047
        // USB Sensors
        br
        a(name='USB_sensors')
        h3 USB Sensor Images
        p
          | USB sensors plug into one of the two USB2 ports on the back of the KIPR Robot Controller
        // &lt;img class='center' src='/imgs/docs/Link_back_view_txt.gif' width='80%'&gt;&lt;/img&gt;
        p Specialized function libraries are provided for 
        ul
          li
            | Vision (for use with a USB web camera)
          li
            | Depth analysis (for use with an ASUS Xtion)
        table.centerTable
          tbody
            tr
              td
                // &lt;img class='center' src='/imgs/docs/webcam.gif' width='50%'&gt;&lt;/img&gt;
                br
                p.center
                  | A web camera used with KIPR Robot Controller
                  br
                  |  (see the 
                  a(href='#CategoryVision') Vision Function List
                  | )
              td
                // &lt;img class='center' src='/imgs/docs/XtionDepth.gif' width='50%'&gt;&lt;/img&gt;
                br
                p.center
                  | ASUS Xtion used with KIPR Robot Controller
                  br
                  |  (see the 
                  a(href='#CategoryVision') Depth Function List
                  | )
        // DC Motors
        br
        a(name='DC_motor')
        h3 DC Motor Images
        p
          | The image below is the front of the KIPR Robot Controller showing where the DC motor
          | ports are located.
        // &lt;img class='center' src='/imgs/docs/Link_motor_ports.gif' width='80%'&gt;&lt;/img&gt;
        table.centerTable
          tbody
            tr
              td
                // &lt;img class='center' src='/imgs/docs/DC_motor.gif' width='30%'&gt;&lt;/img&gt;
                br
                p.center
                  | Example DC motor used with the KIPR Robot Controller
                  br
                  |  (modified servo - potentiometer
                  |  removed and wiring with two prong plug installed).
                  br
                  br
                  |  DC motors are controlled
                  |  using the KIPR Robot Controller 
                  a(href='#CategoryMotors') motor functions.
        // Servos
        br
        br
        a(name='Servos')
        h3 Servo Images
        p
          | The image below is the front of the KIPR Robot Controller showing where the servo ports
          | are located.
        // &lt;img class='center' src='/imgs/docs/Link_servo_ports.gif' width='80%'&gt;&lt;/img&gt;
        p.center
          br
          | Example servo motors used with the KIPR Robot Controller
          br
          |  (hobbyist servo - used
          |  as packaged by manufacturer)
        table.centerTable
          tbody
            tr
              td
                // &lt;img class='center' src='/imgs/docs/ServoMotors.gif' width=75%&gt;&lt;/img&gt;
                p.center Servo motors
              td
                // &lt;img class='center' src='/imgs/docs/ServoMotorPlug.gif' width=50%&gt;&lt;/img&gt;
                p.center Servo motor plug
        table.centerTable
          tbody
            tr
              td(colspan='2')
                br
                | Servos are controlled by using the KIPR Robot Controller 
                a(href='#CategoryServos') servo functions
                | .
      // Simulator
      a(name='Simulator')
      h3 KIPR Robot Controller Simulator
      p
        | When the KIPR Software Suite is installed, in addition to the KISS IDE, a graphical simulator
        | is installed which can be selected as a target for a project being developed using
        | the KISS IDE. The simulator provides a simulated robot and a stylized operating environment
        | for the robot, including a simulated (Botball style) starting light. For motors and
        | sensors incorporated into the simulated robot, side panels show motor and sensor response
        | values. A representation of the KIPR Robot Controller console screen is also provided
        | for display output. The simulated robot can be arbitrarily positioned in its environment
        | using keyboard entry and mouse functions, including turning the simulated light on/off.
      p
        | The simulator provides an effective means for trying out functions in the KIPR Robot
        | Controller Library and for testing small examples when learning how to use a library
        | function. More fundamentally, it provides a user friendly means for obtaining visual
        | feedback for those who are learning to program in C.
      p
        | Perhaps most importantly, the simulator provides means for testing KIPR Robot Controller
        | program code before downloading a project to a KIPR Robot Controller, speeding up the
        | process of obtaining a working program for a KIPR Robot Controller controlled robot.
        | No simulator can anticipate every variation a real robot might encounter in performing
        | its mission, but in general, simulation serves to limit the amount of program tweaking
        | required to attain acceptable performance on the actual robot.
      a(name='Running_a_Project')
      h4 Running a Project
      p
        | If a program's action does not involve the KIPR Robot Controller Library functions, its
        | target can be 'My Computer'. When KIPR Robot Controller Library functions are being
        | used, the target needs to be 'My KIPR Robot Controller Simulator' or an attached KIPR
        | Robot Controller. If no KIPR Robot Controller is attached, the simulator can be used
        | to see what a program does.
      ul
        li
          | If the project is the only project open in the IDE, it is automatically the 
          i active project.
        li
          | If there is more than one project open in the IDE, clicking on the project name in
          | the side panel will make it the active project.
        li
          | Clicking on either the 
          i Compile
          |  or the 
          i Run
          |  button in the IDE will send
          |  the active project to the target for compilation, launching the simulator if it is
          |  the selected target (and not already running). If there are any compilation errors
          |  they are reported back to the IDE to be displayed in its results panel. If the 
          i Run
          |  button was used in the IDE, the target will also run the project. For the Simulator,
          |  the names of projects loaded into the Simulator will be displayed in a side panel
          |  (analogous to the 
          i Programs
          |  listing on the KIPR Robot Controller).
      table
        tr
          td
            // &lt;img class='center' src='/imgs/docs/SimulatorRun.jpg' width=80%&gt;&lt;/img&gt;
            p.center For executing a project already loaded in the Simulator
      p When the target for the active project is the simulator
      ul
        li
          | Clicking 
          i Run
          |  in the IDE saves, loads, compiles, and runs the active project
          |  in the simulator.
        li
          | Clicking 
          i Compile
          |  in the IDE saves, loads, and compiles the active project in
          |  the simulator.
          ul
            li
              | Compiling allows you to position the robot and the light on the simulator game
              | board before the program is run.
            li
              | Unless you are using a custom board, compiling allows you to change the board the
              | robot runs on to one of the alternative default boards.
            li
              | Compiled projects are listed in the side panel and can be run by highlighting the
              | name and clicking 
              i Run
              |  in the simulator.
      a(name='Configuring_Simulator')
      h4 Configuring the Simulator Starting Light, Robot, and Game Board
      ol
        li
          | Positioning and using the light
          ul
            li
              | The light is positioned by clicking on the light and dragging it.
            li
              | Double clicking on the light toggles it on/off.
        li
          | Positioning the robot
          ul
            li
              | The robot is positioned by clicking on the robot and dragging it.
            li
              | You can turn the robot by holding down the shift key while clicking on the nose
              | of the robot, using it as a handle for turning.
            li
              | You can then run your project by highlighting its name and clicking 
              i Run
        li
          | Selecting a game board
          ul
            li
              | You can either
              ul
                li
                  | provide a custom board for your project (See IDE 
                  i Help
                  |  for information
                  |  on configuring a custom board)
              |  or
              ul
                li
                  | select one of the default boards under the Simulators 
                  i Select Board
                  |  tab
            li
              | If you have a custom board file in your project, the Simulator will not let you
              | change to one of its default boards
            li
              | The 
              i Select Board
              |  tab brings up a 
              i Board Selection
              |  window with the
              |  currently available default game boards you can select from among
      table
        tr
          td
            // &lt;img class='center' src='/imgs/docs/SimulatorBoard.jpg' width=80%&gt;&lt;/img&gt;
      br
      // START FOOTER

