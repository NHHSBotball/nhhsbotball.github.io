extends docbase

block vars
  - var selected = 'wallaby/usb'

block content
  // The_Link_Library_File
  a(name='USB_stick')
  h2 File I/O for a USB Flash Drive Plugged into the KIPR Robot Controller
  p
    | Before the Linux operating system can access a file system, it has to 'mount' the file system. When a USB flash
    | drive is plugged into the KIPR Robot Controller, it is automatically mounted. When the USB flash drive is
    | unplugged it is automatically unmounted. The C Library has a number of functions designed to access files
    | located in mounted file systems. The library functions 
    code fprintf
    |  and 
    code fscanf
    |  respectively
    |  provide a straight forward means for writing formatted output to a file on a USB drive plugged into the KIPR
    |  Robot Controller, and for reading formatted data from a file on the USB drive. There are a number of file
    |  processing commands, including ones for accessing files byte by byte. For a full description of the range
    |  of functions available consult a standard C reference book.
  p
    | To access a file, in addition to the file name, the directory 'path' leading to the file has to be known. For
    | the KIPR Robot Controller, the directory path to a mounted Flash drive in a USB port is
  .Indent
    code /kovan/media/sda1/
  p
    | Files are accessed in C via a pointer of type 
    code FILE
    | , which is defined in the system header file 
    code &lt;stdio.h&gt;
    | .
    |  The pointer for a file is established when the file is 'opened' for access. If the 
    code fopen
    |  function
    |  returns a 
    code NULL
    |  pointer, it indicates that either the file doesn't exist for the specified file path, or
    |  its file system hasn't been mounted (e.g., the USB drive has not been plugged in). Both cases are illustrated
    |  in the following program for a USB drive plugged into a KIPR Robot Controller. The example otherwise is a
    |  program designed to send data to a file, close the file, then reopen the file and retrieve the data to verify
    |  a successful write operation. If the file doesn't exist it is created. If it does exist, it is appended to.
    |  A user defined preprocessor macro (USB) is constructed to set the file path for the USB drive, illustrating
    |  how the preprocessor can be used to potentially simplify program code.
  a(name='LinkFileExample')
    pre
      code.language-clike
        | #include &lt;stdio.h&gt;  // make sure file I/O is defined
        | // USBFILE is a Macro defined to preface a file name with the directory path for a mounted USB drive
        | #ifndef USBFILE
        |    // _STRINGIFY_ is an auxiliary macro which converts the argument into a string (by surrounding it with double quote marks)
        |    #define _STRINGIFY_(x) #x
        |    // the USBFILE macro appends x to the path for the USB drive, then uses _STRINGIFY_ to make the text a string
        |    #define USBFILE(x) _STRINGIFY_(/kovan/media/sda1/x)
        | #endif
        | int main()
        | {
        |    FILE *f; // file pointer f (the macro defining the FILE data type is in &lt;stdio.h&gt;)
        |    // A file for the USB drive named &quot;myfile&quot; is set up using macro USBFILE
        |    char s[81], chkf[] = USBFILE(myfile); // set up the file path for myfile in string variable chkf
        |    int x, data = 2;
        |    // try opening for read (&quot;r&quot;) to see if the file exists
        |    if ((f = fopen(chkf,&quot;r&quot;)) != NULL) {
        |       fclose(f); // file chkf already exists
        |       printf(&quot;Will be appending to USB %s\n&quot;, chkf);
        |    }
        |    // (chkf is not open at this point)
        |    // open to append (&quot;a&quot;), which also tests if the USB stick is plugged in
        |    if ((f = fopen(chkf,&quot;a&quot;)) == NULL) {
        |       printf(&quot;No USB stick detected\n&quot;);
        |       return -1; // exit the program
        |    }
        |    // file is now open for append; if it didn&apos;t exist it has been created
        |    printf(&quot;Sending %s, %d\n&quot;, &quot;Field &quot;, data);
        |    fprintf(f,&quot;Field &quot;); // use fprintf to send a text string to chkf
        |    fprintf(f,&quot;%d&quot;,data); // now send formatted numeric data using fprintf
        |    fclose(f); // close the file to make sure the output is sent
        |    // now read it back
        |    f = fopen(chkf,&quot;r&quot;); // it exists since we just created it
        |    fscanf(f,&quot;%s %d&quot;,s, &amp;x); // read the two data items from the file
        |    fclose(f); // done with file, so close it
        |    printf(&quot;Data read is %s: %d\n&quot;, s, x);
        | }
    p
      | The USB drive can now be removed from the KIPR Robot Controller. If not already present, there will now be
      | a file named 
      code myfile
      |  on the USB drive, which can be read using a text processor to confirm
      |  the write operation was successful.
      // START FOOTER

