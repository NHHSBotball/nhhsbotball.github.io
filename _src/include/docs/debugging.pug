extends ../../exclude/docbase

block vars
  - var selected = 'debugging'
  - var path = ["Debugging"]

block content
  // Program Debugging
  a(name='Program_Debugging')
  h2 Program Debugging
  p
    | Debugging is the process of correcting syntactic and semantic errors found in a program.
  a(name='Syntax_Errors')
  h4 Syntax Errors
  p
    | The C compiler cannot compile a program that has syntax errors such as a missing semi-colon or other program
    | construction error. Syntax errors are the ones most easily corrected since the compiler can identify both
    | where they occur and what the problem is. The KISS IDE lists any syntax errors found during program compilation
    | in an error panel below the program code. The interface provides the line number and position within the
    | line identifying the location of the error, with a description of the cause of the error. Since the mistake
    | causing the first error listed will typically cause additional syntax errors within the program, it is often
    | the case that correcting the syntax causing the first error will fix the rest.
  a(name='Semantic_Errors')
  h4 Semantic Errors
  p
    | Just because a program compiles does not mean it will do what is intended, which is termed program semantics.
    | A semantic error manifests itself during program execution, either because the program crashes or it produces
    | erroneous results. Semantic errors are caused by errors in program logic or programmer oversights (such as
    | failure to initialize a variable). They can be difficult to track down because it usually is not clear where
    | in program execution the error occurred.
  p
    | For a program which relies on data inputs, determining the presence of semantic errors requires testing the program
    | for a representative set of possible data inputs, including so-called
    i boundary conditions
    | . For example, if a data input has a range from 0 to 1000, then 0 and 1000 are
    |  the boundaries for the data, and one of these, 0, will cause the program to crash if used in the denominator
    |  of a division operation. That means that once the part of the program where the error occurs has been located,
    |  program logic has to be adjusted to check the data input to see if it is 0 before using it in the division.
    |  For complex systems, program testing is an ongoing part of the software development cycle.
  p
    | Semantic errors that are rare events are difficult to correct, since being able to repeat what causes the error
    | is key to being able to resolve it. Once a semantic error can be reliably repeated, various techniques are
    | employed to determine the cause and to locate where in the program it occurred. Only the basic techniques
    | will be covered here, but operating systems provide debugging tools designed to determine the cause of an
    | error and to facilitate locating where in the program code it occurred.
  a(name='printf_debugging')
  h4 Using printf and Commenting for Diagnostic Purposes
  p
    | For the smaller C programs constructed for environments like the KIPR Robot Controller, most semantic errors
    | that occur can be corrected quickly using one or both of the following two approaches.
  ul
    li
      | For a C program that runs, but produces erroneous output, it is often useful to insert 
      code printf
      |  statements at various points in the program code to display the value of selected variables to see if
      |  their intermediate values are as expected. For example, in an expression containing the sub-expression 
      code (x * y-z)
      | , displaying the values of 
      code x, y
      |  and 
      code z
      |  might help discover the sub-expression should have been 
      code (x * (y-z))
      | .
    li
      | For a C program that crashes, "commenting out" sections of code can be used to locate the part of the program
      | triggering the crash. Commenting out is relatively straight forward process to implement, because inserting
      | // in front of a line of code turns it into a comment (so it will no longer be executed) and whole
      | blocks of code can be commented out by surrounding them using
      | /* */ comment bracketing.
      br
      br
      |  What is commented out has to be selected so that the program
      |  will still compile. After commenting out sections of the program, if it still crashes when executed,
      |  then what was commented out is probably not where the culprit is located. Including/excluding parts of
      |  the code in this manner will usually identify where the problem is occurring so it can be diagnosed and
      |  corrected. Sometimes the best tactic is to comment out a large enough section to eliminate the crash,
      |  then reduce the scope of commenting out in small steps until the program crash recurs.
  p
    | For larger programs, a system debugging tool may be called for. Unix systems include the debugging tool 
    code sdb
    | ,
    |  which has its own command structure that has to be learned to be used effectively.
  // START FOOTER

