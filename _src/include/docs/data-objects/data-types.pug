html
  head
    link(href='http://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    link(href='/css/base.css', rel='stylesheet', type='text/css')
    link(href='/css/materialize.min.css', media='screen,projection', rel='stylesheet', type='text/css')
    link(href='/css/docs.css', rel='stylesheet', type='text/css')
    link(href='../imgs/logos/botguy.png', rel='icon')
    title Botball Documentation - Tutorial
    meta(content='#00796b', name='theme-color')
    meta(content='width=device-width, initial-scale=1.0', name='viewport')
  body
    script(src='https://code.jquery.com/jquery-2.1.1.min.js', type='text/javascript')
    script(src='/js/materialize.min.js', type='text/javascript')
    script.
      $(document).ready(function () {
      $('.button-collapse').sideNav({
      draggable: true
      });
      $(".active").parent().parent().siblings()[0].click() })
    header
      ul#slide-out.side-nav.fixed
        li.red.lighten-1(style='height: 130px')
          .userView
            h5.white-text
              a.white-text(href='/docs/index.html') Index
        li
          a(href='/docs/tutorial.html') Tutorial
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Data Objects
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/data-objects/index.html') Introduction
                  li
                    a(href='/docs/data-objects/variables.html') Variables
                  li
                    a(href='/docs/data-objects/constants.html') Constants
                  li.active
                    a(href='/docs/data-objects/data-types.html') Data Types
                  li
                    a(href='/docs/data-objects/arrays.html') Arrays
                  li
                    a(href='/docs/data-objects/structures.html') Structures
                  li
                    a(href='/docs/data-objects/initialization-examples.html') Initialization Examples
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Statements and Expressions
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/statements-and-expressions/index.html') Introduction
                  li
                    a(href='/docs/statements-and-expressions/operators.html') Operators
                  li
                    a(href='/docs/statements-and-expressions/control-flow.html') Control Flow
        li
          a(href='/docs/tutorial.html') Style
        li
          a(href='/docs/tutorial.html') Debugging
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Printing
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/printing/index.html') Introduction
                  li
                    a(href='/docs/printing/examples.html') Examples
                  li
                    a(href='/docs/printing/printf-codes.html') printf Codes
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Preprocessor
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/preprocessor/index.html') Introduction
                  li
                    a(href='/docs/preprocessor/directives.html') Directives
                  li
                    a(href='/docs/preprocessor/include.html') Include
                  li
                    a(href='/docs/preprocessor/macros.html') Macros
                  li
                    a(href='/docs/preprocessor/conditional-compilation.html') Conditional Compilation
        li
          a(href='/docs/lib/math.html') Math Library
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | KIPR Wallaby/Link
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/common-functions.html') Common Functions
                  li
                    a(href='/docs/lib/kipr/functions.html') Functions List
                  li
                    a(href='/docs/lib/kipr/camera.html') Camera Functions
                  li
                    a(href='/docs/lib/kipr/graphics.html') Graphics Functions
                  li
                    a(href='/docs/lib/kipr/depth.html') Depth Sensor Functions
                  li
                    a(href='/docs/lib/kipr/usb.html') File I/O Functions
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | iRobot Create
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/create/index.html') Introduction
                  li
                    a(href='/docs/lib/kipr/create/serial.html') Serial Functions
                  li
                    a(href='/docs/lib/kipr/create/configuration.html') Configuration Functions
                  li
                    a(href='/docs/lib/kipr/create/movement.html') Movement Functions
                  li
                    a(href='/docs/lib/kipr/create/sensors.html') Sensor Functions
                  li
                    a(href='/docs/lib/kipr/create/battery.html') Battery Functions
                  li
                    a(href='/docs/lib/kipr/create/built-ins.html') Built-In Functions
                  li
                    a(href='/docs/lib/kipr/create/music-leds.html') LED and Music Functions
        li
          a(href='/docs/lib/kipr/botball.html') Botball Functions
        li
          a(href='/docs/lib/kipr/threads.html') Threads
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Motors and Sensors
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/info/digital-analog-sensors.html') Analog and Digital Sensors
                  li
                    a(href='/docs/lib/kipr/info/usb-sensors.html') USB Sensors
                  li
                    a(href='/docs/lib/kipr/info/motors-servos.html') Motors and Servos
                  li
                    a(href='/docs/lib/kipr/info/simulator.html') Simulator
        li
          a(href='/docs/full.html') Full Documentation
      nav.nav-extended.red.lighten-2
        .nav-wrapper
          .col.s12
            a.button-collapse(data-activates='slide-out', href='#', style='font-size: 50px')
              i.material-icons menu
            a#top.brand-logo.waves-effect(href='/docs/index.html') Botball Documentation
        .nav-wrapper
          .col.s12
            a.breadcrumb(href='/docs/data-objects/index.html') Data Objects
            a.breadcrumb(href='#!') Data Types
    main.row
      .container.col.s12
        // END HEADER
        // Data_Types
        a(name='Data_Types')
        h3 Data Types
        p C supports the following data types among others:
        // 32-bit_Integers
        .indent
          a(name='32-bit_Integers')
          h4 32-bit Integers
          p
            | 32-bit integers are signified by the data type indicator
            | int. They are signed integers in the (decimal) range -2,147,483,648 to +2,147,483,647.
          // 32-bit_Floating_Point_Numbers
          a(name='64-bit_Floating_Point_Numbers')
          h4 64-bit Floating Point Numbers
          p
            | Floating point numbers are best specified by the data type indicator
            | double. 64-bit floating point numbers have at least 15 decimal digits of precision and range from
            | about 10
            sup -308
            |  to 10
            sup 308
            | .
          // 8-bit_Characters
          a(name='8-bit_Characters')
          h4 8-bit Characters
          p
            | Characters are 8-bit (unsigned) integers signified by the data type indicator
            | char. A character's value normally represents a standard ASCII character code, most of which are
            | printable.
          // Pointers
          a(name='Pointers')
          h4 Pointers
          p
            | A C pointer is a 32-bit number representing the address of a byte location in memory. A pointer that represents
            | the location in memory where information is stored can be used to manipulate the data by performing calculations
            | on the pointer, passing the pointer, or dereferencing the pointer (deference means to obtain the value
            | stored at the location).
          a(name='Arrays1')
          h4 Arrays
          p
            | An array is a data structure used to store a sequence of homogeneous data elements (each element of the array
            | must be of the same data type). Every array has a length which is determined at the time the array is
            | declared. The location of an element in an array is given by supplying its index in brackets. For example, 
            code myarray[3]
            |  references the fourth element in an array named 
            code myarray
            |  where indexing starts from 0. By providing the index, data may be stored in or retrieved
            |  from the array in the same manner as for other variables. By specifying an array whose elements are (same-sized)
            |  arrays, an array with more than one dimension can be defined.
          a(name='Structures1')
          h4 Structures
          p
            | Structures are used to store non-homogenous but related sets of data. Before a structure can be specified,
            | its
            | struct data type must be defined. Any available data type can be used in its definition, including
            | those that are user defined. In contrast to arrays, elements of a structure are referenced by name instead
            | of number. For example, if a 
            code struct Triangle
            |  data type is
            |  defined as
          pre
            code.language-clike
              | struct Triangle {
              |     double sideA;
              |     double sideB;
              |     double sideC;
              | };
          p
            | then 
            code
              | struct Triangle x 
            |  defines a structure named 
            code x
            |  of data type 
            code struct Triangle
            | . If side A for triangle 
            code x
            |  is needed, it is referenced by name as 
            code x.sideA
            | .
          p
            | Since a function can return a
            | struct data type, structures provide a way for a function to return multiple data values.
            | Structures can also be useful for reducing the number of arguments passed to functions. More importantly,
            | structures provide a means for creating complex data structure representations such as directed graphs
            | and linked lists. For these kinds of data structures, the
            | struct elements may be dynamically allocated (see 
            code malloc
            | ) or may be taken from
            |  an array set up for this purpose that has the same
            |  struct data type.
          a(name='EnumeratedSets')
          h4 Enumerated Sets
          p
            | Enumerated sets are used to associate names with integer values, by default 0,1,2, ... according to how
            | many entries are in the set. For example,
          .Indent
            code enum letter {F,D,C,B,A};
          p
            | specifies an enumerated data type named 
            code letter
            |  with associated names F,D,C,B,A which by
            |  default correspond to the values 0,1,2,3,4.
          p For a program, the declaration
          .Indent
            code enum letter grade;
          p
            | specifies a variable named 
            code grade
            |  of type 
            code enum letter
            | ,
            |  to which can be assigned any of the names F,D,C,B,A (or equivalently the integer values 0,1,2,3,4).
            |  For example,
          .Indent
            code
              | grade = C; // same as using grade = 2;
          p
            | Enumerated sets are particularly useful for 
            code switch
            |  constructions
            |  since cases can be referred to by names rather than values; e.g.,
          pre
            | switch(grade) {
            | case A:
            | // case action for an A grade
            | break;
            | case B:
            | // case action for an B grade
            | break;
            | ...
          |  and so forth.
          p
            | While enumeration names must be distinct, the associated values do not need to be. Note that in most
            | instances,
            | #define could be used in the same manner intended for enumerated sets, but enumerated sets
            | have the advantage of the actual values being generated automatically by default. It also needs to
            | be noted that no check is made to see if a value assigned to an enumeration variable is valid, which
            | means the program needs to ensure the validity. An invalid value may produce an unpredictable outcome;
            | for example, assigning a negative value to the 
            code grade
            |  variable above may produce an invalid
            |  outcome if the variable is being used in a comparison.
        // START FOOTER

