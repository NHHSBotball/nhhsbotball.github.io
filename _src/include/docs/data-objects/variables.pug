extends ../../../exclude/docbase

block vars
  - var selected = 'variables'
  - var path = ["Data Objects", "Variables"]

block content
  // Variables
  a(name='Variables')
  h3 Variables
  p
    | Variable names are formed from combinations of lower case letters, capital letters, the decimal digits (0-9),
    | and the underscore character ( 
    code '_'
    | ). There are two restrictions that must be observed in forming
    |  the name:
  ul
    li
      | a variable name cannot begin with a decimal digit
    li
      | a variable name cannot be a keyword such as
      | if,
      | while, etc.
  p
    | Variables which are specified as function arguments or which are defined within program blocks are called
    i local
    |  variables. Their scope is limited to the structure in which they are defined. Variables
    |  defined at the same level as the 
    code main
    |  function and other functions (i.e., not inside any
    |  function's block structure) apply across all functions used by the program. These are called 
    i global
    |  variables and are used for data structures accessed by more than one function, or for function to function
    |  message passing (especially for functions operating in parallel threads).
  p
    | Since functions and global variables are defined at the same level, they must have unique names. The
    | name of a function or a global variable can be used as the name of a local variable, in which case
    | the local use takes precedence; i.e., the scope of the local variable supercedes that of a function
    | or global variable with the same name.
  // Declaration
  a(name='Declaration')
  .Indent
    h4 Declaration
    p
      | In C, a variable is declared by a specification statement that provides its data type, and optionally
      | its initial value. Declarations for global variable are normally grouped before the definition
      | of 
      code main
      | . Declarations for local variables are normally grouped at the beginning
      |  of the block structure in which they are used. The general form of a variable declaration is
      |  one of the following:
    ul
      li
        | &lt;
        i data-type
        | &gt;&lt;
        i variable-name
        | &gt;;
      li
        | &lt;
        i data-type
        | &gt;&lt;
        i variable-name
        | &gt;=
        |  &lt;
        i initialization-data
        | &gt;;
    p
      | &lt;
      a(href='KIPRLinkManualBody.htm#Data_Types', target='ManualFrame')
        i data-type
      | &gt; can be a basic (ordinal) data type such as
      |  int,
      |  double,
      |  char, or a composite data type such as a pointer data type or a user-defined data type.
      |  User-defined data types are based on structures or on enumerated sets. In particular, a
      |  struct definition creates a user-defined data type
      |  struct
      |  &lt;
      i struct-name
      | &gt;, typically simplified by using
      |  typedef to provide the
      |  struct
      | &lt;
      i struct-name
      | &gt; data type with a more digestible name. Just as
      |  struct provides a means for defining a data type based on a structure,
      |  enum provides a means for defining an enumerated data type based on an enumerated set
      |  of names.
      // Local_and_Global_Scopes
      a(name='Local_and_Global_Scopes')
    h4 Local and Global Scopes
    p
      | If a variable is declared within a function, or as an argument to a function, its binding is
      | local, meaning that the variable is available for use only within the context of that function
      | definition. If a variable is declared outside of a function, it is a global variable and
      | is available for use within any function employed by the program, including functions which
      | are defined in files other than the one in which the global variable is declared. If a global
      | variable represents a complex data structure whose definition would clutter up the main program
      | file, it is sometimes advantageous to define it in a separate file to be included by the
      | C preprocessor in preparing the program code for compilation.
    // Variable_Initialization
    a(name='Variable_Initialization')
    h4 Variable Initialization
    p
      | The initial value of a local or global variable can optionally be specified in its declaration.
      | If no initialization value is given, the value is indeterminate. When a global variable is
      | initialized, the initialization value must be a constant. In contrast, local variables may
      | be initialized to the value of arbitrary expressions including any global variables, function
      | calls, function arguments, or local variables which have already been initialized.
    p
      | The compilation process translates a program into machine executable form, initializing global
      | variables within the resulting execute module as specified in global variable declarations.
      | Local variable initialization doesn't take place until program execution enters the block
      | in which the local variable is defined. The initialization occurs every time program execution
      | enters the block, excepting local variables whose declaration is preceded by the word
      | static. For a local variable declared to be
      | static, initialization only takes place the first time the block defining it is entered.
      | A
      | static local variable retains the last value assigned to it whether or not program
      | execution is in its block.
    |  When applied at the global level, a
    |  static specification limits the scope of a global variable or subordinate function to
    |  the source file in which it is defined. This serves the purpose of allowing a pre-compiled library
    |  function to define global variables and subordinate functions whose names can be duplicated in
    |  a calling program without incurring error.
    p
      | A small example illustrating initialization of global and local variables follows:
    pre
      code.language-clike
        | int cnt=50; // global declaration of cnt as integer; initial value 50
        | double tmp=100.123; // global declaration of tmp as floating point; initial value 100.123
        | int function_example()
        | {
        |     int x; // local declaration of x as integer; initial value indeterminate 
        |     double y=tmp; // local declaration of y as floating point; initial value global tmp 
        | }
    p
      | To recap, local variables are not initialized until the function containing them is executed.
      | The initial value of global variables are part of the compiled version of the program,
      | so global variables revert to their initialized value whenever the program is run.
    // START FOOTER

