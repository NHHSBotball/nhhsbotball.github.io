extends docbase

block vars
  - var selected = 'data-objects/constants'

block content
  // Constants
  a(name='Constants')
  h3 Constants
  .indent
    a(name='Integer_Constants')
    h4 Integer (int) Constants
    p
      | For most purposes, integer constants are defined using decimal (base 10) integer format. An integer of type
      | int is normally stored in memory as a 32-bit 2's complement integer, which allows values in the
      | range [-2
      sup 31
      | , 2
      sup 31
      | -1]. Integer constants can also be defined using hexadecimal (base
      |  16) integer format (marked by the prefix ' 
      code 0x
      | '), or octal (base 8) integer format (marked
      |  by the prefix ' 
      code 0
      | '), although both are awkward for representing negative numbers. For 32-bit
      |  two's complement integers, the following are true:
    .indent
      | 4053
      sub 10
      |  = FD5
      sub 16
      |  = 7725
      sub 8
      br
      |  -1
      sub 10
      |  = FFFFFFFF
      sub 16
      |  = 37777777777
      sub 8
      | .
    p In C notation, these comparisons become
    .indent
      code
        | 4053 == 0xFD5 == 07725
      br
      code
        | -1 == 0xffffffff == 037777777777
    p
      | which also illustrates each of the three formats. Appending a 'u' or 'U' to the constant changes its
      | value to the range [0, 2
      sup 32
      | -1] rather than [-2
      sup 31
      | , 2
      sup 31
      | -1]. An 'unsigned'
      |  specification is sometimes needed when data is to be copied to a variable of a different type; in
      |  particular, 8-bit bytes are treated as unsigned integers.
    p
      | Present day computer memory is normally organized in 8-bit bytes, so hexadecimal pairs are commonly
      | used to exhibit the value of bytes in memory. Earlier computer systems used 3-bit groupings which
      | were represented using octal digits, explaining why octal representation is included as a means
      | for representing integers in C.
    p
      | The number of bits used for representing integers is system dependent, but is typically 32 bits for
      | type
      | int. The data type
      | long int normally specifies a 64-bit integer, and is designated by appending 'L' or 'l'
      | to the integer's representation. For most programming needs, integer type (
      | int) constants are sufficient.
    // Floating_Point_Constants
    a(name='Floating_Point_Constants')
    h4 Floating Point (double) constants
    p
      | Fractions are an extension of the integers, and may be represented using a format termed scientific
      | (mantissa, exponent) notation; i.e.,
    .indent
      code
        | 0.&lt;
        i mantissa
        | &gt; &times; 10
        sup
          | &lt;
          i exponent
          | &gt;
    p
      | In addition to providing means for representing nominal fractional values, this format allows reasonable
      | approximation of astronomically large or infinitesimally small numbers, emphasizing magnitude
      | more so than exactness. Since the decimal point for a number such as 123.4567 is floated to the
      | front in setting the mantissa and exponent (0.1234567Ã—10
      sup 3
      | ), the term floating
      |  point representation is used.
    p
      | Computer arithmetic is binary rather than decimal, so the exponent and mantissa are represented internally
      | as base 2 values. Note that the terminating decimal fraction 0.1
      sub 10
      |  when represented
      |  as a binary fraction is non-terminating (0.00011001100110011 ...
      sub 2
      | ). This illustrates
      |  that even in simple cases a floating point value may be an approximation, where precision is
      |  improved by allowing more bits for the mantissa (double precision doubles the number of bits
      |  used for the representation from 32 to 64, adding extra bits for both mantissa and exponent).
    p
      | A floating point constant can be defined using either ordinary decimal point representation or a
      | form of (base 10) scientific notation; for example,
    .indent
      code
        | 123.4567 == 12.34567E1 == 1234567e-4 == .1234567e3
    p
      | Since the KIPR Robot Controller does not have floating point operations integrated into its CPU,
      | floating point operations are handled by software, making them significantly slower than integer
      | operations (although still fast in human terms). Hence, floating point should only be used for
      | data that is inherently fractional.
    // Characters_and_String_Constants
    a(name='Characters_and_String_Constants')
    h4 Characters and String Constants
    p
      | A character constant is given by enclosing the character in single quote marks; e.g.,
      | 'K'. Characters are internally encoded in 8-bit bytes using ASCII representation (e.g.,
      | the internal ASCII representation of
      | 'K' is the (8-bit) hex pair '4B').
    p
      | A character string constant is a sequence of characters enclosed in quotation marks, e.g.,
      | 'This is a character string.'. C processes a character string as (1-dimensional) array
      | delimited by the (unprintable) character constant
      | '\0', which marks the end of the string within the array.
    p
      | The character constant
      | 'K' cannot be used interchangeably with the string constant
      | 'K' since
      | 'K' is an 8-bit integer and
      | 'K' is a 16-bit string whose first 8-bits are the 8-bits for
      | 'K' and the second 8-bits are the 8-bits for
      | '\0'.
    // NULL
    a(name='NULL')
    h4 NULL
    p
      | The special constant 
      code NULL
      |  (a preprocessor macro included implicitly, or explicitly using
      |  #include &lt;stio.h&gt;) is provided by the C preprocessor to represent a NULL pointer.
      |  In general, a pointer represents the location (or address) of a data structure in memory. A NULL
      |  pointer is one which exists, but which points to nothing.
    p
      | A pointer that hasn't been initialized has no semantic meaning, in contrast to a pointer initialized
      | to 
      code NULL
      | , which points to nothing (think in terms of the empty set used in mathematics).
      |  To check if a pointer variable is pointing to data you compare its value to 
      code NULL
      | .
      |  As an illustration, suppose a linked list data type is defined to have elements with 2 components,
      |  the first of which provides a data value and the second of which is a pointer to the next logical
      |  element in the list; e.g., the components for an element in the list might represent a name,
      |  and a pointer to the element containing the next name in the list in alphabetical order. If the
      |  list is processed to retrieve the name data in alphabetical order, the last element in the list
      |  will need to have 
      code NULL
      |  assigned to its pointer since there are no more names! 
      code NULL
      |  then provides a (testable) pointer component value that identifies the last element in the list.
  // START FOOTER

