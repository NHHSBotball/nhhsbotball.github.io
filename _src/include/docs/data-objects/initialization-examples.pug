extends ../../../exclude/docbase

block vars
  - var selected = 'initialization-examples'
  - var path = ["Data Objects", "Initialization Examples"]

block content
  // Complex_Initialization_examples
  a(name='Complex_Initialization_examples')
  h3 Initialization Examples
  p
    | Complex data structures formed as arrays or as structures may be initialized upon declaration with a sequence
    | of constant values contained within curly braces and separated by commas.
  p
    | Character arrays may also be initialized as a string from a string of characters enclosed in (double) quote marks.
  p
    | In initialization of a one dimensional array, the length (inside the square brackets) can be left blank, in which
    | case the allocated length is determined by what is assigned to the array. The declaration for a multi-dimensional
    | array must specify the size of all dimensions after the first dimension. If a length is specified, and initialization
    | data overflows that length, a warning is issued and the excess data is ignored. If the initialization data
    | falls short of the specified size the rest will be indeterminate.
  p The following example illustrates a variety of different initializations:
  pre
    code.language-clike
      | /* declare global variables of various types */
      | int i = 50; // single basic variable 
      | int *ptr = NULL; // single basic pointer variable 
      | int x=1, y, z=3; // multiple basic variables 
      | double farr[3]= {1.2, 3.6, 7.4}; // one dimensional array 
      | int iarr[5]= {1, 3, 7}; // one dimensional array, last 2 indeterminate 
      | int jarr[]= {2, 4, 6, 8}; // one dimensional array, derived length 4 
      | char carr[2][3]={{&apos;a&apos;, &apos;b&apos;, &apos;c&apos;}, {&apos;b&apos;, &apos;d&apos;, &apos;f&apos;}}; // two dimensional array 
      | int xarr[2][5]={{1, 2, 3}, {2, 4, 6}}; // two dimensional array, last 3 rows indeterminate 
      | int yarr[][2]={{1, 2}, {2, 4}, {3,6}}; // two dimensional array, derived size 3x2 
      | char c[]=&quot;A B C&quot;; // string, array size 6=5+1 
      | char sarr[5][10]={&quot;a b c&quot;,&quot;d&quot;,&quot;e f&quot;}; // array of strings, first 6 characters of row 1 initialized, first 2 of row 2, first 4 of row 3, last 2 rows indeterminate 
      | struct employee {
      |     char name[31];
      |     double weight;
      |     struct employee *nextrec;  // pointer (self-referential) to the struct for another employee 
      | }
      | struct employee a_node = {&quot;John Doe&quot;, 165.4, NULL}; // perhaps a linked list node 
      | struct elist[2] =
      |     {{&quot;JFK&quot;, 163.1, NULL }, {&quot;LBJ&quot;}}; // not everything has to be initialized 
      | // example function which declares local variables of various types, initialized from global variables 
      | int f_locals()
      | {
      |     int x = i; // local x, global i (value 50) 
      |     int y = yarr[2][1]; // local y, global yarr (value 6) 
      |     int *iptr=&amp;i; // local iptr, address of global i 
      |     struct employee wx={&quot;Jane Doe&quot;, 115.2, &amp;a_node}; // local struct wx, pointed to global a_node 
      |     char lc[]=sarr[2]; //  local string lc with initial value &quot;e f&quot; copied from length 4 string stored in sarr[2] 
      |     . . .
      | }
  // START FOOTER

