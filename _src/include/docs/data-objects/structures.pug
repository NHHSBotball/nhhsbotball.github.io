html
  head
    link(href='http://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    link(href='/css/base.css', rel='stylesheet', type='text/css')
    link(href='/css/materialize.min.css', media='screen,projection', rel='stylesheet', type='text/css')
    link(href='/css/docs.css', rel='stylesheet', type='text/css')
    link(href='../imgs/logos/botguy.png', rel='icon')
    title Botball Documentation - Tutorial
    meta(content='#00796b', name='theme-color')
    meta(content='width=device-width, initial-scale=1.0', name='viewport')
  body
    script(src='https://code.jquery.com/jquery-2.1.1.min.js', type='text/javascript')
    script(src='/js/materialize.min.js', type='text/javascript')
    script.
      $(document).ready(function () {
      $('.button-collapse').sideNav({
      draggable: true
      });
      $(".active").parent().parent().siblings()[0].click() })
    header
      ul#slide-out.side-nav.fixed
        li.red.lighten-1(style='height: 130px')
          .userView
            h5.white-text
              a.white-text(href='/docs/index.html') Index
        li
          a(href='/docs/tutorial.html') Tutorial
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Data Objects
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/data-objects/index.html') Introduction
                  li
                    a(href='/docs/data-objects/variables.html') Variables
                  li
                    a(href='/docs/data-objects/constants.html') Constants
                  li
                    a(href='/docs/data-objects/data-types.html') Data Types
                  li
                    a(href='/docs/data-objects/arrays.html') Arrays
                  li.active
                    a(href='/docs/data-objects/structures.html') Structures
                  li
                    a(href='/docs/data-objects/initialization-examples.html') Initialization Examples
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Statements and Expressions
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/statements-and-expressions/index.html') Introduction
                  li
                    a(href='/docs/statements-and-expressions/operators.html') Operators
                  li
                    a(href='/docs/statements-and-expressions/control-flow.html') Control Flow
        li
          a(href='/docs/tutorial.html') Style
        li
          a(href='/docs/tutorial.html') Debugging
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Printing
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/printing/index.html') Introduction
                  li
                    a(href='/docs/printing/examples.html') Examples
                  li
                    a(href='/docs/printing/printf-codes.html') printf Codes
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Preprocessor
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/preprocessor/index.html') Introduction
                  li
                    a(href='/docs/preprocessor/directives.html') Directives
                  li
                    a(href='/docs/preprocessor/include.html') Include
                  li
                    a(href='/docs/preprocessor/macros.html') Macros
                  li
                    a(href='/docs/preprocessor/conditional-compilation.html') Conditional Compilation
        li
          a(href='/docs/lib/math.html') Math Library
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | KIPR Wallaby/Link
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/common-functions.html') Common Functions
                  li
                    a(href='/docs/lib/kipr/functions.html') Functions List
                  li
                    a(href='/docs/lib/kipr/camera.html') Camera Functions
                  li
                    a(href='/docs/lib/kipr/graphics.html') Graphics Functions
                  li
                    a(href='/docs/lib/kipr/depth.html') Depth Sensor Functions
                  li
                    a(href='/docs/lib/kipr/usb.html') File I/O Functions
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | iRobot Create
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/create/index.html') Introduction
                  li
                    a(href='/docs/lib/kipr/create/serial.html') Serial Functions
                  li
                    a(href='/docs/lib/kipr/create/configuration.html') Configuration Functions
                  li
                    a(href='/docs/lib/kipr/create/movement.html') Movement Functions
                  li
                    a(href='/docs/lib/kipr/create/sensors.html') Sensor Functions
                  li
                    a(href='/docs/lib/kipr/create/battery.html') Battery Functions
                  li
                    a(href='/docs/lib/kipr/create/built-ins.html') Built-In Functions
                  li
                    a(href='/docs/lib/kipr/create/music-leds.html') LED and Music Functions
        li
          a(href='/docs/lib/kipr/botball.html') Botball Functions
        li
          a(href='/docs/lib/kipr/threads.html') Threads
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Motors and Sensors
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/info/digital-analog-sensors.html') Analog and Digital Sensors
                  li
                    a(href='/docs/lib/kipr/info/usb-sensors.html') USB Sensors
                  li
                    a(href='/docs/lib/kipr/info/motors-servos.html') Motors and Servos
                  li
                    a(href='/docs/lib/kipr/info/simulator.html') Simulator
        li
          a(href='/docs/full.html') Full Documentation
      nav.nav-extended.red.lighten-2
        .nav-wrapper
          .col.s12
            a.button-collapse(data-activates='slide-out', href='#', style='font-size: 50px')
              i.material-icons menu
            a#top.brand-logo.waves-effect(href='/docs/index.html') Botball Documentation
        .nav-wrapper
          .col.s12
            a.breadcrumb(href='/docs/data-objects/index.html') Data Objects
            a.breadcrumb(href='#!') Structures
    main.row
      .container.col.s12
        // END HEADER
        // Structures
        a(name='Structures')
        h3 Structures
        p
          | As noted above, structures are used to store non-homogenous but related sets of data. In order to specify a structure,
          | a
          | struct data type for it must first be defined. Any available data type can be used in the structure
          | definition, including those that are user defined. The elements of a structure are referenced by name to
          | access them.
        p
          | Since a function can return a
          | struct data type, structures also provide a way for a function to return multiple (named) data values.
          | However, the primary purpose of structures is to provide a means for creating complex data structure representations
          | such as directed graphs and linked lists. In the construction of this kind of data structure, structure elements
          | may be dynamically allocated (see 
          code malloc
          | ) or alternatively, be taken from an array having the
          |  struct data type.
        p
          | The following example illustrates structure definition, creation of an array of structures, and access to its
          | elements.
        a(name='DisplayStructure')
        pre
          code.language-clike
            | #include &lt;string.h&gt; // make sure the string function declarations are present
            | struct ex_stype { // structure definition by struct data type specification 
            |     int i;      // component is an integer named i
            |     char s[81]; // component is a string named s
            | };
            | void set_ds(int x, char nm[], int i); // function to assign values for the s and i components in structure ds[x]
            | void show_ds(int x); // function to display the elements of structure ds[x]
            | struct ex_stype ds[2]; // ds is an array each element of which is an ex_stype structure
            | int main()
            | {
            |     set_ds(0,&quot;one&quot;,1); // assign values to the components of structures ds[0] and ds[1]
            |     set_ds(1,&quot;two&quot;,2);
            |     show_ds(0);        // display the components of structures ds[0] and ds[1]
            |     show_ds(1);
            | }
            | void set_ds(int x, char nm[], int i)
            | {
            |     ds[x].i=i;            // copy argument i to the i component of structure ds[x]
            |     strcpy (ds[x].s, nm); // use the string library function strcpy to copy argument nm to the s component of structure ds[x]
            | }
            | void show_ds(int x)
            | {
            |     printf(&quot;name %d is %s\n&quot;,ds[x].i,ds[x].s);
            | }
        p
          | The first part of the example is the specification of the
          | struct data type used to define the data structure 
          code ds
          |  used in the program. The 
          code struct ex_stype
          |  data type specifies a structure with an integer
          |  component 
          code i
          |  and a string component 
          code s
          | .
        p
          | A global variable 
          code ds
          |  is declared as a 2 element array of data type 
          code struct ex_stype
          |  in the same manner that would be used for any other data type.
        p
          | The two functions, 
          code set_ds
          |  and 
          code show_ds
          | , illustrate using the dot operator ( 
          code .
          | ) to assign values to the components of a structure and to access the components of a structure,
          |  respectively. For the declaration of variable 
          code sx
        .Indent
          code struct ex_stype sx;
        p
          | the components of the structure 
          code sx
          |  are 
          code sx.i
          |  and 
          code sx.s
          | . Similarly, for the
          |  structure in item x of array 
          code ds
          | , the components are 
          code ds[x].i
          |  and 
          code ds[x].s
          | , where the index in square brackets has to be added to identify which of the structures
          |  in the array is being accessed.
        p
          | Pointers to
          | struct data types can also be used, just like pointers to any other type. When a pointer is for
          | a
          | struct data type, an "arrow" ( 
          code -&gt;
          | ) notation can be used to access elements of the
          |  structure addressed by the pointer; for example,
        pre
          code.language-clike
            |     struct ex_stype *sptr;
            |     sptr = &amp;dx;
            |     sptr-&gt;i = 10;
            |     strcpy(sptr-&gt;s, &quot;example text&quot;);
        p
          | The dot operator can be equivalently used, but has the clumsier notation 
          code (*sptr).i
          |  as opposed
          |  to 
          code
            | sptr 
            code -&gt;
            | i
          | .
        p
          | Just as for arrays, only pointers to structures, not the structures themselves, can be passed to or returned
          | from functions.
        // START FOOTER

