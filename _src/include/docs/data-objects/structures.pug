extends /docbase

block vars
  - var selected = 'data-objects/structures'

block content
  // Structures
  a(name='Structures')
  h3 Structures
  p
    | As noted above, structures are used to store non-homogenous but related sets of data. In order to specify a structure,
    | a
    | struct data type for it must first be defined. Any available data type can be used in the structure
    | definition, including those that are user defined. The elements of a structure are referenced by name to
    | access them.
  p
    | Since a function can return a
    | struct data type, structures also provide a way for a function to return multiple (named) data values.
    | However, the primary purpose of structures is to provide a means for creating complex data structure representations
    | such as directed graphs and linked lists. In the construction of this kind of data structure, structure elements
    | may be dynamically allocated (see 
    code malloc
    | ) or alternatively, be taken from an array having the
    |  struct data type.
  p
    | The following example illustrates structure definition, creation of an array of structures, and access to its
    | elements.
  a(name='DisplayStructure')
  pre
    code.language-clike
      | #include &lt;string.h&gt; // make sure the string function declarations are present
      | struct ex_stype { // structure definition by struct data type specification 
      |     int i;      // component is an integer named i
      |     char s[81]; // component is a string named s
      | };
      | void set_ds(int x, char nm[], int i); // function to assign values for the s and i components in structure ds[x]
      | void show_ds(int x); // function to display the elements of structure ds[x]
      | struct ex_stype ds[2]; // ds is an array each element of which is an ex_stype structure
      | int main()
      | {
      |     set_ds(0,&quot;one&quot;,1); // assign values to the components of structures ds[0] and ds[1]
      |     set_ds(1,&quot;two&quot;,2);
      |     show_ds(0);        // display the components of structures ds[0] and ds[1]
      |     show_ds(1);
      | }
      | void set_ds(int x, char nm[], int i)
      | {
      |     ds[x].i=i;            // copy argument i to the i component of structure ds[x]
      |     strcpy (ds[x].s, nm); // use the string library function strcpy to copy argument nm to the s component of structure ds[x]
      | }
      | void show_ds(int x)
      | {
      |     printf(&quot;name %d is %s\n&quot;,ds[x].i,ds[x].s);
      | }
  p
    | The first part of the example is the specification of the
    | struct data type used to define the data structure 
    code ds
    |  used in the program. The 
    code struct ex_stype
    |  data type specifies a structure with an integer
    |  component 
    code i
    |  and a string component 
    code s
    | .
  p
    | A global variable 
    code ds
    |  is declared as a 2 element array of data type 
    code struct ex_stype
    |  in the same manner that would be used for any other data type.
  p
    | The two functions, 
    code set_ds
    |  and 
    code show_ds
    | , illustrate using the dot operator ( 
    code .
    | ) to assign values to the components of a structure and to access the components of a structure,
    |  respectively. For the declaration of variable 
    code sx
  .Indent
    code struct ex_stype sx;
  p
    | the components of the structure 
    code sx
    |  are 
    code sx.i
    |  and 
    code sx.s
    | . Similarly, for the
    |  structure in item x of array 
    code ds
    | , the components are 
    code ds[x].i
    |  and 
    code ds[x].s
    | , where the index in square brackets has to be added to identify which of the structures
    |  in the array is being accessed.
  p
    | Pointers to
    | struct data types can also be used, just like pointers to any other type. When a pointer is for
    | a
    | struct data type, an 'arrow' ( 
    code -&gt;
    | ) notation can be used to access elements of the
    |  structure addressed by the pointer; for example,
  pre
    code.language-clike
      |     struct ex_stype *sptr;
      |     sptr = &amp;dx;
      |     sptr-&gt;i = 10;
      |     strcpy(sptr-&gt;s, &quot;example text&quot;);
  p
    | The dot operator can be equivalently used, but has the clumsier notation 
    code (*sptr).i
    |  as opposed
    |  to 
    code
      | sptr 
      code -&gt;
      | i
    | .
  p
    | Just as for arrays, only pointers to structures, not the structures themselves, can be passed to or returned
    | from functions.
  // START FOOTER

