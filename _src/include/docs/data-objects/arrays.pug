extends ../../../exclude/docbase

block vars
  - var selected = 'arrays'
  - var path = ["Data Objects", "Arrays"]

block content
  // Arrays
  a(name='Arrays')
  h3 Arrays
  p
    | Arrays can be defined in C for any supported data type, including user defined data types. The name of an array
    | is actually a pointer to its first element, the one whose index is 0, so passing an array to a function is
    | a call by reference. Multi-dimensional arrays are defined as arrays of arrays (or arrays of pointers). Arrays
    | are useful for allocating space for many instances of a given data type, arranged sequentially in memory,
    | which provides means for iterating over the set of values in the array.
  // Declaring_and_Initializing_Arrays
  a(name='Declaring_and_Initializing_Arrays')
  .Indent
    h4 Declaring and Initializing Arrays
    p
      | The definition for an array specifies its data type, name, and index structure, which is given inside square
      | brackets. The following statement declares an array of ten integers:
    .Indent
      code int ex_array[10];
    p
      | The elements of the array are numbered from 0 to 9. Elements are accessed by enclosing the index number within
      | square brackets; e.g., 
      code ex_array[4]
      |  denotes the fifth element of the array 
      code ex_array
      |  (since counting begins at zero). Note that 
      code ex_array == &ex_array[0]
      | .
    p
      | Arrays not initialized at declaration contain indeterminate values. Arrays may be fully or partially initialized
      | at declaration by specifying the array elements within curly braces, separating the array elements from
      | each other by commas. For example,
    .Indent
      code
        | int ex_array[10]= {3, 4, 5, -8,  17, 301};
    p
      | initializes the first six elements of 
      code ex_array
      | , with 
      code ex_array[4]
      |  equaling 
      code 17
      | , 
      code ex_array[0]
      |  equaling 
      code 3
      | , etc.
    p
      | If no size value is specified within the square brackets when the array is declared, but initialization information
      | is given, then the size of the array is determined by the number of initialization elements given in
      | the declaration. If a size is specified and initialization data is given, but the length of the initialization
      | data exceeds the specified length for the array, the excess data will be ignored (and the compiler will
      | issue a warning).
    // Strings
    a(name='CharacterStrings')
    h4 Character Strings
    p
      | Character strings are implemented as arrays of characters. An array of characters can be initialized character
      | by character, but can also be initialized by using a string constant, for example:
    .Indent
      code
        | char ex_string[]= &quot;Hello there&quot;;
    p
      | This initializes the character array 
      code ex_string
      |  with the ASCII values of the characters in " 
      code Hello there
      | " terminated by the (unprintable) ASCII character
      |  '\0'. The length of the array is 12, which is the number of characters in " 
      code Hello there
      | "
      |  plus 1 for the
      |  '\0' string termination character. If the array length had been declared, the initialization would
      |  leave the balance of the array indeterminate if more than 12 and truncated (including
      |  '\0') if less than 12. When a character array containing a string constant is used as an argument
      |  for 
      code printf
      | , the format specifier %s marks where to insert the string in the formatted output;
      |  for example,
    .Indent
      code
        | char ans[10]=&quot;no&quot;;
        br
        | int q=3;
        br
        |      printf(&quot;The answer to %d is %s.\n&quot;,q,ans);
    p
      | produces the (formatted) output " 
      code
        | The answer to 3 is no.
      | ".
    p
      | The standard C library has string functions for assigning strings ( 
      code strcpy
      | ), determining string
      |  length ( 
      code strlen
      | ), combining strings ( 
      code strcat
      | ), and the like (look for string
      |  functions in your C reference). For example,
    .Indent
      code strcpy(s,"Example string");
    p
      | is used to copy the character string in the second argument of 
      code strcpy
      |  to the character array
      |  in the first.
    p
      | To make sure that the C preprocessor includes the prototype declarations for the string functions, programs
      | that use them normally have the C preprocessor directive
    .Indent
      | #include &lt;string.h&gt;
    p
      | at the start of the program code. This directive, like the
      | #include &lt;stdio.h&gt; directive is ignored if it is issued again elsewhere in the program.
    p
      | When a character array is initialized using the curly braces syntax, unless
      | '\0' is included, there is no string delimiter, and printing the array as a character string
      | using 
      code printf
      |  will produce indeterminate results. When declaring a character array that
      |  is intended to hold character strings, the array size needs to be at least 1 larger than the size
      |  of the maximum string it will be used for to allow for the
      |  '\0' string termination character. For example, given
    .Indent
      code char pg_string[81];
    p
      | strings of length up to 80 can be stored in the variable 
      code pg_string
    // Passing_Arrays_as_Arguments
    a(name='Passing_Arrays_as_Arguments')
    h4 Passing Arrays as Arguments
    p
      | When an array is passed to a function as an argument, the address of the array's initial element
      | is actually passed, rather than the elements of the array, a call by reference as discussed earlier.
      | Hence there is not a local copy of the array inside the function, and any modifications the function
      | makes to the array are to its location in memory when declared (what is local to the function
      | is the copy of the address of the array's initial element passed as an argument).
    p
      | For a function to be able to treat an argument as an array, the argument has to specify the array's
      | data type and index structure.
    p
      | As an example, the following function has arguments for an index and an array, printing the array
      | element at the index value.
    pre
      code.language-clike
        | void print_element(int indx, int arr[])
        | {
        |     printf(&quot;Value at index %d is %d\n&quot;, indx, arr[indx]);
        | }
    p
      | The use of the square brackets specifies that the argument is a 1-dimensional array of integers.
    p
      | Alternatively, since the array name represents a pointer to the first element in the array, the function
      | argument could be specified as pointer variable, in which case the square brackets would be omitted.
      | In this case, in the body of the function the pointer variable name would be used instead of
      | the array name. For example,
    pre
      code.language-clike
        | void print_element(int indx, int *p)
        | {
        |     printf(&quot;Value at index %d is %d\n&quot;, indx, p[indx]);
        |     // or you could use printf(&quot;Value at index %d is %d\n&quot;, indx, *(p+indx));
        | }
    p
      | Either of the following two example calls to the function will work, whichever of the two versions is used:
    .Indent
      code
        |     print_element(3, ex_array);
        br
        |     print_element(4, &amp;ex_array[0]);
        |  
    // Multi-dimensional_Arrays
    a(name='Multi-dimensional_Arrays')
    h4 Multi-dimensional Arrays
    p
      | A two-dimensional array is just one-dimensional array whose elements are one-dimensional arrays.
      | For example
    .Indent
      code int k[2][3];
    p
      | specifies an array of length 2 whose objects are length 3 arrays integers. 
      code k
      |  can
      |  be viewed as a two-dimensional array with 2 rows and 3 columns, where the first row has as
      |  elements 
      code k[0][0], k[0][1], k[0][2]
      |  and the second the elements 
      code k[1][0], k[1][1], k[1][2]
      | . 
      code k[0]
      |  and 
      code k[1]
      |  represent rows of 3 elements each. Hence, in addition
      |  to accessing any element of the array using index bracket notation, any row in the array
      |  can be accessed similarly. Arrays with any number of dimensions can be generalized from this
      |  example by adding more brackets in the array declaration.
    p
      | The initialization
    .Indent
      code
        | int k[2][3] = {{0,1},{3,4,5}};
    p
      | illustrates initialization of parts of the array, where only 
      code k[0][2]
      |  has not
      |  been initialized. Conceptually the array is
    .Indent
      code
        | 0  1  ?
        br
        |            3  4  5
  // START FOOTER

