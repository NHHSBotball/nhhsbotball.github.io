html
  head
    link(href='http://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    link(href='/css/base.css', rel='stylesheet', type='text/css')
    link(href='/css/materialize.min.css', media='screen,projection', rel='stylesheet', type='text/css')
    link(href='/css/docs.css', rel='stylesheet', type='text/css')
    link(href='../imgs/logos/botguy.png', rel='icon')
    title Botball Documentation - Tutorial
    meta(content='#00796b', name='theme-color')
    meta(content='width=device-width, initial-scale=1.0', name='viewport')
  body
    script(src='https://code.jquery.com/jquery-2.1.1.min.js', type='text/javascript')
    script(src='/js/materialize.min.js', type='text/javascript')
    script.
      $(document).ready(function () {
      $('.button-collapse').sideNav({
      draggable: true
      });
      $(".active").parent().parent().siblings()[0].click() })
    header
      ul#slide-out.side-nav.fixed
        li.red.lighten-1(style='height: 130px')
          .userView
            h5.white-text
              a.white-text(href='/docs/index.html') Index
        li
          a(href='/docs/tutorial.html') Tutorial
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Data Objects
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/data-objects/index.html') Introduction
                  li
                    a(href='/docs/data-objects/variables.html') Variables
                  li
                    a(href='/docs/data-objects/constants.html') Constants
                  li
                    a(href='/docs/data-objects/data-types.html') Data Types
                  li
                    a(href='/docs/data-objects/arrays.html') Arrays
                  li
                    a(href='/docs/data-objects/structures.html') Structures
                  li
                    a(href='/docs/data-objects/initialization-examples.html') Initialization Examples
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Statements and Expressions
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/statements-and-expressions/index.html') Introduction
                  li
                    a(href='/docs/statements-and-expressions/operators.html') Operators
                  li
                    a(href='/docs/statements-and-expressions/control-flow.html') Control Flow
        li.active
          a(href='/docs/tutorial.html') Style
        li
          a(href='/docs/tutorial.html') Debugging
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Printing
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/printing/index.html') Introduction
                  li
                    a(href='/docs/printing/examples.html') Examples
                  li
                    a(href='/docs/printing/printf-codes.html') printf Codes
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Preprocessor
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/preprocessor/index.html') Introduction
                  li
                    a(href='/docs/preprocessor/directives.html') Directives
                  li
                    a(href='/docs/preprocessor/include.html') Include
                  li
                    a(href='/docs/preprocessor/macros.html') Macros
                  li
                    a(href='/docs/preprocessor/conditional-compilation.html') Conditional Compilation
        li
          a(href='/docs/lib/math.html') Math Library
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | KIPR Wallaby/Link
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/common-functions.html') Common Functions
                  li
                    a(href='/docs/lib/kipr/functions.html') Functions List
                  li
                    a(href='/docs/lib/kipr/camera.html') Camera Functions
                  li
                    a(href='/docs/lib/kipr/graphics.html') Graphics Functions
                  li
                    a(href='/docs/lib/kipr/depth.html') Depth Sensor Functions
                  li
                    a(href='/docs/lib/kipr/usb.html') File I/O Functions
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | iRobot Create
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/create/index.html') Introduction
                  li
                    a(href='/docs/lib/kipr/create/serial.html') Serial Functions
                  li
                    a(href='/docs/lib/kipr/create/configuration.html') Configuration Functions
                  li
                    a(href='/docs/lib/kipr/create/movement.html') Movement Functions
                  li
                    a(href='/docs/lib/kipr/create/sensors.html') Sensor Functions
                  li
                    a(href='/docs/lib/kipr/create/battery.html') Battery Functions
                  li
                    a(href='/docs/lib/kipr/create/built-ins.html') Built-In Functions
                  li
                    a(href='/docs/lib/kipr/create/music-leds.html') LED and Music Functions
        li
          a(href='/docs/lib/kipr/botball.html') Botball Functions
        li
          a(href='/docs/lib/kipr/threads.html') Threads
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Motors and Sensors
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/info/digital-analog-sensors.html') Analog and Digital Sensors
                  li
                    a(href='/docs/lib/kipr/info/usb-sensors.html') USB Sensors
                  li
                    a(href='/docs/lib/kipr/info/motors-servos.html') Motors and Servos
                  li
                    a(href='/docs/lib/kipr/info/simulator.html') Simulator
        li
          a(href='/docs/full.html') Full Documentation
      nav.nav-extended.red.lighten-2
        .nav-wrapper
          .col.s12
            a.button-collapse(data-activates='slide-out', href='#', style='font-size: 50px')
              i.material-icons menu
            a#top.brand-logo.waves-effect(href='/docs/index.html') Botball Documentation
        .nav-wrapper
          .col.s12
            a.breadcrumb(href='#!') Style
    main.row
      .container.col.s12
        // END HEADER
        // Style
        a(name='Programming_Style')
        h2 Programming Style
        p
          | Many authors have expressed opinions on programming style, which for C generally consists of how key elements
          | of a program are exhibited, how comments are handled, and how white space is employed, most notably in how
          | block structures are offset by placement and indentation. The manner in which a program is written affects
          | its readability, ease of understanding, and effort for debugging, enhancement, and maintenance.
        p
          | The most commonly used style, K&R Style, reflects how programs are presented in Kernighan and Ritchie's book
          | on C (
          a(href='http://www.amazon.com/C-Programming-Language-2nd-Edition/dp/0131103628') The C Programming Language (2nd Edition)
          | ).
          |  This style, or a variant, is advocated by most C programming experts and is the style observed in this manual.
        // White Space
        a(name='White_Space')
        h4 White Space
        p
          | As noted earlier, the term "white space" references combinations of characters that when printed produce a blank
          | area on the display. For C, white space is formed by using characters such as spaces, new lines, and tabs.
          | The white space characters in C are
        .Indent
          table.striped
            thead
              tr
                td(align='center')
                  b Character
                td
                  b Print Action
            tbody
              tr
                td
                  code
                    |  &apos; &apos; 
                td(align='center') space
              tr
                td
                  code
                    |   &apos;\n&apos; 
                td(align='center') new line
              tr
                td
                  code  '\t' 
                td(align='center') horizontal tab
              tr
                td
                  code  '\v' 
                td(align='center') vertical tab
              tr
                td
                  code  '\r' 
                td(align='center') carriage return
              tr
                td
                  code  '\f' 
                td(align='center') formfeed
          br
          | The print result may differ from one display device to another (for example, while 
          code '\n'
          |  has the same outcome for almost every device, 
          code '\r'
          |  may behave the same as 
          code '\n'
          |  for some devices but on others simply reposition printing at the start of the current line).
        p
          | The C compiler either ignores white space that is not imbedded inside double quote marks, or collapses it to
          | a single generic white space character for compilation purposes. This means that other than for character
          | strings, white space can be used for things like indentation that improve program readability. White space
          | is required where it is needed to separate adjacent objects, but if another separator such as a parenthesis,
          | comma, curly brace, square bracket, semi-colon, etc is present, white space is not required.
          // Indentation
          a(name='Indentation')
        h4 Indentation
        p
          | Good use of indentation offsets program blocks, not only making a program more easily understood, but making
          | it easier to determine if the curly braces are matched and block structures will produce the desired
          | semantic results. From the C compiler's point of view,
        pre
          code.language-clike
            | /* Simple example: C Programmer&apos;s Manual */
            | int main()
            | {
            |     printf(&quot;Hello, world!\n&quot;); /* simple example */
            | }
        p and
        pre
          code.language-clike
            | /* Simple example: C Programmer&apos;s Manual */int main(){printf(&quot;Hello, world!\n&quot;);} /* simple example */
        p
          | are equivalent, but it is pretty clear the use of white space to set off the elements of the program in the
          | first version makes it more understandable than for the second. This distinction becomes even more important
          | when nested selection and iteration statements are being employed. For an admittedly extreme example,
          | the following construction as presented will compile, but from a human readability point of view is almost
          | incomprehensible:
        .Indent
          code
            | switch(i){case 0:while(j++&lt;100){k++;if(k&gt;10)break;}break;case 1:if(j&gt;50)k--;else while(j--&gt;=0)k++;break;}
        p
          | In addition to better presenting overall program logic, use of a consistent programming style facilitates
          | debugging programs. Just as writers develop styles intended to make the text they produce more easily
          | read and understood, programmers develop styles for making their programs easier to read and understand,
          | but with the added objective of making them easier to debug. The KISS IDE program editor provides facilities
          | for automatic indentation that reflects common practice for C programmers.
        // Commenting Style
        a(name='Commenting_Style')
        h4 Commenting
        p
          | Comments are the means for programmers to integrate documentation into a program. The lead comment typically
          | specifies the purpose of the program. For large projects, it is a common practice to also include a (bracketed)
          | comment on program history, in particular reflecting the changes that have been made to the program,
          | including by whom, when, and where in the program.
        p
        p
          | Multi-line comments are typically used to offset description and purpose of major program components.
          | Single-line comments are useful for provide an explanation of logic or reasoning that might be
          | subsequently useful if that part of the program needs to be revisited for debugging or other
          | purposes.
        // START FOOTER

