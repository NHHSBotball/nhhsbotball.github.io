html
  head
    link(href='http://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    link(href='/css/base.css', rel='stylesheet', type='text/css')
    link(href='/css/materialize.min.css', media='screen,projection', rel='stylesheet', type='text/css')
    link(href='/css/docs.css', rel='stylesheet', type='text/css')
    link(href='../imgs/logos/botguy.png', rel='icon')
    title Botball Documentation - Tutorial
    meta(content='#00796b', name='theme-color')
    meta(content='width=device-width, initial-scale=1.0', name='viewport')
  body
    script(src='https://code.jquery.com/jquery-2.1.1.min.js', type='text/javascript')
    script(src='/js/materialize.min.js', type='text/javascript')
    script.
      $(document).ready(function () {
      $('.button-collapse').sideNav({
      draggable: true
      });
      $(".active").parent().parent().siblings()[0].click() })
    header
      ul#slide-out.side-nav.fixed
        li.red.lighten-1(style='height: 130px')
          .userView
            h5.white-text
              a.white-text(href='/docs/index.html') Index
        li
          a(href='/docs/tutorial.html') Tutorial
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Data Objects
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/data-objects/index.html') Introduction
                  li
                    a(href='/docs/data-objects/variables.html') Variables
                  li
                    a(href='/docs/data-objects/constants.html') Constants
                  li
                    a(href='/docs/data-objects/data-types.html') Data Types
                  li
                    a(href='/docs/data-objects/arrays.html') Arrays
                  li
                    a(href='/docs/data-objects/structures.html') Structures
                  li
                    a(href='/docs/data-objects/initialization-examples.html') Initialization Examples
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Statements and Expressions
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/statements-and-expressions/index.html') Introduction
                  li
                    a(href='/docs/statements-and-expressions/operators.html') Operators
                  li
                    a(href='/docs/statements-and-expressions/control-flow.html') Control Flow
        li
          a(href='/docs/tutorial.html') Style
        li
          a(href='/docs/tutorial.html') Debugging
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Printing
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/printing/index.html') Introduction
                  li
                    a(href='/docs/printing/examples.html') Examples
                  li
                    a(href='/docs/printing/printf-codes.html') printf Codes
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Preprocessor
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/preprocessor/index.html') Introduction
                  li
                    a(href='/docs/preprocessor/directives.html') Directives
                  li
                    a(href='/docs/preprocessor/include.html') Include
                  li
                    a(href='/docs/preprocessor/macros.html') Macros
                  li
                    a(href='/docs/preprocessor/conditional-compilation.html') Conditional Compilation
        li
          a(href='/docs/lib/math.html') Math Library
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | KIPR Wallaby/Link
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/common-functions.html') Common Functions
                  li
                    a(href='/docs/lib/kipr/functions.html') Functions List
                  li
                    a(href='/docs/lib/kipr/camera.html') Camera Functions
                  li
                    a(href='/docs/lib/kipr/graphics.html') Graphics Functions
                  li
                    a(href='/docs/lib/kipr/depth.html') Depth Sensor Functions
                  li.active
                    a(href='/docs/lib/kipr/usb.html') File I/O Functions
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | iRobot Create
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/create/index.html') Introduction
                  li
                    a(href='/docs/lib/kipr/create/serial.html') Serial Functions
                  li
                    a(href='/docs/lib/kipr/create/configuration.html') Configuration Functions
                  li
                    a(href='/docs/lib/kipr/create/movement.html') Movement Functions
                  li
                    a(href='/docs/lib/kipr/create/sensors.html') Sensor Functions
                  li
                    a(href='/docs/lib/kipr/create/battery.html') Battery Functions
                  li
                    a(href='/docs/lib/kipr/create/built-ins.html') Built-In Functions
                  li
                    a(href='/docs/lib/kipr/create/music-leds.html') LED and Music Functions
        li
          a(href='/docs/lib/kipr/botball.html') Botball Functions
        li
          a(href='/docs/lib/kipr/threads.html') Threads
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Motors and Sensors
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/info/digital-analog-sensors.html') Analog and Digital Sensors
                  li
                    a(href='/docs/lib/kipr/info/usb-sensors.html') USB Sensors
                  li
                    a(href='/docs/lib/kipr/info/motors-servos.html') Motors and Servos
                  li
                    a(href='/docs/lib/kipr/info/simulator.html') Simulator
        li
          a(href='/docs/full.html') Full Documentation
      nav.nav-extended.red.lighten-2
        .nav-wrapper
          .col.s12
            a.button-collapse(data-activates='slide-out', href='#', style='font-size: 50px')
              i.material-icons menu
            a#top.brand-logo.waves-effect(href='/docs/index.html') Botball Documentation
        .nav-wrapper
          .col.s12
            a.breadcrumb(href='#!') KIPR Wallaby/Link
            a.breadcrumb(href='#!') File I/O Functions
    main.row
      .container.col.s12
        // END HEADER
        // The_Link_Library_File
        a(name='USB_stick')
        h2 File I/O for a USB Flash Drive Plugged into the KIPR Robot Controller
        p
          | Before the Linux operating system can access a file system, it has to "mount" the file system. When a USB flash
          | drive is plugged into the KIPR Robot Controller, it is automatically mounted. When the USB flash drive is
          | unplugged it is automatically unmounted. The C Library has a number of functions designed to access files
          | located in mounted file systems. The library functions 
          code fprintf
          |  and 
          code fscanf
          |  respectively
          |  provide a straight forward means for writing formatted output to a file on a USB drive plugged into the KIPR
          |  Robot Controller, and for reading formatted data from a file on the USB drive. There are a number of file
          |  processing commands, including ones for accessing files byte by byte. For a full description of the range
          |  of functions available consult a standard C reference book.
        p
          | To access a file, in addition to the file name, the directory "path" leading to the file has to be known. For
          | the KIPR Robot Controller, the directory path to a mounted Flash drive in a USB port is
        .Indent
          code /kovan/media/sda1/
        p
          | Files are accessed in C via a pointer of type 
          code FILE
          | , which is defined in the system header file 
          code &lt;stdio.h&gt;
          | .
          |  The pointer for a file is established when the file is "opened" for access. If the 
          code fopen
          |  function
          |  returns a 
          code NULL
          |  pointer, it indicates that either the file doesn't exist for the specified file path, or
          |  its file system hasn't been mounted (e.g., the USB drive has not been plugged in). Both cases are illustrated
          |  in the following program for a USB drive plugged into a KIPR Robot Controller. The example otherwise is a
          |  program designed to send data to a file, close the file, then reopen the file and retrieve the data to verify
          |  a successful write operation. If the file doesn't exist it is created. If it does exist, it is appended to.
          |  A user defined preprocessor macro (USB) is constructed to set the file path for the USB drive, illustrating
          |  how the preprocessor can be used to potentially simplify program code.
        a(name='LinkFileExample')
          pre
            code.language-clike
              | #include &lt;stdio.h&gt;  // make sure file I/O is defined
              | // USBFILE is a Macro defined to preface a file name with the directory path for a mounted USB drive
              | #ifndef USBFILE
              |    // _STRINGIFY_ is an auxiliary macro which converts the argument into a string (by surrounding it with double quote marks)
              |    #define _STRINGIFY_(x) #x
              |    // the USBFILE macro appends x to the path for the USB drive, then uses _STRINGIFY_ to make the text a string
              |    #define USBFILE(x) _STRINGIFY_(/kovan/media/sda1/x)
              | #endif
              | int main()
              | {
              |    FILE *f; // file pointer f (the macro defining the FILE data type is in &lt;stdio.h&gt;)
              |    // A file for the USB drive named &quot;myfile&quot; is set up using macro USBFILE
              |    char s[81], chkf[] = USBFILE(myfile); // set up the file path for myfile in string variable chkf
              |    int x, data = 2;
              |    // try opening for read (&quot;r&quot;) to see if the file exists
              |    if ((f = fopen(chkf,&quot;r&quot;)) != NULL) {
              |       fclose(f); // file chkf already exists
              |       printf(&quot;Will be appending to USB %s\n&quot;, chkf);
              |    }
              |    // (chkf is not open at this point)
              |    // open to append (&quot;a&quot;), which also tests if the USB stick is plugged in
              |    if ((f = fopen(chkf,&quot;a&quot;)) == NULL) {
              |       printf(&quot;No USB stick detected\n&quot;);
              |       return -1; // exit the program
              |    }
              |    // file is now open for append; if it didn&apos;t exist it has been created
              |    printf(&quot;Sending %s, %d\n&quot;, &quot;Field &quot;, data);
              |    fprintf(f,&quot;Field &quot;); // use fprintf to send a text string to chkf
              |    fprintf(f,&quot;%d&quot;,data); // now send formatted numeric data using fprintf
              |    fclose(f); // close the file to make sure the output is sent
              |    // now read it back
              |    f = fopen(chkf,&quot;r&quot;); // it exists since we just created it
              |    fscanf(f,&quot;%s %d&quot;,s, &amp;x); // read the two data items from the file
              |    fclose(f); // done with file, so close it
              |    printf(&quot;Data read is %s: %d\n&quot;, s, x);
              | }
          p
            | The USB drive can now be removed from the KIPR Robot Controller. If not already present, there will now be
            | a file named 
            code myfile
            |  on the USB drive, which can be read using a text processor to confirm
            |  the write operation was successful.
            // START FOOTER

