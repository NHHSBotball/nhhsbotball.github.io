html
  head
    link(href='http://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    link(href='/css/base.css', rel='stylesheet', type='text/css')
    link(href='/css/materialize.min.css', media='screen,projection', rel='stylesheet', type='text/css')
    link(href='/css/docs.css', rel='stylesheet', type='text/css')
    link(href='../imgs/logos/botguy.png', rel='icon')
    title Botball Documentation - Tutorial
    meta(content='#00796b', name='theme-color')
    meta(content='width=device-width, initial-scale=1.0', name='viewport')
  body
    script(src='https://code.jquery.com/jquery-2.1.1.min.js', type='text/javascript')
    script(src='/js/materialize.min.js', type='text/javascript')
    script.
      $(document).ready(function () {
      $('.button-collapse').sideNav({
      draggable: true
      });
      $(".active").parent().parent().siblings()[0].click() })
    header
      ul#slide-out.side-nav.fixed
        li.red.lighten-1(style='height: 130px')
          .userView
            h5.white-text
              a.white-text(href='/docs/index.html') Index
        li
          a(href='/docs/tutorial.html') Tutorial
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Data Objects
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/data-objects/index.html') Introduction
                  li
                    a(href='/docs/data-objects/variables.html') Variables
                  li
                    a(href='/docs/data-objects/constants.html') Constants
                  li
                    a(href='/docs/data-objects/data-types.html') Data Types
                  li
                    a(href='/docs/data-objects/arrays.html') Arrays
                  li
                    a(href='/docs/data-objects/structures.html') Structures
                  li
                    a(href='/docs/data-objects/initialization-examples.html') Initialization Examples
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Statements and Expressions
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/statements-and-expressions/index.html') Introduction
                  li
                    a(href='/docs/statements-and-expressions/operators.html') Operators
                  li
                    a(href='/docs/statements-and-expressions/control-flow.html') Control Flow
        li
          a(href='/docs/tutorial.html') Style
        li
          a(href='/docs/tutorial.html') Debugging
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Printing
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/printing/index.html') Introduction
                  li
                    a(href='/docs/printing/examples.html') Examples
                  li
                    a(href='/docs/printing/printf-codes.html') printf Codes
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Preprocessor
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/preprocessor/index.html') Introduction
                  li
                    a(href='/docs/preprocessor/directives.html') Directives
                  li
                    a(href='/docs/preprocessor/include.html') Include
                  li
                    a(href='/docs/preprocessor/macros.html') Macros
                  li
                    a(href='/docs/preprocessor/conditional-compilation.html') Conditional Compilation
        li
          a(href='/docs/lib/math.html') Math Library
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | KIPR Wallaby/Link
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/common-functions.html') Common Functions
                  li
                    a(href='/docs/lib/kipr/functions.html') Functions List
                  li
                    a(href='/docs/lib/kipr/camera.html') Camera Functions
                  li
                    a(href='/docs/lib/kipr/graphics.html') Graphics Functions
                  li
                    a(href='/docs/lib/kipr/depth.html') Depth Sensor Functions
                  li
                    a(href='/docs/lib/kipr/usb.html') File I/O Functions
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | iRobot Create
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/create/index.html') Introduction
                  li
                    a(href='/docs/lib/kipr/create/serial.html') Serial Functions
                  li
                    a(href='/docs/lib/kipr/create/configuration.html') Configuration Functions
                  li
                    a(href='/docs/lib/kipr/create/movement.html') Movement Functions
                  li
                    a(href='/docs/lib/kipr/create/sensors.html') Sensor Functions
                  li
                    a(href='/docs/lib/kipr/create/battery.html') Battery Functions
                  li
                    a(href='/docs/lib/kipr/create/built-ins.html') Built-In Functions
                  li
                    a(href='/docs/lib/kipr/create/music-leds.html') LED and Music Functions
        li.active
          a(href='/docs/lib/kipr/botball.html') Botball Functions
        li
          a(href='/docs/lib/kipr/threads.html') Threads
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Motors and Sensors
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/info/digital-analog-sensors.html') Analog and Digital Sensors
                  li
                    a(href='/docs/lib/kipr/info/usb-sensors.html') USB Sensors
                  li
                    a(href='/docs/lib/kipr/info/motors-servos.html') Motors and Servos
                  li
                    a(href='/docs/lib/kipr/info/simulator.html') Simulator
        li
          a(href='/docs/full.html') Full Documentation
      nav.nav-extended.red.lighten-2
        .nav-wrapper
          .col.s12
            a.button-collapse(data-activates='slide-out', href='#', style='font-size: 50px')
              i.material-icons menu
            a#top.brand-logo.waves-effect(href='/docs/index.html') Botball Documentation
        .nav-wrapper
          .col.s12
            a.breadcrumb(href='#!') Botball Functions
    main.row
      .container.col.s12
        // END HEADER
        // Botball
        a(name='Botball')
        h3 Botball
        p
          | Three functions are included in the KIPR Robot Controller Library to assist programmers in writing programs that
          | meet the basic requirements for a Botball game:
        ul
          li
            code wait_for_light(&lt;
            i port_num
            code &gt;)
            | , a function for ensuring the robot
            |  doesn't begin operating until the starting light comes on.
          li
            code shut_down_in(&lt;
            i time
            code &gt;)
            | , a function which ensures the robot stops
            |  operating within the time limits for a Botball game.
          li
            code run_for(&lt;
            i time
            code &gt;, &lt;
            i func_name
            code &gt;)
            | , which
            |  is used to start a function, but not allow it to run beyond a specified time.
        p For the typical Botball program, the first executable statement will be
        .Indent
          code wait_for_light(&lt;
          i port_num
          code &gt;);
        p
          | If there are any other set up routines being used, then usually 
          code wait_for_light
          |  will immediately
          |  follow them. 
          code wait_for_light
          |  takes the robot operator through a process of using the starting
          |  light to set calibration values for the IR light sensor plugged into the specified port. The purpose
          |  is to set two values, one to check the sensor reading with light off and the other with light on. The
          |  difference between the two values has to be large enough for the sensor to determine if the light is
          |  off or on. If the sensor is suitably shielded and is positioned so that a successful calibration is achieved, 
          code wait_for_light
          |  calls for "hands off" and blocks further execution until the light is turned
          |  on. When "light on" is detected by the sensor, the program resumes and runs the robot according to program
          |  design. If problems occur in the calibration process, the user is notifited and the process repeats after
          |  a brief pause.
        |  The first statement in a Botball programm following 
        code wait_for_light
        |  is usually a call to the
        |  Botball function
        .Indent
          code shut_down_in(&lt;
          i time
          code &gt;);
        p
          | which will shutdown all motors and the Create module (if being used) once the specified time has expired, then
          | terminate the program.
        p
          | In contrast to completely killing the program using 
          code shut_down_in
          | , when program design requires performing
          |  some activity after the robot has completed its primary task, the function
        .Indent
          code run_for(&lt;
          i time
          code &gt;, &lt;
          i func_name
          code &gt;);
        p
          | can be used to execute the specified function, halting it once the specified time has elapsed (an action that
          | occurs only if the function is still running). The basic idea is to separate the primary task out of 
          code main
          |  and write it as a function so it can be run using 
          code run_for
          | . One simple instance where this is
          |  useful is at game end when a servo needs to remain on to maintain its position. The necessary command can
          |  be executed after using 
          code run_for
          |  to run the primary task. This approach puts the burden back
          |  on the programmer to make sure all other servo activity is halted and all drive motors and the Create module
          |  are stopped within the game's time limit.
        //
          &lt;p&gt; The function &lt;/p&gt;
          &lt;div class="Indent"&gt; &lt;code&gt;target_cha_in_chb(&lt;&lt;/code&gt;cha &lt;code&gt;&gt;, &lt;&lt;/code&gt;chb &lt;code&gt;&gt;, &lt;*&lt;/code&gt;x &lt;code&gt;&gt;, &lt;*&lt;/code&gt;y &lt;code&gt;&gt;);&lt;/code&gt;&lt;/div&gt;
          &lt;p&gt;uses the vision system to look for a color target where the color described in the color channel a is completely
          surrounded by the color described by the color channel b. The addresses of to two integer variables, x & y, are also passed. If a suitable target is found in the current frame (this function does NOT perform a track_update() call) then the function returns 1 and the contents of the two variables x and y are changed to match the image pixel location of the centroid of the color blob associated with the inside of the target. If no target with the right colors is in view, then 0 is returned and x and y are not modified. If more than one target is in view, the one with the larger inner blob (as seen by the camera) is the one whose coordinates are returned. An example of use, where the inner color is on channel 3 and the outer on 2, might be:&lt;/p&gt;
          &lt;div class="Indent"&gt; &lt;code&gt;&lt;font class="CVariable"&gt;int&lt;/font&gt; x, y;&lt;br&gt;
          &lt;font class="CVariable"&gt;if&lt;/font&gt; (target_cha_in_chb(3,2,&x,&y)==1) printf(&lt;font class="Quote"&gt;"Target found at (%d,%d)\n"&lt;/font&gt;, x, y);&lt;/code&gt;&lt;/div&gt;
        p The library functions for Botball are:
        table(style='background-color: #f0f0f0;')
          tr
            td
              br
              .Indent
                code
                  a(name='run_forx')
                  | run_for(&lt;
                i time
                code &gt;, &lt;
                i function_name
                code &gt;);
                dl
                  dd
                    | Runs the specified function and tracks its execution until either the function finishes or
                    | the specified number of seconds has elapsed. If the specified number of seconds has elapsed, 
                    code run_for
                    |  terminates execution for the function.
                code
                  a(name='shut_down_inx')
                  | shut_down_in(&lt;
                i time
                code &gt;);
                dl
                  dd
                    | Starts a timing routine that will end program execution, turn off all motors, and issue a
                    | stop command to the Create when the specified amount of time has elapsed.
                //
                  no longer in code library
                  &lt;code&gt;&lt;a name="target_cha_in_chbx"&gt;&lt;/a&gt;target_cha_in_chb(&lt;cha&lt;/code&gt;&gt;, &lt;chb &lt;code&gt;&gt;, &lt;*&lt;/code&gt;x &lt;code&gt;&gt;, lt;*&lt;/code&gt;y &lt;code&gt;&gt;);&lt;/code&gt;
                  &lt;dl&gt;&lt;dd&gt;Looks for a target consisting of a color blob on a color background, where the channel number for the inner color is &lt;code&gt;cha&lt;/code&gt; and for the surrounding surrounding background is &lt;code&gt;chb&lt;/code&gt;. If the target is found then the function returns 1, otherwise 0. If a target is found then the contents of the variables pointed to by x and y are changed to the center coordinate of the inner blob.
                  &lt;/dd&gt;&lt;/dl&gt;
                code
                  a(name='wait_for_lightx')
                  | wait_for_light(&lt;
                i port
                code &gt;);
                dl
                  dd
                    | Steps the user through a calibration procedure to establish on/off light levels for a sensor
                    | plugged in the specified port. If calibration does not provide enough discrimination
                    | between light off and light on, the program cycles for another try. If there is enough
                    | discrimination, after "light off", the program blocks continued execution of the function
                    | until "light on", at which point execution resumes. 
                    code wait_for_light
                    |  is normally
                    |  placed at the beginning of a program designed to operate a robot, so that after calibration,
                    |  when the light comes on the robot will start autonomously.
        .Indent
          h4 Example program for the KIPR Robot Controller using a Botball program format
          a(name='BotballFormat')
          pre
            code.language-clike
              | int main()
              | {
              |    double s;
              |    int i;
              |    /* Botball calibration: determine if light sensor can discriminate between light and dark */
              |    wait_for_light(3);  // light sensor in analog port 3
              |    /* Botball timing: limit is 120 seconds; e.g., shut_down_in(119.5); */
              |    shut_down_in(10.5); // stop execution once 10.5 seconds have elapsed
              |    /* Botball program logic would be next ... the stuff below is just to keep the program running for awhile */
              |    display_clear(); // clear display for display_printf
              |    s=seconds(); // system on time at start of run
              |    for(i=0; i&lt;15; i++) {
              |       display_printf(1,1,&quot;%d. time elapsed = %.2f     &quot;, i, seconds()-s);
              |       msleep(1000); // sleep for a second
              |    }
              |    display_printf(1,3,&quot;done&quot;);
              | }
        // START FOOTER

