html
  head
    link(href='http://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    link(href='/css/base.css', rel='stylesheet', type='text/css')
    link(href='/css/materialize.min.css', media='screen,projection', rel='stylesheet', type='text/css')
    link(href='/css/docs.css', rel='stylesheet', type='text/css')
    link(href='../imgs/logos/botguy.png', rel='icon')
    title Botball Documentation - Tutorial
    meta(content='#00796b', name='theme-color')
    meta(content='width=device-width, initial-scale=1.0', name='viewport')
  body
    script(src='https://code.jquery.com/jquery-2.1.1.min.js', type='text/javascript')
    script(src='/js/materialize.min.js', type='text/javascript')
    script.
      $(document).ready(function () {
      $('.button-collapse').sideNav({
      draggable: true
      });
      $(".active").parent().parent().siblings()[0].click() })
    header
      ul#slide-out.side-nav.fixed
        li.red.lighten-1(style='height: 130px')
          .userView
            h5.white-text
              a.white-text(href='/docs/index.html') Index
        li
          a(href='/docs/tutorial.html') Tutorial
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Data Objects
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/data-objects/index.html') Introduction
                  li
                    a(href='/docs/data-objects/variables.html') Variables
                  li
                    a(href='/docs/data-objects/constants.html') Constants
                  li
                    a(href='/docs/data-objects/data-types.html') Data Types
                  li
                    a(href='/docs/data-objects/arrays.html') Arrays
                  li
                    a(href='/docs/data-objects/structures.html') Structures
                  li
                    a(href='/docs/data-objects/initialization-examples.html') Initialization Examples
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Statements and Expressions
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/statements-and-expressions/index.html') Introduction
                  li
                    a(href='/docs/statements-and-expressions/operators.html') Operators
                  li
                    a(href='/docs/statements-and-expressions/control-flow.html') Control Flow
        li
          a(href='/docs/tutorial.html') Style
        li
          a(href='/docs/tutorial.html') Debugging
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Printing
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/printing/index.html') Introduction
                  li
                    a(href='/docs/printing/examples.html') Examples
                  li
                    a(href='/docs/printing/printf-codes.html') printf Codes
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Preprocessor
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/preprocessor/index.html') Introduction
                  li
                    a(href='/docs/preprocessor/directives.html') Directives
                  li
                    a(href='/docs/preprocessor/include.html') Include
                  li
                    a(href='/docs/preprocessor/macros.html') Macros
                  li
                    a(href='/docs/preprocessor/conditional-compilation.html') Conditional Compilation
        li
          a(href='/docs/lib/math.html') Math Library
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | KIPR Wallaby/Link
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/common-functions.html') Common Functions
                  li
                    a(href='/docs/lib/kipr/functions.html') Functions List
                  li
                    a(href='/docs/lib/kipr/camera.html') Camera Functions
                  li
                    a(href='/docs/lib/kipr/graphics.html') Graphics Functions
                  li
                    a(href='/docs/lib/kipr/depth.html') Depth Sensor Functions
                  li
                    a(href='/docs/lib/kipr/usb.html') File I/O Functions
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | iRobot Create
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/create/index.html') Introduction
                  li
                    a(href='/docs/lib/kipr/create/serial.html') Serial Functions
                  li
                    a(href='/docs/lib/kipr/create/configuration.html') Configuration Functions
                  li
                    a(href='/docs/lib/kipr/create/movement.html') Movement Functions
                  li
                    a(href='/docs/lib/kipr/create/sensors.html') Sensor Functions
                  li
                    a(href='/docs/lib/kipr/create/battery.html') Battery Functions
                  li
                    a(href='/docs/lib/kipr/create/built-ins.html') Built-In Functions
                  li
                    a(href='/docs/lib/kipr/create/music-leds.html') LED and Music Functions
        li
          a(href='/docs/lib/kipr/botball.html') Botball Functions
        li
          a(href='/docs/lib/kipr/threads.html') Threads
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Motors and Sensors
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/info/digital-analog-sensors.html') Analog and Digital Sensors
                  li
                    a(href='/docs/lib/kipr/info/usb-sensors.html') USB Sensors
                  li
                    a(href='/docs/lib/kipr/info/motors-servos.html') Motors and Servos
                  li.active
                    a(href='/docs/lib/kipr/info/simulator.html') Simulator
        li
          a(href='/docs/full.html') Full Documentation
      nav.nav-extended.red.lighten-2
        .nav-wrapper
          .col.s12
            a.button-collapse(data-activates='slide-out', href='#', style='font-size: 50px')
              i.material-icons menu
            a#top.brand-logo.waves-effect(href='/docs/index.html') Botball Documentation
        .nav-wrapper
          .col.s12
            a.breadcrumb(href='#!') Motors and Sensors
            a.breadcrumb(href='#!') Simulator
    main.row
      .container.col.s12
        // END HEADER
        // Simulator
        a(name='Simulator')
        h3 KIPR Robot Controller Simulator
        p
          | When the KIPR Software Suite is installed, in addition to the KISS IDE, a graphical simulator is installed which
          | can be selected as a target for a project being developed using the KISS IDE. The simulator provides a simulated
          | robot and a stylized operating environment for the robot, including a simulated (Botball style) starting
          | light. For motors and sensors incorporated into the simulated robot, side panels show motor and sensor response
          | values. A representation of the KIPR Robot Controller console screen is also provided for display output.
          | The simulated robot can be arbitrarily positioned in its environment using keyboard entry and mouse functions,
          | including turning the simulated light on/off.
        p
          | The simulator provides an effective means for trying out functions in the KIPR Robot Controller Library and for
          | testing small examples when learning how to use a library function. More fundamentally, it provides a user
          | friendly means for obtaining visual feedback for those who are learning to program in C.
        p
          | Perhaps most importantly, the simulator provides means for testing KIPR Robot Controller program code before
          | downloading a project to a KIPR Robot Controller, speeding up the process of obtaining a working program
          | for a KIPR Robot Controller controlled robot. No simulator can anticipate every variation a real robot might
          | encounter in performing its mission, but in general, simulation serves to limit the amount of program tweaking
          | required to attain acceptable performance on the actual robot.
        a(name='Running_a_Project')
        h4 Running a Project
        p
          | If a program's action does not involve the KIPR Robot Controller Library functions, its target can be "My Computer".
          | When KIPR Robot Controller Library functions are being used, the target needs to be "My KIPR Robot Controller
          | Simulator" or an attached KIPR Robot Controller. If no KIPR Robot Controller is attached, the simulator can
          | be used to see what a program does.
        ul
          li
            | If the project is the only project open in the IDE, it is automatically the 
            i active project.
          li
            | If there is more than one project open in the IDE, clicking on the project name in the side panel will make
            | it the active project.
          li
            | Clicking on either the 
            i Compile
            |  or the 
            i Run
            |  button in the IDE will send the active project to
            |  the target for compilation, launching the simulator if it is the selected target (and not already running).
            |  If there are any compilation errors they are reported back to the IDE to be displayed in its results
            |  panel. If the 
            i Run
            |  button was used in the IDE, the target will also run the project. For the Simulator,
            |  the names of projects loaded into the Simulator will be displayed in a side panel (analogous to the 
            i Programs
            |  listing on the KIPR Robot Controller).
        table
          tr
            td
              // &lt;img class="center" src="images/SimulatorRun.jpg" width=80%&gt;&lt;/img&gt;
              p.center For executing a project already loaded in the Simulator
        p When the target for the active project is the simulator
        ul
          li
            | Clicking 
            i Run
            |  in the IDE saves, loads, compiles, and runs the active project in the simulator.
          li
            | Clicking 
            i Compile
            |  in the IDE saves, loads, and compiles the active project in the simulator.
            ul
              li
                | Compiling allows you to position the robot and the light on the simulator game board before the program
                | is run.
              li
                | Unless you are using a custom board, compiling allows you to change the board the robot runs on to
                | one of the alternative default boards.
              li
                | Compiled projects are listed in the side panel and can be run by highlighting the name and clicking
                i Run
                |  in the simulator.
        a(name='Configuring_Simulator')
        h4 Configuring the Simulator Starting Light, Robot, and Game Board
        ol
          li
            | Positioning and using the light
            ul
              li
                | The light is positioned by clicking on the light and dragging it.
              li
                | Double clicking on the light toggles it on/off.
          li
            | Positioning the robot
            ul
              li
                | The robot is positioned by clicking on the robot and dragging it.
              li
                | You can turn the robot by holding down the shift key while clicking on the nose of the robot, using
                | it as a handle for turning.
              li
                | You can then run your project by highlighting its name and clicking 
                i Run
          li
            | Selecting a game board
            ul
              li
                | You can either
                ul
                  li
                    | provide a custom board for your project (See IDE 
                    i Help
                    |  for information on configuring
                    |  a custom board)
                |  or
                ul
                  li
                    | select one of the default boards under the Simulators 
                    i Select Board
                    |  tab
              li
                | If you have a custom board file in your project, the Simulator will not let you change to one
                | of its default boards
              li
                | The 
                i Select Board
                |  tab brings up a 
                i Board Selection
                |  window with the currently available
                |  default game boards you can select from among
        table
          tr
            td
              // &lt;img class="center" src="images/SimulatorBoard.jpg" width=80%&gt;&lt;/img&gt;
        // START FOOTER

