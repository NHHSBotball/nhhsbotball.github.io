html
  head
    link(href='http://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    link(href='/css/base.css', rel='stylesheet', type='text/css')
    link(href='/css/materialize.min.css', media='screen,projection', rel='stylesheet', type='text/css')
    link(href='/css/docs.css', rel='stylesheet', type='text/css')
    link(href='../imgs/logos/botguy.png', rel='icon')
    title Botball Documentation - Tutorial
    meta(content='#00796b', name='theme-color')
    meta(content='width=device-width, initial-scale=1.0', name='viewport')
  body
    script(src='https://code.jquery.com/jquery-2.1.1.min.js', type='text/javascript')
    script(src='/js/materialize.min.js', type='text/javascript')
    script.
      $(document).ready(function () {
      $('.button-collapse').sideNav({
      draggable: true
      });
      $(".active").parent().parent().siblings()[0].click() })
    header
      ul#slide-out.side-nav.fixed
        li.red.lighten-1(style='height: 130px')
          .userView
            h5.white-text
              a.white-text(href='/docs/index.html') Index
        li
          a(href='/docs/tutorial.html') Tutorial
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Data Objects
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/data-objects/index.html') Introduction
                  li
                    a(href='/docs/data-objects/variables.html') Variables
                  li
                    a(href='/docs/data-objects/constants.html') Constants
                  li
                    a(href='/docs/data-objects/data-types.html') Data Types
                  li
                    a(href='/docs/data-objects/arrays.html') Arrays
                  li
                    a(href='/docs/data-objects/structures.html') Structures
                  li
                    a(href='/docs/data-objects/initialization-examples.html') Initialization Examples
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Statements and Expressions
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/statements-and-expressions/index.html') Introduction
                  li
                    a(href='/docs/statements-and-expressions/operators.html') Operators
                  li
                    a(href='/docs/statements-and-expressions/control-flow.html') Control Flow
        li
          a(href='/docs/tutorial.html') Style
        li
          a(href='/docs/tutorial.html') Debugging
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Printing
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/printing/index.html') Introduction
                  li
                    a(href='/docs/printing/examples.html') Examples
                  li
                    a(href='/docs/printing/printf-codes.html') printf Codes
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Preprocessor
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/preprocessor/index.html') Introduction
                  li
                    a(href='/docs/preprocessor/directives.html') Directives
                  li
                    a(href='/docs/preprocessor/include.html') Include
                  li
                    a(href='/docs/preprocessor/macros.html') Macros
                  li
                    a(href='/docs/preprocessor/conditional-compilation.html') Conditional Compilation
        li
          a(href='/docs/lib/math.html') Math Library
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | KIPR Wallaby/Link
              .collapsible-body(style='display: block')
                ul
                  li.active
                    a(href='/docs/lib/kipr/common-functions.html') Common Functions
                  li
                    a(href='/docs/lib/kipr/functions.html') Functions List
                  li
                    a(href='/docs/lib/kipr/camera.html') Camera Functions
                  li
                    a(href='/docs/lib/kipr/graphics.html') Graphics Functions
                  li
                    a(href='/docs/lib/kipr/depth.html') Depth Sensor Functions
                  li
                    a(href='/docs/lib/kipr/usb.html') File I/O Functions
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | iRobot Create
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/create/index.html') Introduction
                  li
                    a(href='/docs/lib/kipr/create/serial.html') Serial Functions
                  li
                    a(href='/docs/lib/kipr/create/configuration.html') Configuration Functions
                  li
                    a(href='/docs/lib/kipr/create/movement.html') Movement Functions
                  li
                    a(href='/docs/lib/kipr/create/sensors.html') Sensor Functions
                  li
                    a(href='/docs/lib/kipr/create/battery.html') Battery Functions
                  li
                    a(href='/docs/lib/kipr/create/built-ins.html') Built-In Functions
                  li
                    a(href='/docs/lib/kipr/create/music-leds.html') LED and Music Functions
        li
          a(href='/docs/lib/kipr/botball.html') Botball Functions
        li
          a(href='/docs/lib/kipr/threads.html') Threads
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Motors and Sensors
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/info/digital-analog-sensors.html') Analog and Digital Sensors
                  li
                    a(href='/docs/lib/kipr/info/usb-sensors.html') USB Sensors
                  li
                    a(href='/docs/lib/kipr/info/motors-servos.html') Motors and Servos
                  li
                    a(href='/docs/lib/kipr/info/simulator.html') Simulator
        li
          a(href='/docs/full.html') Full Documentation
      nav.nav-extended.red.lighten-2
        .nav-wrapper
          .col.s12
            a.button-collapse(data-activates='slide-out', href='#', style='font-size: 50px')
              i.material-icons menu
            a#top.brand-logo.waves-effect(href='/docs/index.html') Botball Documentation
        .nav-wrapper
          .col.s12
            a.breadcrumb(href='#!') KIPR Wallaby/Link
            a.breadcrumb(href='#!') Common Functions
    main.row
      .container.col.s12
        // END HEADER
        // Commonly_Used_Link_Library_Functions
        a(name='Commonly_Used_Link_Library_Functions')
        h3 Refresher for Commonly Used KIPR Robot Controller Library Functions
        p
          | The most commonly used KIPR Robot Controller Library functions for robot control are ones for accessing sensor
          | ports, operating DC motors, and suspending a program while a motor action is in progress. A quick refresher
          | for the ones typically used follows:
        table(style='background-color: #f0f0f0;')
          tr
            td
              br
              .Indent
                code
                  a(name='display_printfx')
                  | display_printf(&lt;
                i col
                code &gt;, &lt;
                i row
                code &gt;, &lt;
                i printf-arguments
                code &gt;);
                dl
                  dd
                    | The purpose of this function is to display formatted output at a specific (column, row) location
                    | on the KIPR Robot Controller program console screen using standard 
                    code printf
                    |  formatting. The column range for the display is 0 to 41. For the 3 button (A,B,C) console
                    |  display, the row range is 0 to 9, and for the 6 button (X,Y,Z,A,B,C) console display,
                    |  the row range is 0 to 7. Excess data printed to a row is truncated (i.e. text does not
                    |  wrap). Printing " 
                    code \n
                    | " using 
                    code display_printf
                    |  will cause undesired
                    |  display results.
                code
                  a(name='digitalx')
                  | digital(&lt;
                i port#
                code &gt;)
                dl
                  dd
                    | For a switch plugged into the port, returns 0 if the switch is open and returns 1 if the
                    | switch is closed. Digital ports are numbered 8-15. Typically used with button (switch)
                    | sensors employed in bumpers or to detect limit of travel. Will also work with sensors
                    | having an analog response by interpreting the voltage reading as 0 or 1.
                code
                  a(name='analogx')
                  | analog(&lt;
                i port#
                code &gt;);
                dl
                  dd
                    | For an analog sensor plugged into the port, returns a value scaled to the range 0-1023 representing
                    | the analog voltage variation produced by the sensor. Analog ports are numbered 0-7. Light
                    | sensors and range finders are examples of sensors used in analog ports. For some sensors,
                    | in particular, the "ET" distance sensor used for robotics, the port's pull up resistor
                    | (enabled by default) has to be disabled for the analog values to be meaningful.
                code
                  a(name='analog_etx')
                  | analog_et(&lt;
                i port#
                code &gt;);
                dl
                  dd
                    | For an analog sensor plugged into the port, disables the port's pullup resistor and returns
                    | a value scaled to the range 0-1023 representing the analog voltage variation produced
                    | by the sensor. Analog ports are numbered 0-7. This is the function normally used with
                    | the "ET" distance sensor used for robotics, which has a pullup sensor already integrated
                    | into its circuitry.
                code
                  a(name='msleepx')
                  | msleep(&lt;
                i int_msecs
                code &gt;);
                dl
                  dd
                    | Causes the function to pause for the specified number of milliseconds (motor action continues).
                code
                  a(name='mavx')
                  | mav(&lt;
                i motor_#
                code &gt;, &lt;
                i vel
                code &gt;);
                dl
                  dd
                    | Turns on the specified motor port, maintaining the specified motor velocity using PID (proportional,
                    | integral, derivative) motor control. The motor number is an integer in the range 0 to
                    | 3. Motor velocity is an integer between -1000 and 1000 where 0 means the motor is off
                    | and negative numbers direct the motor to run in the reverse direction for how it is plugged
                    | into the motor port.
                code
                  a(name='motorx')
                  | motor(&lt;
                i motor_#
                code &gt;, &lt;
                i motor_power
                code &gt;);
                dl
                  dd
                    | Turns on the specified motor port at the PWM power level specified, where a positive power
                    | value operates the motor in the direction as 
                    code fd
                    |  and a negative value operates
                    |  it in the reverse direction. The motor number is an integer in the range 0 to 3. The
                    |  power setting is -100 to 100 representing percentage of full power. Motor response with
                    |  respect to power is non-linear (i.e., doubling power does not double motor velocity).
                    |  Moreover, motor velocity for a power setting varies according to load. In contrast, PID
                    |  motor control varies the PWM power applied to try to establish and maintain a specified
                    |  motor velocity.
                code
                  a(name='fdx')
                  | fd(&lt;
                i motor_#
                code &gt;);
                dl
                  dd
                    | Turns of the specified motor port at maximum PWM (pulse width modulation) power for the motor's
                    | forward direction for how the motor is plugged in. The motor number is an integer between
                    | 0 and 3
                code
                  a(name='bkx')
                  | bk(&lt;
                i motor_#
                code &gt;);
                dl
                  dd
                    | Turns of the specified motor port at maximum PWM (pulse width modulation) power for the motor's
                    | reverse direction for how the motor is plugged in. The motor number is an integer between
                    | 0 and 3
                code
                  a(name='offx')
                  | off(&lt;
                i motor_#
                code &gt;);
                dl
                  dd
                    | Turns off the specified motor port. Once a motor port is turned on, a motor plugged into
                    | the port will continue operating until the motor port is turned off or the program terminates
                    | (which turns off all motor ports).
                code
                  a(name='aox')
                  | ao();
                dl
                  dd Turns all motor ports off.
              p
        // START FOOTER

