html
  head
    link(href='http://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    link(href='/css/base.css', rel='stylesheet', type='text/css')
    link(href='/css/materialize.min.css', media='screen,projection', rel='stylesheet', type='text/css')
    link(href='/css/docs.css', rel='stylesheet', type='text/css')
    link(href='../imgs/logos/botguy.png', rel='icon')
    title Botball Documentation - Tutorial
    meta(content='#00796b', name='theme-color')
    meta(content='width=device-width, initial-scale=1.0', name='viewport')
  body
    script(src='https://code.jquery.com/jquery-2.1.1.min.js', type='text/javascript')
    script(src='/js/materialize.min.js', type='text/javascript')
    script.
      $(document).ready(function () {
      $('.button-collapse').sideNav({
      draggable: true
      });
      $(".active").parent().parent().siblings()[0].click() })
    header
      ul#slide-out.side-nav.fixed
        li.red.lighten-1(style='height: 130px')
          .userView
            h5.white-text
              a.white-text(href='/docs/index.html') Index
        li
          a(href='/docs/tutorial.html') Tutorial
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Data Objects
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/data-objects/index.html') Introduction
                  li
                    a(href='/docs/data-objects/variables.html') Variables
                  li
                    a(href='/docs/data-objects/constants.html') Constants
                  li
                    a(href='/docs/data-objects/data-types.html') Data Types
                  li
                    a(href='/docs/data-objects/arrays.html') Arrays
                  li
                    a(href='/docs/data-objects/structures.html') Structures
                  li
                    a(href='/docs/data-objects/initialization-examples.html') Initialization Examples
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Statements and Expressions
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/statements-and-expressions/index.html') Introduction
                  li
                    a(href='/docs/statements-and-expressions/operators.html') Operators
                  li
                    a(href='/docs/statements-and-expressions/control-flow.html') Control Flow
        li
          a(href='/docs/tutorial.html') Style
        li
          a(href='/docs/tutorial.html') Debugging
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Printing
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/printing/index.html') Introduction
                  li
                    a(href='/docs/printing/examples.html') Examples
                  li
                    a(href='/docs/printing/printf-codes.html') printf Codes
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Preprocessor
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/preprocessor/index.html') Introduction
                  li
                    a(href='/docs/preprocessor/directives.html') Directives
                  li
                    a(href='/docs/preprocessor/include.html') Include
                  li
                    a(href='/docs/preprocessor/macros.html') Macros
                  li
                    a(href='/docs/preprocessor/conditional-compilation.html') Conditional Compilation
        li
          a(href='/docs/lib/math.html') Math Library
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | KIPR Wallaby/Link
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/common-functions.html') Common Functions
                  li
                    a(href='/docs/lib/kipr/functions.html') Functions List
                  li
                    a(href='/docs/lib/kipr/camera.html') Camera Functions
                  li
                    a(href='/docs/lib/kipr/graphics.html') Graphics Functions
                  li
                    a(href='/docs/lib/kipr/depth.html') Depth Sensor Functions
                  li
                    a(href='/docs/lib/kipr/usb.html') File I/O Functions
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | iRobot Create
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/create/index.html') Introduction
                  li
                    a(href='/docs/lib/kipr/create/serial.html') Serial Functions
                  li
                    a(href='/docs/lib/kipr/create/configuration.html') Configuration Functions
                  li
                    a(href='/docs/lib/kipr/create/movement.html') Movement Functions
                  li
                    a(href='/docs/lib/kipr/create/sensors.html') Sensor Functions
                  li
                    a(href='/docs/lib/kipr/create/battery.html') Battery Functions
                  li
                    a(href='/docs/lib/kipr/create/built-ins.html') Built-In Functions
                  li
                    a(href='/docs/lib/kipr/create/music-leds.html') LED and Music Functions
        li
          a(href='/docs/lib/kipr/botball.html') Botball Functions
        li.active
          a(href='/docs/lib/kipr/threads.html') Threads
        li.no-padding
          ul.collapsible.collapsible-accordion
            li
              a.collapsible-header
                i.material-icons arrow_drop_down
                | Motors and Sensors
              .collapsible-body(style='display: block')
                ul
                  li
                    a(href='/docs/lib/kipr/info/digital-analog-sensors.html') Analog and Digital Sensors
                  li
                    a(href='/docs/lib/kipr/info/usb-sensors.html') USB Sensors
                  li
                    a(href='/docs/lib/kipr/info/motors-servos.html') Motors and Servos
                  li
                    a(href='/docs/lib/kipr/info/simulator.html') Simulator
        li
          a(href='/docs/full.html') Full Documentation
      nav.nav-extended.red.lighten-2
        .nav-wrapper
          .col.s12
            a.button-collapse(data-activates='slide-out', href='#', style='font-size: 50px')
              i.material-icons menu
            a#top.brand-logo.waves-effect(href='/docs/index.html') Botball Documentation
        .nav-wrapper
          .col.s12
            a.breadcrumb(href='#!') Threads
    main.row
      .container.col.s12
        // END HEADER
        // Threads
        a(name='Threads')
        h3 Threads
        p
          | The term thread is short for the phrase "thread of execution", and represents a sequence of instructions to be
          | managed by the system as it schedules processing time among running processes. On a single processor machine,
          | like the KIPR Robot Controller, the instructions running in separate threads appear to be operating in parallel.
          | Each thread, once started, will continue until its process finishes or until it is forcibly terminated by
          | another process using the 
          code thread_destroy
          |  function. Each active thread gets a small amount of
          |  time in turn until all of its statements have been executed or it is forcibly terminated. If a thread's process
          |  cannot complete all of its statements before its turn is over, it is paused temporarily for the next thread
          |  to gets its share of time. This continues until all the active threads have gotten their slice of time and
          |  then thread processing repeats. The KIPR Robot Controller's processor is fast enough so that from the user's
          |  viewpoint it appears that all of the active processes are running in parallel.
        p
          | Functions running in threads can communicate with one another by reading and modifying global variables. The
          | global variables can be used as semaphores so that one process can signal another when it is not in a section
          | of code that might cause a conflict. Process IDs may also be stored in global variables of type
          | thread so that one process can destroy another one's thread if that is necessary program logic (think
          | in terms of a process that is in an indefinite loop monitoring sensors, so it will never finish otherwise).
        p
          | Since the operating system limits how many threads can be created, it is inadvisable to create threads in a loop.
          | Good thread management is to destroy a thread rather than leaving it hanging around once it is no longer
          | being used. Threads not destroyed by program end may still count against the operating system limit when
          | the program is run again (unless of course the system has been rebooted). This may result in a program which
          | for no observable reason ceases to work properly. It is up to the program to keep track of a thread it creates,
          | and there are no means (short of rebooting) to destroy a thread after the fact.
        p The library functions for controlling threads are:
        table(style='background-color: #f0f0f0;')
          tr
            td
              br
              .Indent
                code
                  a(name='thread_createx')
                  | thread_create(&lt;
                i function_name
                code &gt;);
                dl
                  dd
                    | Creates a thread for running the specified function and returns a value of type
                    | thread, which is the thread ID to be used for running the thread as an independent
                    | process.
                code
                  a(name='thread_destroyx')
                  | thread_destroy(&lt;
                i thread_id
                code &gt;);
                dl
                  dd
                    | Deactivates the specified thread if it is active (stopping its associated function) and destroys
                    | its thread ID.
                code
                  a(name='thread_startx')
                  | thread_start(&lt;
                i thread_id
                code &gt;);
                dl
                  dd
                    | Activates the specified thread by running its associated process in the thread.
                code
                  a(name='thread_waitx')
                  | thread_wait(&lt;
                i thread_id
                code &gt;);
                dl
                  dd
                    | Suspends execution of the function that calls 
                    code thread_wait
                    |  while the specified
                    |  thread remains active. It's purpose is to synchronize threads by suspending further execution
                    |  of a function until the selected active threads have finished.
        .Indent
          h4 Example program for the KIPR Robot Controller using threads
          p
            | This example illustrates how to detect a button press even it occurs while the main process is paused.
          pre
            code.language-clike
              | int flag=0; // global flag to signal when side button pressed
              | void chksens() {
              |    while (1) {
              |       if (side_button()) flag = 1;
              |       msleep(100); // check side button every 1/10th second
              |    }
              | }
              |  main() {
              |    int cnt = 0;
              |    thread tid; // thread variable for holding thread id
              |    tid = thread_create(chksens); // create a thread for chksens
              |    thread_start(tid); // start chksens running in its thread
              |    while (flag == 0) { // button press during sleep is still caught
              |       display_printf(1,2,&quot;elapsed time %d   &quot;,++cnt);
              |       msleep(1000);
              |    }
              |    thread_destroy(tid); // remove the thread
              |    display_printf(0,4,&quot;done&quot;);
              | }
        // START FOOTER

