extends docbase

block vars
  - var selected = 'preprocessor/directives'

block content
  // Preprocessor_Directives
  a(name='Preprocessor_Directives')
  h3 Preprocessor Directives
  p
    | Preprocessor directives are identified by the '#' symbol, which must be the first entry on a line for the directive
    | to be recognized by the C preprocessor.
  p
    | The two primary preprocessor directive are
    | #include for inserting files into the program code and
    | #define for defining macros that are expanded wherever their names appear in program code.
  p
    | For a macro call to be recognized by the preprocessor, it's definition has to occur at some point earlier in
    | the program. Macro definitions begin with the macro directive
    | #define and are usually grouped together at the beginning of the file in which they appear. The preprocessor
    | will flag a macro definition as being a duplicate if its name is reused for another
    | #define in the same file. If more than one file is employed for a program, a preprocessor directive
    | applies only within the file where it is defined.
  p
    | Since the programmer may or may not know what
    | #define commands appear in a
    | #include file, commands are provided to check to see if a macro has already been defined (
    | #ifdef 
    code  .. 
    | #endif and
    |  #ifndef 
    code  .. 
    | #endif). For example,
  .Indent
    code
      | #ifndef PI
      br
      |   #define PI 3.1416159
      br
      | #endif
  p
    | When the preprocessor encounters a valid macro name in the program code, the macro is called and its name 'expanded'
    | to be replaced by whatever text the macro generates; e.g., when the macro name PI is encountered by the preprocessor
    | it replaces it with the text 3.1416159 (for the C compiler to subsequently interpret as a floating point
    | constant).
  p
    | The directive
    | #undef removes a macro name from the list of defined macros (and otherwise does nothing). It is sometimes
    | employed defensively to guard against the possibility of
    | #include inserting a macro name that conflicts with the name of a function the programmer has defined.
    | The convention employed to minimize the likelihood of this occurrence is to use upper case letters for the
    | names of macros and for nothing else.
  p
    | The sequential bypass strategy employed by the C preprocessor precludes iterative loop directives, but a limited
    | if-else selection is provided. The directive for this purpose,
    | #if, employs a condition test with computation limited to integer constants, character constants,
    | comparisons, arithmetic and logic operators, and macros names (which are expanded before the condition test
    | is calculated). The section of code selected by a
    | #if directive consists of the lines of code that follow it, continuing until one of the directives
    | #else,
    | #endif, or
    | #elif is encountered. The section of code selected by a
    | #if directive is processed if the preprocessor calculates the value of the condition test to be non-zero;
    | otherwise, the preprocessor omits the section from the code sent to the compiler. The term used to describe
    | this procedure is 
    i conditional compilation
    |  since the condition test determines whether or not a section
    |  of code is sent on to the compiler; for example,
  .Indent
    code
      | #define CFLAG 1
      br
      | #if CFLAG==1
      br
      |   display_printf(1,3,&quot;On target  &quot;);
      br
      | #else
      br
      |   printf(&quot;On target\n&quot;);
      br
      | #endif
  p
    | selects which form of 
    code printf
    |  to use according to how CFLAG is #defined. CFLAG serves as a 'configuration
    |  variable' to be set according to the ennvironment where the program will be run.
  p
    | #elif has the same interpretation as 'else if' and requires a condition test. The section of code
    | selected by
    | #elif is terminated by any one of
    | #else,
    | #endif, or
    | #elif also.
  p
    | #else has the same interpretation as 'else', with its section of code terminated only by
    | #endif.
  p
    | The sections of code selected by the two directives
    | #ifdef and
    | #ifndef discussed earlier can be terminated by
    | #else or
    | #elif as well as
    | #endif.
  p
    | Preprocessor macros can be used to associate a name with a constant that appears in multiple places in code (e.g.,
    | PI or LMOTOR), to simplify a C function call, or to provide a debugging capability that can be turned on
    | or off by use of conditional compilation, among many other possibilities.
  // START FOOTER

