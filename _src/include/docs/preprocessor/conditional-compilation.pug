extends ../../../exclude/docbase

block vars
  - var selected = 'preprocessor/conditional-compilation'
  - var path = ["Preprocessor", "Conditional Compilation"]

block content
  // Conditional_compilation
  a(name='Conditional_compilation')
  h3 Conditional Compilation
  p
    | The C preprocessor can be used to select code to be compiled based on logical conditions in preparing a program
    | for compilation. This is called 
    i conditional compilation
    | . Conditional compilation is used to select
    |  the code that is to be incorporated into a program based on a condition test. For example, unless a macro
    |  named 
    code DEBUG
    |  has been defined (usually empty; i.e., 
    code #define DEBUG
    | ),
    |  the precompiler can omit code whose only purpose is for debugging. In particular,
  .Indent
    code
      | #ifdef DEBUG
      br
      |   printf(&quot;Going Left\n&quot;);
      br
      |   beep();
      br
      | #endif
  p
    | generates the debugging 
    code printf
    |  and 
    code beep
    |  only if 
    code DEBUG
    |  has been defined,
    |  in which case the message "Going Left" will be printed and KIPR LINK will beep when program execution
    |  reaches this part of its code. If 
    code DEBUG
    |  is not defined, the preprocessor will leave the
    |  code out and the debugging alert will not occur as the program executes.
  p
    | Macros can also be conditionally defined; for example, the somewhat more sophisticated debugging macro
    | definition
  .Indent
    code
      | #ifdef DEBUG // if DEBUG is defined, SHOW(printf(&quot;%d&quot;,i) generates DEBUG code 
      br
      |   #define SHOW(x) printf(&quot;DEBUG: &quot;); x // if case: SHOW macro is defined to generate code 
      br
      | #else  // if DEBUG is not defined, SHOW(printf(&quot;%d&quot;,i) generates nothing 
      br
      |   #define SHOW(x) // else case: SHOW macro is defined to generate nothing 
      br
      | #endif
  p
    | defines a 
    code SHOW
    |  macro in one of two ways, either to produce debugging 
    code printf
    |  statements from its argument, or to produce nothing, regardless of argument.
  p
    | If 
    code DEBUG
    |  has been defined, then a 
    code printf
    |  debugging statement used as the argument
    |  for 
    code SHOW
    |  will be incorporated into the program code. Debugging is activated by adding
    |  the
    |  #define DEBUG directive to the program, and deactivated by commenting it out. In particular,
    |  when 
    code DEBUG
    |  has been defined the code
  .Indent
    code SHOW(printf("%d\n",i);)
  p
    | inserted at an appropriate point in the program will be expanded by the preprocessor to produce the code
  .Indent
    code
      | printf(&quot;DEBUG: &quot;); printf(&quot;i=%d\n&quot;,i);)
  p
    | Absent a definition for 
    code DEBUG
    |  the macro 
    code SHOW
    |  will expand to produce no code
    |  at all.
  p
    | If the value of 
    code i
    |  is 8 and 
    code DEBUG
    |  has been defined, the expansion of 
    code SHOW
    |  illustrated above will generate code which outputs the debugging display " 
    code DEBUG: i=8
    | ".
  // START FOOTER

