extends docbase

block vars
  - var selected = 'tutorial/style'

block content
  // Style
  a(name='Programming_Style')
  h2 Programming Style
  p
    | Many authors have expressed opinions on programming style, which for C generally consists of how key elements
    | of a program are exhibited, how comments are handled, and how white space is employed, most notably in how
    | block structures are offset by placement and indentation. The manner in which a program is written affects
    | its readability, ease of understanding, and effort for debugging, enhancement, and maintenance.
  p
    | The most commonly used style, K&R Style, reflects how programs are presented in Kernighan and Ritchie's book
    | on C (
    a(href='http://www.amazon.com/C-Programming-Language-2nd-Edition/dp/0131103628') The C Programming Language (2nd Edition)
    | ).
    |  This style, or a variant, is advocated by most C programming experts and is the style observed in this manual.
  // White Space
  a(name='White_Space')
  h4 White Space
  p
    | As noted earlier, the term 'white space' references combinations of characters that when printed produce a blank
    | area on the display. For C, white space is formed by using characters such as spaces, new lines, and tabs.
    | The white space characters in C are
  .Indent
    table.striped
      thead
        tr
          td(align='center')
            b Character
          td
            b Print Action
      tbody
        tr
          td
            code
              |  &apos; &apos; 
          td(align='center') space
        tr
          td
            code
              |   &apos;\n&apos; 
          td(align='center') new line
        tr
          td
            code  '\t' 
          td(align='center') horizontal tab
        tr
          td
            code  '\v' 
          td(align='center') vertical tab
        tr
          td
            code  '\r' 
          td(align='center') carriage return
        tr
          td
            code  '\f' 
          td(align='center') formfeed
    br
    | The print result may differ from one display device to another (for example, while 
    code '\n'
    |  has the same outcome for almost every device, 
    code '\r'
    |  may behave the same as 
    code '\n'
    |  for some devices but on others simply reposition printing at the start of the current line).
  p
    | The C compiler either ignores white space that is not imbedded inside double quote marks, or collapses it to
    | a single generic white space character for compilation purposes. This means that other than for character
    | strings, white space can be used for things like indentation that improve program readability. White space
    | is required where it is needed to separate adjacent objects, but if another separator such as a parenthesis,
    | comma, curly brace, square bracket, semi-colon, etc is present, white space is not required.
    // Indentation
    a(name='Indentation')
  h4 Indentation
  p
    | Good use of indentation offsets program blocks, not only making a program more easily understood, but making
    | it easier to determine if the curly braces are matched and block structures will produce the desired
    | semantic results. From the C compiler's point of view,
  pre
    code.language-clike
      | /* Simple example: C Programmer&apos;s Manual */
      | int main()
      | {
      |     printf(&quot;Hello, world!\n&quot;); /* simple example */
      | }
  p and
  pre
    code.language-clike
      | /* Simple example: C Programmer&apos;s Manual */int main(){printf(&quot;Hello, world!\n&quot;);} /* simple example */
  p
    | are equivalent, but it is pretty clear the use of white space to set off the elements of the program in the
    | first version makes it more understandable than for the second. This distinction becomes even more important
    | when nested selection and iteration statements are being employed. For an admittedly extreme example,
    | the following construction as presented will compile, but from a human readability point of view is almost
    | incomprehensible:
  .Indent
    code
      | switch(i){case 0:while(j++&lt;100){k++;if(k&gt;10)break;}break;case 1:if(j&gt;50)k--;else while(j--&gt;=0)k++;break;}
  p
    | In addition to better presenting overall program logic, use of a consistent programming style facilitates
    | debugging programs. Just as writers develop styles intended to make the text they produce more easily
    | read and understood, programmers develop styles for making their programs easier to read and understand,
    | but with the added objective of making them easier to debug. The KISS IDE program editor provides facilities
    | for automatic indentation that reflects common practice for C programmers.
  // Commenting Style
  a(name='Commenting_Style')
  h4 Commenting
  p
    | Comments are the means for programmers to integrate documentation into a program. The lead comment typically
    | specifies the purpose of the program. For large projects, it is a common practice to also include a (bracketed)
    | comment on program history, in particular reflecting the changes that have been made to the program,
    | including by whom, when, and where in the program.
  p
  p
    | Multi-line comments are typically used to offset description and purpose of major program components.
    | Single-line comments are useful for provide an explanation of logic or reasoning that might be
    | subsequently useful if that part of the program needs to be revisited for debugging or other
    | purposes.
  // START FOOTER

